// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ant/util/histogram.proto

#ifndef PROTOBUF_ant_2futil_2fhistogram_2eproto__INCLUDED
#define PROTOBUF_ant_2futil_2fhistogram_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ant {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ant_2futil_2fhistogram_2eproto();
void protobuf_AssignDesc_ant_2futil_2fhistogram_2eproto();
void protobuf_ShutdownFile_ant_2futil_2fhistogram_2eproto();

class HistogramSnapshotPB;
class HistogramSnapshotsListPB;

// ===================================================================

class HistogramSnapshotPB : public ::google::protobuf::Message {
 public:
  HistogramSnapshotPB();
  virtual ~HistogramSnapshotPB();

  HistogramSnapshotPB(const HistogramSnapshotPB& from);

  inline HistogramSnapshotPB& operator=(const HistogramSnapshotPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HistogramSnapshotPB& default_instance();

  void Swap(HistogramSnapshotPB* other);

  // implements Message ----------------------------------------------

  HistogramSnapshotPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HistogramSnapshotPB& from);
  void MergeFrom(const HistogramSnapshotPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // required string unit = 4;
  inline bool has_unit() const;
  inline void clear_unit();
  static const int kUnitFieldNumber = 4;
  inline const ::std::string& unit() const;
  inline void set_unit(const ::std::string& value);
  inline void set_unit(const char* value);
  inline void set_unit(const char* value, size_t size);
  inline ::std::string* mutable_unit();
  inline ::std::string* release_unit();
  inline void set_allocated_unit(::std::string* unit);

  // optional string label = 19;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 19;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // required uint64 max_trackable_value = 5;
  inline bool has_max_trackable_value() const;
  inline void clear_max_trackable_value();
  static const int kMaxTrackableValueFieldNumber = 5;
  inline ::google::protobuf::uint64 max_trackable_value() const;
  inline void set_max_trackable_value(::google::protobuf::uint64 value);

  // required int32 num_significant_digits = 6;
  inline bool has_num_significant_digits() const;
  inline void clear_num_significant_digits();
  static const int kNumSignificantDigitsFieldNumber = 6;
  inline ::google::protobuf::int32 num_significant_digits() const;
  inline void set_num_significant_digits(::google::protobuf::int32 value);

  // required uint64 total_count = 7;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 7;
  inline ::google::protobuf::uint64 total_count() const;
  inline void set_total_count(::google::protobuf::uint64 value);

  // optional uint64 total_sum = 18;
  inline bool has_total_sum() const;
  inline void clear_total_sum();
  static const int kTotalSumFieldNumber = 18;
  inline ::google::protobuf::uint64 total_sum() const;
  inline void set_total_sum(::google::protobuf::uint64 value);

  // required uint64 min = 8;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 8;
  inline ::google::protobuf::uint64 min() const;
  inline void set_min(::google::protobuf::uint64 value);

  // required double mean = 9;
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 9;
  inline double mean() const;
  inline void set_mean(double value);

  // required uint64 percentile_75 = 10;
  inline bool has_percentile_75() const;
  inline void clear_percentile_75();
  static const int kPercentile75FieldNumber = 10;
  inline ::google::protobuf::uint64 percentile_75() const;
  inline void set_percentile_75(::google::protobuf::uint64 value);

  // required uint64 percentile_95 = 11;
  inline bool has_percentile_95() const;
  inline void clear_percentile_95();
  static const int kPercentile95FieldNumber = 11;
  inline ::google::protobuf::uint64 percentile_95() const;
  inline void set_percentile_95(::google::protobuf::uint64 value);

  // required uint64 percentile_99 = 12;
  inline bool has_percentile_99() const;
  inline void clear_percentile_99();
  static const int kPercentile99FieldNumber = 12;
  inline ::google::protobuf::uint64 percentile_99() const;
  inline void set_percentile_99(::google::protobuf::uint64 value);

  // required uint64 percentile_99_9 = 13;
  inline bool has_percentile_99_9() const;
  inline void clear_percentile_99_9();
  static const int kPercentile999FieldNumber = 13;
  inline ::google::protobuf::uint64 percentile_99_9() const;
  inline void set_percentile_99_9(::google::protobuf::uint64 value);

  // required uint64 percentile_99_99 = 14;
  inline bool has_percentile_99_99() const;
  inline void clear_percentile_99_99();
  static const int kPercentile9999FieldNumber = 14;
  inline ::google::protobuf::uint64 percentile_99_99() const;
  inline void set_percentile_99_99(::google::protobuf::uint64 value);

  // required uint64 max = 15;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 15;
  inline ::google::protobuf::uint64 max() const;
  inline void set_max(::google::protobuf::uint64 value);

  // repeated uint64 values = 16 [packed = true];
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 16;
  inline ::google::protobuf::uint64 values(int index) const;
  inline void set_values(int index, ::google::protobuf::uint64 value);
  inline void add_values(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_values();

  // repeated uint64 counts = 17 [packed = true];
  inline int counts_size() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 17;
  inline ::google::protobuf::uint64 counts(int index) const;
  inline void set_counts(int index, ::google::protobuf::uint64 value);
  inline void add_counts(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      counts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_counts();

  // @@protoc_insertion_point(class_scope:ant.HistogramSnapshotPB)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_unit();
  inline void clear_has_unit();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_max_trackable_value();
  inline void clear_has_max_trackable_value();
  inline void set_has_num_significant_digits();
  inline void clear_has_num_significant_digits();
  inline void set_has_total_count();
  inline void clear_has_total_count();
  inline void set_has_total_sum();
  inline void clear_has_total_sum();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_percentile_75();
  inline void clear_has_percentile_75();
  inline void set_has_percentile_95();
  inline void clear_has_percentile_95();
  inline void set_has_percentile_99();
  inline void clear_has_percentile_99();
  inline void set_has_percentile_99_9();
  inline void clear_has_percentile_99_9();
  inline void set_has_percentile_99_99();
  inline void clear_has_percentile_99_99();
  inline void set_has_max();
  inline void clear_has_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::std::string* name_;
  ::std::string* description_;
  ::std::string* unit_;
  ::std::string* label_;
  ::google::protobuf::uint64 max_trackable_value_;
  ::google::protobuf::uint64 total_count_;
  ::google::protobuf::uint64 total_sum_;
  ::google::protobuf::uint64 min_;
  double mean_;
  ::google::protobuf::uint64 percentile_75_;
  ::google::protobuf::uint64 percentile_95_;
  ::google::protobuf::uint64 percentile_99_;
  ::google::protobuf::uint64 percentile_99_9_;
  ::google::protobuf::uint64 percentile_99_99_;
  ::google::protobuf::uint64 max_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > values_;
  mutable int _values_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > counts_;
  mutable int _counts_cached_byte_size_;
  ::google::protobuf::int32 num_significant_digits_;
  friend void  protobuf_AddDesc_ant_2futil_2fhistogram_2eproto();
  friend void protobuf_AssignDesc_ant_2futil_2fhistogram_2eproto();
  friend void protobuf_ShutdownFile_ant_2futil_2fhistogram_2eproto();

  void InitAsDefaultInstance();
  static HistogramSnapshotPB* default_instance_;
};
// -------------------------------------------------------------------

class HistogramSnapshotsListPB : public ::google::protobuf::Message {
 public:
  HistogramSnapshotsListPB();
  virtual ~HistogramSnapshotsListPB();

  HistogramSnapshotsListPB(const HistogramSnapshotsListPB& from);

  inline HistogramSnapshotsListPB& operator=(const HistogramSnapshotsListPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HistogramSnapshotsListPB& default_instance();

  void Swap(HistogramSnapshotsListPB* other);

  // implements Message ----------------------------------------------

  HistogramSnapshotsListPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HistogramSnapshotsListPB& from);
  void MergeFrom(const HistogramSnapshotsListPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ant.HistogramSnapshotPB histograms = 1;
  inline int histograms_size() const;
  inline void clear_histograms();
  static const int kHistogramsFieldNumber = 1;
  inline const ::ant::HistogramSnapshotPB& histograms(int index) const;
  inline ::ant::HistogramSnapshotPB* mutable_histograms(int index);
  inline ::ant::HistogramSnapshotPB* add_histograms();
  inline const ::google::protobuf::RepeatedPtrField< ::ant::HistogramSnapshotPB >&
      histograms() const;
  inline ::google::protobuf::RepeatedPtrField< ::ant::HistogramSnapshotPB >*
      mutable_histograms();

  // @@protoc_insertion_point(class_scope:ant.HistogramSnapshotsListPB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ant::HistogramSnapshotPB > histograms_;
  friend void  protobuf_AddDesc_ant_2futil_2fhistogram_2eproto();
  friend void protobuf_AssignDesc_ant_2futil_2fhistogram_2eproto();
  friend void protobuf_ShutdownFile_ant_2futil_2fhistogram_2eproto();

  void InitAsDefaultInstance();
  static HistogramSnapshotsListPB* default_instance_;
};
// ===================================================================


// ===================================================================

// HistogramSnapshotPB

// required string type = 1;
inline bool HistogramSnapshotPB::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HistogramSnapshotPB::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HistogramSnapshotPB::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HistogramSnapshotPB::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& HistogramSnapshotPB::type() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.type)
  return *type_;
}
inline void HistogramSnapshotPB::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.type)
}
inline void HistogramSnapshotPB::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.HistogramSnapshotPB.type)
}
inline void HistogramSnapshotPB::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.HistogramSnapshotPB.type)
}
inline ::std::string* HistogramSnapshotPB::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.HistogramSnapshotPB.type)
  return type_;
}
inline ::std::string* HistogramSnapshotPB::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HistogramSnapshotPB::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.HistogramSnapshotPB.type)
}

// required string name = 2;
inline bool HistogramSnapshotPB::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HistogramSnapshotPB::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HistogramSnapshotPB::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HistogramSnapshotPB::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& HistogramSnapshotPB::name() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.name)
  return *name_;
}
inline void HistogramSnapshotPB::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.name)
}
inline void HistogramSnapshotPB::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.HistogramSnapshotPB.name)
}
inline void HistogramSnapshotPB::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.HistogramSnapshotPB.name)
}
inline ::std::string* HistogramSnapshotPB::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.HistogramSnapshotPB.name)
  return name_;
}
inline ::std::string* HistogramSnapshotPB::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HistogramSnapshotPB::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.HistogramSnapshotPB.name)
}

// optional string description = 3;
inline bool HistogramSnapshotPB::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HistogramSnapshotPB::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HistogramSnapshotPB::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HistogramSnapshotPB::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& HistogramSnapshotPB::description() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.description)
  return *description_;
}
inline void HistogramSnapshotPB::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.description)
}
inline void HistogramSnapshotPB::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.HistogramSnapshotPB.description)
}
inline void HistogramSnapshotPB::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.HistogramSnapshotPB.description)
}
inline ::std::string* HistogramSnapshotPB::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.HistogramSnapshotPB.description)
  return description_;
}
inline ::std::string* HistogramSnapshotPB::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HistogramSnapshotPB::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.HistogramSnapshotPB.description)
}

// required string unit = 4;
inline bool HistogramSnapshotPB::has_unit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HistogramSnapshotPB::set_has_unit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HistogramSnapshotPB::clear_has_unit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HistogramSnapshotPB::clear_unit() {
  if (unit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_->clear();
  }
  clear_has_unit();
}
inline const ::std::string& HistogramSnapshotPB::unit() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.unit)
  return *unit_;
}
inline void HistogramSnapshotPB::set_unit(const ::std::string& value) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_ = new ::std::string;
  }
  unit_->assign(value);
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.unit)
}
inline void HistogramSnapshotPB::set_unit(const char* value) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_ = new ::std::string;
  }
  unit_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.HistogramSnapshotPB.unit)
}
inline void HistogramSnapshotPB::set_unit(const char* value, size_t size) {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_ = new ::std::string;
  }
  unit_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.HistogramSnapshotPB.unit)
}
inline ::std::string* HistogramSnapshotPB::mutable_unit() {
  set_has_unit();
  if (unit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unit_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.HistogramSnapshotPB.unit)
  return unit_;
}
inline ::std::string* HistogramSnapshotPB::release_unit() {
  clear_has_unit();
  if (unit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unit_;
    unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HistogramSnapshotPB::set_allocated_unit(::std::string* unit) {
  if (unit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unit_;
  }
  if (unit) {
    set_has_unit();
    unit_ = unit;
  } else {
    clear_has_unit();
    unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.HistogramSnapshotPB.unit)
}

// optional string label = 19;
inline bool HistogramSnapshotPB::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HistogramSnapshotPB::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HistogramSnapshotPB::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HistogramSnapshotPB::clear_label() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& HistogramSnapshotPB::label() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.label)
  return *label_;
}
inline void HistogramSnapshotPB::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.label)
}
inline void HistogramSnapshotPB::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.HistogramSnapshotPB.label)
}
inline void HistogramSnapshotPB::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.HistogramSnapshotPB.label)
}
inline ::std::string* HistogramSnapshotPB::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.HistogramSnapshotPB.label)
  return label_;
}
inline ::std::string* HistogramSnapshotPB::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HistogramSnapshotPB::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.HistogramSnapshotPB.label)
}

// required uint64 max_trackable_value = 5;
inline bool HistogramSnapshotPB::has_max_trackable_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HistogramSnapshotPB::set_has_max_trackable_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HistogramSnapshotPB::clear_has_max_trackable_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HistogramSnapshotPB::clear_max_trackable_value() {
  max_trackable_value_ = GOOGLE_ULONGLONG(0);
  clear_has_max_trackable_value();
}
inline ::google::protobuf::uint64 HistogramSnapshotPB::max_trackable_value() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.max_trackable_value)
  return max_trackable_value_;
}
inline void HistogramSnapshotPB::set_max_trackable_value(::google::protobuf::uint64 value) {
  set_has_max_trackable_value();
  max_trackable_value_ = value;
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.max_trackable_value)
}

// required int32 num_significant_digits = 6;
inline bool HistogramSnapshotPB::has_num_significant_digits() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HistogramSnapshotPB::set_has_num_significant_digits() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HistogramSnapshotPB::clear_has_num_significant_digits() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HistogramSnapshotPB::clear_num_significant_digits() {
  num_significant_digits_ = 0;
  clear_has_num_significant_digits();
}
inline ::google::protobuf::int32 HistogramSnapshotPB::num_significant_digits() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.num_significant_digits)
  return num_significant_digits_;
}
inline void HistogramSnapshotPB::set_num_significant_digits(::google::protobuf::int32 value) {
  set_has_num_significant_digits();
  num_significant_digits_ = value;
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.num_significant_digits)
}

// required uint64 total_count = 7;
inline bool HistogramSnapshotPB::has_total_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HistogramSnapshotPB::set_has_total_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HistogramSnapshotPB::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HistogramSnapshotPB::clear_total_count() {
  total_count_ = GOOGLE_ULONGLONG(0);
  clear_has_total_count();
}
inline ::google::protobuf::uint64 HistogramSnapshotPB::total_count() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.total_count)
  return total_count_;
}
inline void HistogramSnapshotPB::set_total_count(::google::protobuf::uint64 value) {
  set_has_total_count();
  total_count_ = value;
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.total_count)
}

// optional uint64 total_sum = 18;
inline bool HistogramSnapshotPB::has_total_sum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HistogramSnapshotPB::set_has_total_sum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HistogramSnapshotPB::clear_has_total_sum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HistogramSnapshotPB::clear_total_sum() {
  total_sum_ = GOOGLE_ULONGLONG(0);
  clear_has_total_sum();
}
inline ::google::protobuf::uint64 HistogramSnapshotPB::total_sum() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.total_sum)
  return total_sum_;
}
inline void HistogramSnapshotPB::set_total_sum(::google::protobuf::uint64 value) {
  set_has_total_sum();
  total_sum_ = value;
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.total_sum)
}

// required uint64 min = 8;
inline bool HistogramSnapshotPB::has_min() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HistogramSnapshotPB::set_has_min() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HistogramSnapshotPB::clear_has_min() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HistogramSnapshotPB::clear_min() {
  min_ = GOOGLE_ULONGLONG(0);
  clear_has_min();
}
inline ::google::protobuf::uint64 HistogramSnapshotPB::min() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.min)
  return min_;
}
inline void HistogramSnapshotPB::set_min(::google::protobuf::uint64 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.min)
}

// required double mean = 9;
inline bool HistogramSnapshotPB::has_mean() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HistogramSnapshotPB::set_has_mean() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HistogramSnapshotPB::clear_has_mean() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HistogramSnapshotPB::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline double HistogramSnapshotPB::mean() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.mean)
  return mean_;
}
inline void HistogramSnapshotPB::set_mean(double value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.mean)
}

// required uint64 percentile_75 = 10;
inline bool HistogramSnapshotPB::has_percentile_75() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HistogramSnapshotPB::set_has_percentile_75() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HistogramSnapshotPB::clear_has_percentile_75() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HistogramSnapshotPB::clear_percentile_75() {
  percentile_75_ = GOOGLE_ULONGLONG(0);
  clear_has_percentile_75();
}
inline ::google::protobuf::uint64 HistogramSnapshotPB::percentile_75() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.percentile_75)
  return percentile_75_;
}
inline void HistogramSnapshotPB::set_percentile_75(::google::protobuf::uint64 value) {
  set_has_percentile_75();
  percentile_75_ = value;
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.percentile_75)
}

// required uint64 percentile_95 = 11;
inline bool HistogramSnapshotPB::has_percentile_95() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HistogramSnapshotPB::set_has_percentile_95() {
  _has_bits_[0] |= 0x00001000u;
}
inline void HistogramSnapshotPB::clear_has_percentile_95() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void HistogramSnapshotPB::clear_percentile_95() {
  percentile_95_ = GOOGLE_ULONGLONG(0);
  clear_has_percentile_95();
}
inline ::google::protobuf::uint64 HistogramSnapshotPB::percentile_95() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.percentile_95)
  return percentile_95_;
}
inline void HistogramSnapshotPB::set_percentile_95(::google::protobuf::uint64 value) {
  set_has_percentile_95();
  percentile_95_ = value;
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.percentile_95)
}

// required uint64 percentile_99 = 12;
inline bool HistogramSnapshotPB::has_percentile_99() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void HistogramSnapshotPB::set_has_percentile_99() {
  _has_bits_[0] |= 0x00002000u;
}
inline void HistogramSnapshotPB::clear_has_percentile_99() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void HistogramSnapshotPB::clear_percentile_99() {
  percentile_99_ = GOOGLE_ULONGLONG(0);
  clear_has_percentile_99();
}
inline ::google::protobuf::uint64 HistogramSnapshotPB::percentile_99() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.percentile_99)
  return percentile_99_;
}
inline void HistogramSnapshotPB::set_percentile_99(::google::protobuf::uint64 value) {
  set_has_percentile_99();
  percentile_99_ = value;
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.percentile_99)
}

// required uint64 percentile_99_9 = 13;
inline bool HistogramSnapshotPB::has_percentile_99_9() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void HistogramSnapshotPB::set_has_percentile_99_9() {
  _has_bits_[0] |= 0x00004000u;
}
inline void HistogramSnapshotPB::clear_has_percentile_99_9() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void HistogramSnapshotPB::clear_percentile_99_9() {
  percentile_99_9_ = GOOGLE_ULONGLONG(0);
  clear_has_percentile_99_9();
}
inline ::google::protobuf::uint64 HistogramSnapshotPB::percentile_99_9() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.percentile_99_9)
  return percentile_99_9_;
}
inline void HistogramSnapshotPB::set_percentile_99_9(::google::protobuf::uint64 value) {
  set_has_percentile_99_9();
  percentile_99_9_ = value;
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.percentile_99_9)
}

// required uint64 percentile_99_99 = 14;
inline bool HistogramSnapshotPB::has_percentile_99_99() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void HistogramSnapshotPB::set_has_percentile_99_99() {
  _has_bits_[0] |= 0x00008000u;
}
inline void HistogramSnapshotPB::clear_has_percentile_99_99() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void HistogramSnapshotPB::clear_percentile_99_99() {
  percentile_99_99_ = GOOGLE_ULONGLONG(0);
  clear_has_percentile_99_99();
}
inline ::google::protobuf::uint64 HistogramSnapshotPB::percentile_99_99() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.percentile_99_99)
  return percentile_99_99_;
}
inline void HistogramSnapshotPB::set_percentile_99_99(::google::protobuf::uint64 value) {
  set_has_percentile_99_99();
  percentile_99_99_ = value;
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.percentile_99_99)
}

// required uint64 max = 15;
inline bool HistogramSnapshotPB::has_max() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void HistogramSnapshotPB::set_has_max() {
  _has_bits_[0] |= 0x00010000u;
}
inline void HistogramSnapshotPB::clear_has_max() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void HistogramSnapshotPB::clear_max() {
  max_ = GOOGLE_ULONGLONG(0);
  clear_has_max();
}
inline ::google::protobuf::uint64 HistogramSnapshotPB::max() const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.max)
  return max_;
}
inline void HistogramSnapshotPB::set_max(::google::protobuf::uint64 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.max)
}

// repeated uint64 values = 16 [packed = true];
inline int HistogramSnapshotPB::values_size() const {
  return values_.size();
}
inline void HistogramSnapshotPB::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::uint64 HistogramSnapshotPB::values(int index) const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.values)
  return values_.Get(index);
}
inline void HistogramSnapshotPB::set_values(int index, ::google::protobuf::uint64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.values)
}
inline void HistogramSnapshotPB::add_values(::google::protobuf::uint64 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:ant.HistogramSnapshotPB.values)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
HistogramSnapshotPB::values() const {
  // @@protoc_insertion_point(field_list:ant.HistogramSnapshotPB.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
HistogramSnapshotPB::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ant.HistogramSnapshotPB.values)
  return &values_;
}

// repeated uint64 counts = 17 [packed = true];
inline int HistogramSnapshotPB::counts_size() const {
  return counts_.size();
}
inline void HistogramSnapshotPB::clear_counts() {
  counts_.Clear();
}
inline ::google::protobuf::uint64 HistogramSnapshotPB::counts(int index) const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotPB.counts)
  return counts_.Get(index);
}
inline void HistogramSnapshotPB::set_counts(int index, ::google::protobuf::uint64 value) {
  counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:ant.HistogramSnapshotPB.counts)
}
inline void HistogramSnapshotPB::add_counts(::google::protobuf::uint64 value) {
  counts_.Add(value);
  // @@protoc_insertion_point(field_add:ant.HistogramSnapshotPB.counts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
HistogramSnapshotPB::counts() const {
  // @@protoc_insertion_point(field_list:ant.HistogramSnapshotPB.counts)
  return counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
HistogramSnapshotPB::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:ant.HistogramSnapshotPB.counts)
  return &counts_;
}

// -------------------------------------------------------------------

// HistogramSnapshotsListPB

// repeated .ant.HistogramSnapshotPB histograms = 1;
inline int HistogramSnapshotsListPB::histograms_size() const {
  return histograms_.size();
}
inline void HistogramSnapshotsListPB::clear_histograms() {
  histograms_.Clear();
}
inline const ::ant::HistogramSnapshotPB& HistogramSnapshotsListPB::histograms(int index) const {
  // @@protoc_insertion_point(field_get:ant.HistogramSnapshotsListPB.histograms)
  return histograms_.Get(index);
}
inline ::ant::HistogramSnapshotPB* HistogramSnapshotsListPB::mutable_histograms(int index) {
  // @@protoc_insertion_point(field_mutable:ant.HistogramSnapshotsListPB.histograms)
  return histograms_.Mutable(index);
}
inline ::ant::HistogramSnapshotPB* HistogramSnapshotsListPB::add_histograms() {
  // @@protoc_insertion_point(field_add:ant.HistogramSnapshotsListPB.histograms)
  return histograms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ant::HistogramSnapshotPB >&
HistogramSnapshotsListPB::histograms() const {
  // @@protoc_insertion_point(field_list:ant.HistogramSnapshotsListPB.histograms)
  return histograms_;
}
inline ::google::protobuf::RepeatedPtrField< ::ant::HistogramSnapshotPB >*
HistogramSnapshotsListPB::mutable_histograms() {
  // @@protoc_insertion_point(field_mutable_list:ant.HistogramSnapshotsListPB.histograms)
  return &histograms_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ant

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ant_2futil_2fhistogram_2eproto__INCLUDED
