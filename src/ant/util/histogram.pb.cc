// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: histogram.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "histogram.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ant {

namespace {

const ::google::protobuf::Descriptor* HistogramSnapshotPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistogramSnapshotPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistogramSnapshotsListPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistogramSnapshotsListPB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_histogram_2eproto() {
  protobuf_AddDesc_histogram_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "histogram.proto");
  GOOGLE_CHECK(file != NULL);
  HistogramSnapshotPB_descriptor_ = file->message_type(0);
  static const int HistogramSnapshotPB_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, max_trackable_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, num_significant_digits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, total_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, percentile_75_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, percentile_95_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, percentile_99_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, percentile_99_9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, percentile_99_99_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, counts_),
  };
  HistogramSnapshotPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistogramSnapshotPB_descriptor_,
      HistogramSnapshotPB::default_instance_,
      HistogramSnapshotPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistogramSnapshotPB));
  HistogramSnapshotsListPB_descriptor_ = file->message_type(1);
  static const int HistogramSnapshotsListPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotsListPB, histograms_),
  };
  HistogramSnapshotsListPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistogramSnapshotsListPB_descriptor_,
      HistogramSnapshotsListPB::default_instance_,
      HistogramSnapshotsListPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotsListPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistogramSnapshotsListPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistogramSnapshotsListPB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_histogram_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistogramSnapshotPB_descriptor_, &HistogramSnapshotPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistogramSnapshotsListPB_descriptor_, &HistogramSnapshotsListPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_histogram_2eproto() {
  delete HistogramSnapshotPB::default_instance_;
  delete HistogramSnapshotPB_reflection_;
  delete HistogramSnapshotsListPB::default_instance_;
  delete HistogramSnapshotsListPB_reflection_;
}

void protobuf_AddDesc_histogram_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017histogram.proto\022\003ant\"\220\003\n\023HistogramSnap"
    "shotPB\022\014\n\004type\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\023\n\013de"
    "scription\030\003 \001(\t\022\014\n\004unit\030\004 \002(\t\022\r\n\005label\030\023"
    " \001(\t\022\033\n\023max_trackable_value\030\005 \002(\004\022\036\n\026num"
    "_significant_digits\030\006 \002(\005\022\023\n\013total_count"
    "\030\007 \002(\004\022\021\n\ttotal_sum\030\022 \001(\004\022\013\n\003min\030\010 \002(\004\022\014"
    "\n\004mean\030\t \002(\001\022\025\n\rpercentile_75\030\n \002(\004\022\025\n\rp"
    "ercentile_95\030\013 \002(\004\022\025\n\rpercentile_99\030\014 \002("
    "\004\022\027\n\017percentile_99_9\030\r \002(\004\022\030\n\020percentile"
    "_99_99\030\016 \002(\004\022\013\n\003max\030\017 \002(\004\022\022\n\006values\030\020 \003("
    "\004B\002\020\001\022\022\n\006counts\030\021 \003(\004B\002\020\001\"H\n\030HistogramSn"
    "apshotsListPB\022,\n\nhistograms\030\001 \003(\0132\030.ant."
    "HistogramSnapshotPB", 499);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "histogram.proto", &protobuf_RegisterTypes);
  HistogramSnapshotPB::default_instance_ = new HistogramSnapshotPB();
  HistogramSnapshotsListPB::default_instance_ = new HistogramSnapshotsListPB();
  HistogramSnapshotPB::default_instance_->InitAsDefaultInstance();
  HistogramSnapshotsListPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_histogram_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_histogram_2eproto {
  StaticDescriptorInitializer_histogram_2eproto() {
    protobuf_AddDesc_histogram_2eproto();
  }
} static_descriptor_initializer_histogram_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HistogramSnapshotPB::kTypeFieldNumber;
const int HistogramSnapshotPB::kNameFieldNumber;
const int HistogramSnapshotPB::kDescriptionFieldNumber;
const int HistogramSnapshotPB::kUnitFieldNumber;
const int HistogramSnapshotPB::kLabelFieldNumber;
const int HistogramSnapshotPB::kMaxTrackableValueFieldNumber;
const int HistogramSnapshotPB::kNumSignificantDigitsFieldNumber;
const int HistogramSnapshotPB::kTotalCountFieldNumber;
const int HistogramSnapshotPB::kTotalSumFieldNumber;
const int HistogramSnapshotPB::kMinFieldNumber;
const int HistogramSnapshotPB::kMeanFieldNumber;
const int HistogramSnapshotPB::kPercentile75FieldNumber;
const int HistogramSnapshotPB::kPercentile95FieldNumber;
const int HistogramSnapshotPB::kPercentile99FieldNumber;
const int HistogramSnapshotPB::kPercentile999FieldNumber;
const int HistogramSnapshotPB::kPercentile9999FieldNumber;
const int HistogramSnapshotPB::kMaxFieldNumber;
const int HistogramSnapshotPB::kValuesFieldNumber;
const int HistogramSnapshotPB::kCountsFieldNumber;
#endif  // !_MSC_VER

HistogramSnapshotPB::HistogramSnapshotPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.HistogramSnapshotPB)
}

void HistogramSnapshotPB::InitAsDefaultInstance() {
}

HistogramSnapshotPB::HistogramSnapshotPB(const HistogramSnapshotPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.HistogramSnapshotPB)
}

void HistogramSnapshotPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_trackable_value_ = GOOGLE_ULONGLONG(0);
  num_significant_digits_ = 0;
  total_count_ = GOOGLE_ULONGLONG(0);
  total_sum_ = GOOGLE_ULONGLONG(0);
  min_ = GOOGLE_ULONGLONG(0);
  mean_ = 0;
  percentile_75_ = GOOGLE_ULONGLONG(0);
  percentile_95_ = GOOGLE_ULONGLONG(0);
  percentile_99_ = GOOGLE_ULONGLONG(0);
  percentile_99_9_ = GOOGLE_ULONGLONG(0);
  percentile_99_99_ = GOOGLE_ULONGLONG(0);
  max_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistogramSnapshotPB::~HistogramSnapshotPB() {
  // @@protoc_insertion_point(destructor:ant.HistogramSnapshotPB)
  SharedDtor();
}

void HistogramSnapshotPB::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (unit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unit_;
  }
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void HistogramSnapshotPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistogramSnapshotPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistogramSnapshotPB_descriptor_;
}

const HistogramSnapshotPB& HistogramSnapshotPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_histogram_2eproto();
  return *default_instance_;
}

HistogramSnapshotPB* HistogramSnapshotPB::default_instance_ = NULL;

HistogramSnapshotPB* HistogramSnapshotPB::New() const {
  return new HistogramSnapshotPB;
}

void HistogramSnapshotPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HistogramSnapshotPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(max_trackable_value_, total_count_);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_unit()) {
      if (unit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unit_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
    num_significant_digits_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(total_sum_, percentile_99_99_);
  }
  max_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  values_.Clear();
  counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistogramSnapshotPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.HistogramSnapshotPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_unit;
        break;
      }

      // required string unit = 4;
      case 4: {
        if (tag == 34) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unit");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_trackable_value;
        break;
      }

      // required uint64 max_trackable_value = 5;
      case 5: {
        if (tag == 40) {
         parse_max_trackable_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_trackable_value_)));
          set_has_max_trackable_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_significant_digits;
        break;
      }

      // required int32 num_significant_digits = 6;
      case 6: {
        if (tag == 48) {
         parse_num_significant_digits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_significant_digits_)));
          set_has_num_significant_digits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_total_count;
        break;
      }

      // required uint64 total_count = 7;
      case 7: {
        if (tag == 56) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_min;
        break;
      }

      // required uint64 min = 8;
      case 8: {
        if (tag == 64) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_mean;
        break;
      }

      // required double mean = 9;
      case 9: {
        if (tag == 73) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_percentile_75;
        break;
      }

      // required uint64 percentile_75 = 10;
      case 10: {
        if (tag == 80) {
         parse_percentile_75:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &percentile_75_)));
          set_has_percentile_75();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_percentile_95;
        break;
      }

      // required uint64 percentile_95 = 11;
      case 11: {
        if (tag == 88) {
         parse_percentile_95:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &percentile_95_)));
          set_has_percentile_95();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_percentile_99;
        break;
      }

      // required uint64 percentile_99 = 12;
      case 12: {
        if (tag == 96) {
         parse_percentile_99:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &percentile_99_)));
          set_has_percentile_99();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_percentile_99_9;
        break;
      }

      // required uint64 percentile_99_9 = 13;
      case 13: {
        if (tag == 104) {
         parse_percentile_99_9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &percentile_99_9_)));
          set_has_percentile_99_9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_percentile_99_99;
        break;
      }

      // required uint64 percentile_99_99 = 14;
      case 14: {
        if (tag == 112) {
         parse_percentile_99_99:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &percentile_99_99_)));
          set_has_percentile_99_99();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_max;
        break;
      }

      // required uint64 max = 15;
      case 15: {
        if (tag == 120) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_values;
        break;
      }

      // repeated uint64 values = 16 [packed = true];
      case 16: {
        if (tag == 130) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_values())));
        } else if (tag == 128) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 130, input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_counts;
        break;
      }

      // repeated uint64 counts = 17 [packed = true];
      case 17: {
        if (tag == 138) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_counts())));
        } else if (tag == 136) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 138, input, this->mutable_counts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_total_sum;
        break;
      }

      // optional uint64 total_sum = 18;
      case 18: {
        if (tag == 144) {
         parse_total_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_sum_)));
          set_has_total_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_label;
        break;
      }

      // optional string label = 19;
      case 19: {
        if (tag == 154) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.HistogramSnapshotPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.HistogramSnapshotPB)
  return false;
#undef DO_
}

void HistogramSnapshotPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.HistogramSnapshotPB)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // required string unit = 4;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->unit(), output);
  }

  // required uint64 max_trackable_value = 5;
  if (has_max_trackable_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->max_trackable_value(), output);
  }

  // required int32 num_significant_digits = 6;
  if (has_num_significant_digits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_significant_digits(), output);
  }

  // required uint64 total_count = 7;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->total_count(), output);
  }

  // required uint64 min = 8;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->min(), output);
  }

  // required double mean = 9;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->mean(), output);
  }

  // required uint64 percentile_75 = 10;
  if (has_percentile_75()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->percentile_75(), output);
  }

  // required uint64 percentile_95 = 11;
  if (has_percentile_95()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->percentile_95(), output);
  }

  // required uint64 percentile_99 = 12;
  if (has_percentile_99()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->percentile_99(), output);
  }

  // required uint64 percentile_99_9 = 13;
  if (has_percentile_99_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->percentile_99_9(), output);
  }

  // required uint64 percentile_99_99 = 14;
  if (has_percentile_99_99()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->percentile_99_99(), output);
  }

  // required uint64 max = 15;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->max(), output);
  }

  // repeated uint64 values = 16 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->values(i), output);
  }

  // repeated uint64 counts = 17 [packed = true];
  if (this->counts_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(17, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_counts_cached_byte_size_);
  }
  for (int i = 0; i < this->counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->counts(i), output);
  }

  // optional uint64 total_sum = 18;
  if (has_total_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->total_sum(), output);
  }

  // optional string label = 19;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.HistogramSnapshotPB)
}

::google::protobuf::uint8* HistogramSnapshotPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.HistogramSnapshotPB)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // required string unit = 4;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unit(), target);
  }

  // required uint64 max_trackable_value = 5;
  if (has_max_trackable_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->max_trackable_value(), target);
  }

  // required int32 num_significant_digits = 6;
  if (has_num_significant_digits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_significant_digits(), target);
  }

  // required uint64 total_count = 7;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->total_count(), target);
  }

  // required uint64 min = 8;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->min(), target);
  }

  // required double mean = 9;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->mean(), target);
  }

  // required uint64 percentile_75 = 10;
  if (has_percentile_75()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->percentile_75(), target);
  }

  // required uint64 percentile_95 = 11;
  if (has_percentile_95()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->percentile_95(), target);
  }

  // required uint64 percentile_99 = 12;
  if (has_percentile_99()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->percentile_99(), target);
  }

  // required uint64 percentile_99_9 = 13;
  if (has_percentile_99_9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->percentile_99_9(), target);
  }

  // required uint64 percentile_99_99 = 14;
  if (has_percentile_99_99()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->percentile_99_99(), target);
  }

  // required uint64 max = 15;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->max(), target);
  }

  // repeated uint64 values = 16 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->values(i), target);
  }

  // repeated uint64 counts = 17 [packed = true];
  if (this->counts_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      17,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _counts_cached_byte_size_, target);
  }
  for (int i = 0; i < this->counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->counts(i), target);
  }

  // optional uint64 total_sum = 18;
  if (has_total_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->total_sum(), target);
  }

  // optional string label = 19;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.HistogramSnapshotPB)
  return target;
}

int HistogramSnapshotPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required string unit = 4;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }

    // optional string label = 19;
    if (has_label()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // required uint64 max_trackable_value = 5;
    if (has_max_trackable_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_trackable_value());
    }

    // required int32 num_significant_digits = 6;
    if (has_num_significant_digits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_significant_digits());
    }

    // required uint64 total_count = 7;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 total_sum = 18;
    if (has_total_sum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_sum());
    }

    // required uint64 min = 8;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min());
    }

    // required double mean = 9;
    if (has_mean()) {
      total_size += 1 + 8;
    }

    // required uint64 percentile_75 = 10;
    if (has_percentile_75()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->percentile_75());
    }

    // required uint64 percentile_95 = 11;
    if (has_percentile_95()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->percentile_95());
    }

    // required uint64 percentile_99 = 12;
    if (has_percentile_99()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->percentile_99());
    }

    // required uint64 percentile_99_9 = 13;
    if (has_percentile_99_9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->percentile_99_9());
    }

    // required uint64 percentile_99_99 = 14;
    if (has_percentile_99_99()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->percentile_99_99());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint64 max = 15;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max());
    }

  }
  // repeated uint64 values = 16 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->values(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _values_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 counts = 17 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->counts(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _counts_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistogramSnapshotPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistogramSnapshotPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistogramSnapshotPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistogramSnapshotPB::MergeFrom(const HistogramSnapshotPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  counts_.MergeFrom(from.counts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_max_trackable_value()) {
      set_max_trackable_value(from.max_trackable_value());
    }
    if (from.has_num_significant_digits()) {
      set_num_significant_digits(from.num_significant_digits());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_sum()) {
      set_total_sum(from.total_sum());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_percentile_75()) {
      set_percentile_75(from.percentile_75());
    }
    if (from.has_percentile_95()) {
      set_percentile_95(from.percentile_95());
    }
    if (from.has_percentile_99()) {
      set_percentile_99(from.percentile_99());
    }
    if (from.has_percentile_99_9()) {
      set_percentile_99_9(from.percentile_99_9());
    }
    if (from.has_percentile_99_99()) {
      set_percentile_99_99(from.percentile_99_99());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistogramSnapshotPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistogramSnapshotPB::CopyFrom(const HistogramSnapshotPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramSnapshotPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001feeb) != 0x0001feeb) return false;

  return true;
}

void HistogramSnapshotPB::Swap(HistogramSnapshotPB* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(unit_, other->unit_);
    std::swap(label_, other->label_);
    std::swap(max_trackable_value_, other->max_trackable_value_);
    std::swap(num_significant_digits_, other->num_significant_digits_);
    std::swap(total_count_, other->total_count_);
    std::swap(total_sum_, other->total_sum_);
    std::swap(min_, other->min_);
    std::swap(mean_, other->mean_);
    std::swap(percentile_75_, other->percentile_75_);
    std::swap(percentile_95_, other->percentile_95_);
    std::swap(percentile_99_, other->percentile_99_);
    std::swap(percentile_99_9_, other->percentile_99_9_);
    std::swap(percentile_99_99_, other->percentile_99_99_);
    std::swap(max_, other->max_);
    values_.Swap(&other->values_);
    counts_.Swap(&other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistogramSnapshotPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistogramSnapshotPB_descriptor_;
  metadata.reflection = HistogramSnapshotPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistogramSnapshotsListPB::kHistogramsFieldNumber;
#endif  // !_MSC_VER

HistogramSnapshotsListPB::HistogramSnapshotsListPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.HistogramSnapshotsListPB)
}

void HistogramSnapshotsListPB::InitAsDefaultInstance() {
}

HistogramSnapshotsListPB::HistogramSnapshotsListPB(const HistogramSnapshotsListPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.HistogramSnapshotsListPB)
}

void HistogramSnapshotsListPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistogramSnapshotsListPB::~HistogramSnapshotsListPB() {
  // @@protoc_insertion_point(destructor:ant.HistogramSnapshotsListPB)
  SharedDtor();
}

void HistogramSnapshotsListPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistogramSnapshotsListPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistogramSnapshotsListPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistogramSnapshotsListPB_descriptor_;
}

const HistogramSnapshotsListPB& HistogramSnapshotsListPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_histogram_2eproto();
  return *default_instance_;
}

HistogramSnapshotsListPB* HistogramSnapshotsListPB::default_instance_ = NULL;

HistogramSnapshotsListPB* HistogramSnapshotsListPB::New() const {
  return new HistogramSnapshotsListPB;
}

void HistogramSnapshotsListPB::Clear() {
  histograms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistogramSnapshotsListPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.HistogramSnapshotsListPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ant.HistogramSnapshotPB histograms = 1;
      case 1: {
        if (tag == 10) {
         parse_histograms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_histograms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_histograms;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.HistogramSnapshotsListPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.HistogramSnapshotsListPB)
  return false;
#undef DO_
}

void HistogramSnapshotsListPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.HistogramSnapshotsListPB)
  // repeated .ant.HistogramSnapshotPB histograms = 1;
  for (int i = 0; i < this->histograms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->histograms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.HistogramSnapshotsListPB)
}

::google::protobuf::uint8* HistogramSnapshotsListPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.HistogramSnapshotsListPB)
  // repeated .ant.HistogramSnapshotPB histograms = 1;
  for (int i = 0; i < this->histograms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->histograms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.HistogramSnapshotsListPB)
  return target;
}

int HistogramSnapshotsListPB::ByteSize() const {
  int total_size = 0;

  // repeated .ant.HistogramSnapshotPB histograms = 1;
  total_size += 1 * this->histograms_size();
  for (int i = 0; i < this->histograms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->histograms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistogramSnapshotsListPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistogramSnapshotsListPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistogramSnapshotsListPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistogramSnapshotsListPB::MergeFrom(const HistogramSnapshotsListPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  histograms_.MergeFrom(from.histograms_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistogramSnapshotsListPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistogramSnapshotsListPB::CopyFrom(const HistogramSnapshotsListPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramSnapshotsListPB::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->histograms())) return false;
  return true;
}

void HistogramSnapshotsListPB::Swap(HistogramSnapshotsListPB* other) {
  if (other != this) {
    histograms_.Swap(&other->histograms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistogramSnapshotsListPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistogramSnapshotsListPB_descriptor_;
  metadata.reflection = HistogramSnapshotsListPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ant

// @@protoc_insertion_point(global_scope)
