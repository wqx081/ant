// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_introspection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc_introspection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ant {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* RpcCallInProgressPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcCallInProgressPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcConnectionPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcConnectionPB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcConnectionPB_StateType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DumpRunningRpcsRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DumpRunningRpcsRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* DumpRunningRpcsResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DumpRunningRpcsResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TraceMetricPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TraceMetricPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpczSamplePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpczSamplePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpczMethodPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpczMethodPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* DumpRpczStoreRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DumpRpczStoreRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* DumpRpczStoreResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DumpRpczStoreResponsePB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_5fintrospection_2eproto() {
  protobuf_AddDesc_rpc_5fintrospection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc_introspection.proto");
  GOOGLE_CHECK(file != NULL);
  RpcCallInProgressPB_descriptor_ = file->message_type(0);
  static const int RpcCallInProgressPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallInProgressPB, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallInProgressPB, trace_buffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallInProgressPB, micros_elapsed_),
  };
  RpcCallInProgressPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcCallInProgressPB_descriptor_,
      RpcCallInProgressPB::default_instance_,
      RpcCallInProgressPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallInProgressPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcCallInProgressPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcCallInProgressPB));
  RpcConnectionPB_descriptor_ = file->message_type(1);
  static const int RpcConnectionPB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcConnectionPB, remote_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcConnectionPB, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcConnectionPB, remote_user_credentials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcConnectionPB, calls_in_flight_),
  };
  RpcConnectionPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcConnectionPB_descriptor_,
      RpcConnectionPB::default_instance_,
      RpcConnectionPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcConnectionPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcConnectionPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcConnectionPB));
  RpcConnectionPB_StateType_descriptor_ = RpcConnectionPB_descriptor_->enum_type(0);
  DumpRunningRpcsRequestPB_descriptor_ = file->message_type(2);
  static const int DumpRunningRpcsRequestPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRunningRpcsRequestPB, include_traces_),
  };
  DumpRunningRpcsRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DumpRunningRpcsRequestPB_descriptor_,
      DumpRunningRpcsRequestPB::default_instance_,
      DumpRunningRpcsRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRunningRpcsRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRunningRpcsRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DumpRunningRpcsRequestPB));
  DumpRunningRpcsResponsePB_descriptor_ = file->message_type(3);
  static const int DumpRunningRpcsResponsePB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRunningRpcsResponsePB, inbound_connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRunningRpcsResponsePB, outbound_connections_),
  };
  DumpRunningRpcsResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DumpRunningRpcsResponsePB_descriptor_,
      DumpRunningRpcsResponsePB::default_instance_,
      DumpRunningRpcsResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRunningRpcsResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRunningRpcsResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DumpRunningRpcsResponsePB));
  TraceMetricPB_descriptor_ = file->message_type(4);
  static const int TraceMetricPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceMetricPB, child_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceMetricPB, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceMetricPB, value_),
  };
  TraceMetricPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TraceMetricPB_descriptor_,
      TraceMetricPB::default_instance_,
      TraceMetricPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceMetricPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceMetricPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TraceMetricPB));
  RpczSamplePB_descriptor_ = file->message_type(5);
  static const int RpczSamplePB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSamplePB, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSamplePB, trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSamplePB, duration_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSamplePB, metrics_),
  };
  RpczSamplePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpczSamplePB_descriptor_,
      RpczSamplePB::default_instance_,
      RpczSamplePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSamplePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczSamplePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpczSamplePB));
  RpczMethodPB_descriptor_ = file->message_type(6);
  static const int RpczMethodPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczMethodPB, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczMethodPB, samples_),
  };
  RpczMethodPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpczMethodPB_descriptor_,
      RpczMethodPB::default_instance_,
      RpczMethodPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczMethodPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpczMethodPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpczMethodPB));
  DumpRpczStoreRequestPB_descriptor_ = file->message_type(7);
  static const int DumpRpczStoreRequestPB_offsets_[1] = {
  };
  DumpRpczStoreRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DumpRpczStoreRequestPB_descriptor_,
      DumpRpczStoreRequestPB::default_instance_,
      DumpRpczStoreRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRpczStoreRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRpczStoreRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DumpRpczStoreRequestPB));
  DumpRpczStoreResponsePB_descriptor_ = file->message_type(8);
  static const int DumpRpczStoreResponsePB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRpczStoreResponsePB, methods_),
  };
  DumpRpczStoreResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DumpRpczStoreResponsePB_descriptor_,
      DumpRpczStoreResponsePB::default_instance_,
      DumpRpczStoreResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRpczStoreResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRpczStoreResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DumpRpczStoreResponsePB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_5fintrospection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcCallInProgressPB_descriptor_, &RpcCallInProgressPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcConnectionPB_descriptor_, &RpcConnectionPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DumpRunningRpcsRequestPB_descriptor_, &DumpRunningRpcsRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DumpRunningRpcsResponsePB_descriptor_, &DumpRunningRpcsResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TraceMetricPB_descriptor_, &TraceMetricPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpczSamplePB_descriptor_, &RpczSamplePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpczMethodPB_descriptor_, &RpczMethodPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DumpRpczStoreRequestPB_descriptor_, &DumpRpczStoreRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DumpRpczStoreResponsePB_descriptor_, &DumpRpczStoreResponsePB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_5fintrospection_2eproto() {
  delete RpcCallInProgressPB::default_instance_;
  delete RpcCallInProgressPB_reflection_;
  delete RpcConnectionPB::default_instance_;
  delete RpcConnectionPB_reflection_;
  delete DumpRunningRpcsRequestPB::default_instance_;
  delete DumpRunningRpcsRequestPB_reflection_;
  delete DumpRunningRpcsResponsePB::default_instance_;
  delete DumpRunningRpcsResponsePB_reflection_;
  delete TraceMetricPB::default_instance_;
  delete TraceMetricPB_reflection_;
  delete RpczSamplePB::default_instance_;
  delete RpczSamplePB_reflection_;
  delete RpczMethodPB::default_instance_;
  delete RpczMethodPB_reflection_;
  delete DumpRpczStoreRequestPB::default_instance_;
  delete DumpRpczStoreRequestPB_reflection_;
  delete DumpRpczStoreResponsePB::default_instance_;
  delete DumpRpczStoreResponsePB_reflection_;
}

void protobuf_AddDesc_rpc_5fintrospection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ant::rpc::protobuf_AddDesc_rpc_5fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027rpc_introspection.proto\022\007ant.rpc\032\020rpc_"
    "header.proto\"k\n\023RpcCallInProgressPB\022&\n\006h"
    "eader\030\001 \002(\0132\026.ant.rpc.RequestHeader\022\024\n\014t"
    "race_buffer\030\002 \001(\t\022\026\n\016micros_elapsed\030\003 \001("
    "\004\"\345\001\n\017RpcConnectionPB\022\021\n\tremote_ip\030\001 \002(\t"
    "\0221\n\005state\030\002 \002(\0162\".ant.rpc.RpcConnectionP"
    "B.StateType\022\037\n\027remote_user_credentials\030\003"
    " \001(\t\0225\n\017calls_in_flight\030\004 \003(\0132\034.ant.rpc."
    "RpcCallInProgressPB\"4\n\tStateType\022\014\n\007UNKN"
    "OWN\020\347\007\022\017\n\013NEGOTIATING\020\000\022\010\n\004OPEN\020\001\"9\n\030Dum"
    "pRunningRpcsRequestPB\022\035\n\016include_traces\030"
    "\001 \001(\010:\005false\"\212\001\n\031DumpRunningRpcsResponse"
    "PB\0225\n\023inbound_connections\030\001 \003(\0132\030.ant.rp"
    "c.RpcConnectionPB\0226\n\024outbound_connection"
    "s\030\002 \003(\0132\030.ant.rpc.RpcConnectionPB\"\?\n\rTra"
    "ceMetricPB\022\022\n\nchild_path\030\001 \001(\t\022\013\n\003key\030\002 "
    "\001(\t\022\r\n\005value\030\003 \001(\003\"\203\001\n\014RpczSamplePB\022&\n\006h"
    "eader\030\001 \001(\0132\026.ant.rpc.RequestHeader\022\r\n\005t"
    "race\030\002 \001(\t\022\023\n\013duration_ms\030\003 \001(\005\022\'\n\007metri"
    "cs\030\004 \003(\0132\026.ant.rpc.TraceMetricPB\"K\n\014Rpcz"
    "MethodPB\022\023\n\013method_name\030\001 \002(\t\022&\n\007samples"
    "\030\002 \003(\0132\025.ant.rpc.RpczSamplePB\"\030\n\026DumpRpc"
    "zStoreRequestPB\"A\n\027DumpRpczStoreResponse"
    "PB\022&\n\007methods\030\001 \003(\0132\025.ant.rpc.RpczMethod"
    "PB", 962);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc_introspection.proto", &protobuf_RegisterTypes);
  RpcCallInProgressPB::default_instance_ = new RpcCallInProgressPB();
  RpcConnectionPB::default_instance_ = new RpcConnectionPB();
  DumpRunningRpcsRequestPB::default_instance_ = new DumpRunningRpcsRequestPB();
  DumpRunningRpcsResponsePB::default_instance_ = new DumpRunningRpcsResponsePB();
  TraceMetricPB::default_instance_ = new TraceMetricPB();
  RpczSamplePB::default_instance_ = new RpczSamplePB();
  RpczMethodPB::default_instance_ = new RpczMethodPB();
  DumpRpczStoreRequestPB::default_instance_ = new DumpRpczStoreRequestPB();
  DumpRpczStoreResponsePB::default_instance_ = new DumpRpczStoreResponsePB();
  RpcCallInProgressPB::default_instance_->InitAsDefaultInstance();
  RpcConnectionPB::default_instance_->InitAsDefaultInstance();
  DumpRunningRpcsRequestPB::default_instance_->InitAsDefaultInstance();
  DumpRunningRpcsResponsePB::default_instance_->InitAsDefaultInstance();
  TraceMetricPB::default_instance_->InitAsDefaultInstance();
  RpczSamplePB::default_instance_->InitAsDefaultInstance();
  RpczMethodPB::default_instance_->InitAsDefaultInstance();
  DumpRpczStoreRequestPB::default_instance_->InitAsDefaultInstance();
  DumpRpczStoreResponsePB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_5fintrospection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_5fintrospection_2eproto {
  StaticDescriptorInitializer_rpc_5fintrospection_2eproto() {
    protobuf_AddDesc_rpc_5fintrospection_2eproto();
  }
} static_descriptor_initializer_rpc_5fintrospection_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RpcCallInProgressPB::kHeaderFieldNumber;
const int RpcCallInProgressPB::kTraceBufferFieldNumber;
const int RpcCallInProgressPB::kMicrosElapsedFieldNumber;
#endif  // !_MSC_VER

RpcCallInProgressPB::RpcCallInProgressPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.RpcCallInProgressPB)
}

void RpcCallInProgressPB::InitAsDefaultInstance() {
  header_ = const_cast< ::ant::rpc::RequestHeader*>(&::ant::rpc::RequestHeader::default_instance());
}

RpcCallInProgressPB::RpcCallInProgressPB(const RpcCallInProgressPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.RpcCallInProgressPB)
}

void RpcCallInProgressPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  trace_buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  micros_elapsed_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcCallInProgressPB::~RpcCallInProgressPB() {
  // @@protoc_insertion_point(destructor:ant.rpc.RpcCallInProgressPB)
  SharedDtor();
}

void RpcCallInProgressPB::SharedDtor() {
  if (trace_buffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trace_buffer_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void RpcCallInProgressPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcCallInProgressPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcCallInProgressPB_descriptor_;
}

const RpcCallInProgressPB& RpcCallInProgressPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fintrospection_2eproto();
  return *default_instance_;
}

RpcCallInProgressPB* RpcCallInProgressPB::default_instance_ = NULL;

RpcCallInProgressPB* RpcCallInProgressPB::New() const {
  return new RpcCallInProgressPB;
}

void RpcCallInProgressPB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_header()) {
      if (header_ != NULL) header_->::ant::rpc::RequestHeader::Clear();
    }
    if (has_trace_buffer()) {
      if (trace_buffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trace_buffer_->clear();
      }
    }
    micros_elapsed_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcCallInProgressPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.RpcCallInProgressPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ant.rpc.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trace_buffer;
        break;
      }

      // optional string trace_buffer = 2;
      case 2: {
        if (tag == 18) {
         parse_trace_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_buffer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trace_buffer().data(), this->trace_buffer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trace_buffer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_micros_elapsed;
        break;
      }

      // optional uint64 micros_elapsed = 3;
      case 3: {
        if (tag == 24) {
         parse_micros_elapsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &micros_elapsed_)));
          set_has_micros_elapsed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.RpcCallInProgressPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.RpcCallInProgressPB)
  return false;
#undef DO_
}

void RpcCallInProgressPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.RpcCallInProgressPB)
  // required .ant.rpc.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string trace_buffer = 2;
  if (has_trace_buffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trace_buffer().data(), this->trace_buffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trace_buffer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trace_buffer(), output);
  }

  // optional uint64 micros_elapsed = 3;
  if (has_micros_elapsed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->micros_elapsed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.RpcCallInProgressPB)
}

::google::protobuf::uint8* RpcCallInProgressPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.RpcCallInProgressPB)
  // required .ant.rpc.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string trace_buffer = 2;
  if (has_trace_buffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trace_buffer().data(), this->trace_buffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trace_buffer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trace_buffer(), target);
  }

  // optional uint64 micros_elapsed = 3;
  if (has_micros_elapsed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->micros_elapsed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.RpcCallInProgressPB)
  return target;
}

int RpcCallInProgressPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ant.rpc.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string trace_buffer = 2;
    if (has_trace_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trace_buffer());
    }

    // optional uint64 micros_elapsed = 3;
    if (has_micros_elapsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->micros_elapsed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcCallInProgressPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcCallInProgressPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcCallInProgressPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcCallInProgressPB::MergeFrom(const RpcCallInProgressPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ant::rpc::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_trace_buffer()) {
      set_trace_buffer(from.trace_buffer());
    }
    if (from.has_micros_elapsed()) {
      set_micros_elapsed(from.micros_elapsed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcCallInProgressPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcCallInProgressPB::CopyFrom(const RpcCallInProgressPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcCallInProgressPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void RpcCallInProgressPB::Swap(RpcCallInProgressPB* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(trace_buffer_, other->trace_buffer_);
    std::swap(micros_elapsed_, other->micros_elapsed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcCallInProgressPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcCallInProgressPB_descriptor_;
  metadata.reflection = RpcCallInProgressPB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RpcConnectionPB_StateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcConnectionPB_StateType_descriptor_;
}
bool RpcConnectionPB_StateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 999:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RpcConnectionPB_StateType RpcConnectionPB::UNKNOWN;
const RpcConnectionPB_StateType RpcConnectionPB::NEGOTIATING;
const RpcConnectionPB_StateType RpcConnectionPB::OPEN;
const RpcConnectionPB_StateType RpcConnectionPB::StateType_MIN;
const RpcConnectionPB_StateType RpcConnectionPB::StateType_MAX;
const int RpcConnectionPB::StateType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RpcConnectionPB::kRemoteIpFieldNumber;
const int RpcConnectionPB::kStateFieldNumber;
const int RpcConnectionPB::kRemoteUserCredentialsFieldNumber;
const int RpcConnectionPB::kCallsInFlightFieldNumber;
#endif  // !_MSC_VER

RpcConnectionPB::RpcConnectionPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.RpcConnectionPB)
}

void RpcConnectionPB::InitAsDefaultInstance() {
}

RpcConnectionPB::RpcConnectionPB(const RpcConnectionPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.RpcConnectionPB)
}

void RpcConnectionPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  remote_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 999;
  remote_user_credentials_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcConnectionPB::~RpcConnectionPB() {
  // @@protoc_insertion_point(destructor:ant.rpc.RpcConnectionPB)
  SharedDtor();
}

void RpcConnectionPB::SharedDtor() {
  if (remote_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remote_ip_;
  }
  if (remote_user_credentials_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remote_user_credentials_;
  }
  if (this != default_instance_) {
  }
}

void RpcConnectionPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcConnectionPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcConnectionPB_descriptor_;
}

const RpcConnectionPB& RpcConnectionPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fintrospection_2eproto();
  return *default_instance_;
}

RpcConnectionPB* RpcConnectionPB::default_instance_ = NULL;

RpcConnectionPB* RpcConnectionPB::New() const {
  return new RpcConnectionPB;
}

void RpcConnectionPB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_remote_ip()) {
      if (remote_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remote_ip_->clear();
      }
    }
    state_ = 999;
    if (has_remote_user_credentials()) {
      if (remote_user_credentials_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remote_user_credentials_->clear();
      }
    }
  }
  calls_in_flight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcConnectionPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.RpcConnectionPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string remote_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remote_ip().data(), this->remote_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remote_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .ant.rpc.RpcConnectionPB.StateType state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ant::rpc::RpcConnectionPB_StateType_IsValid(value)) {
            set_state(static_cast< ::ant::rpc::RpcConnectionPB_StateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remote_user_credentials;
        break;
      }

      // optional string remote_user_credentials = 3;
      case 3: {
        if (tag == 26) {
         parse_remote_user_credentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_user_credentials()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remote_user_credentials().data(), this->remote_user_credentials().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remote_user_credentials");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_calls_in_flight;
        break;
      }

      // repeated .ant.rpc.RpcCallInProgressPB calls_in_flight = 4;
      case 4: {
        if (tag == 34) {
         parse_calls_in_flight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calls_in_flight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_calls_in_flight;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.RpcConnectionPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.RpcConnectionPB)
  return false;
#undef DO_
}

void RpcConnectionPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.RpcConnectionPB)
  // required string remote_ip = 1;
  if (has_remote_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remote_ip().data(), this->remote_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remote_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->remote_ip(), output);
  }

  // required .ant.rpc.RpcConnectionPB.StateType state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional string remote_user_credentials = 3;
  if (has_remote_user_credentials()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remote_user_credentials().data(), this->remote_user_credentials().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remote_user_credentials");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remote_user_credentials(), output);
  }

  // repeated .ant.rpc.RpcCallInProgressPB calls_in_flight = 4;
  for (int i = 0; i < this->calls_in_flight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->calls_in_flight(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.RpcConnectionPB)
}

::google::protobuf::uint8* RpcConnectionPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.RpcConnectionPB)
  // required string remote_ip = 1;
  if (has_remote_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remote_ip().data(), this->remote_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remote_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->remote_ip(), target);
  }

  // required .ant.rpc.RpcConnectionPB.StateType state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional string remote_user_credentials = 3;
  if (has_remote_user_credentials()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remote_user_credentials().data(), this->remote_user_credentials().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remote_user_credentials");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remote_user_credentials(), target);
  }

  // repeated .ant.rpc.RpcCallInProgressPB calls_in_flight = 4;
  for (int i = 0; i < this->calls_in_flight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->calls_in_flight(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.RpcConnectionPB)
  return target;
}

int RpcConnectionPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string remote_ip = 1;
    if (has_remote_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remote_ip());
    }

    // required .ant.rpc.RpcConnectionPB.StateType state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string remote_user_credentials = 3;
    if (has_remote_user_credentials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remote_user_credentials());
    }

  }
  // repeated .ant.rpc.RpcCallInProgressPB calls_in_flight = 4;
  total_size += 1 * this->calls_in_flight_size();
  for (int i = 0; i < this->calls_in_flight_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calls_in_flight(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcConnectionPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcConnectionPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcConnectionPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcConnectionPB::MergeFrom(const RpcConnectionPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  calls_in_flight_.MergeFrom(from.calls_in_flight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remote_ip()) {
      set_remote_ip(from.remote_ip());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_remote_user_credentials()) {
      set_remote_user_credentials(from.remote_user_credentials());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcConnectionPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcConnectionPB::CopyFrom(const RpcConnectionPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcConnectionPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->calls_in_flight())) return false;
  return true;
}

void RpcConnectionPB::Swap(RpcConnectionPB* other) {
  if (other != this) {
    std::swap(remote_ip_, other->remote_ip_);
    std::swap(state_, other->state_);
    std::swap(remote_user_credentials_, other->remote_user_credentials_);
    calls_in_flight_.Swap(&other->calls_in_flight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcConnectionPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcConnectionPB_descriptor_;
  metadata.reflection = RpcConnectionPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DumpRunningRpcsRequestPB::kIncludeTracesFieldNumber;
#endif  // !_MSC_VER

DumpRunningRpcsRequestPB::DumpRunningRpcsRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.DumpRunningRpcsRequestPB)
}

void DumpRunningRpcsRequestPB::InitAsDefaultInstance() {
}

DumpRunningRpcsRequestPB::DumpRunningRpcsRequestPB(const DumpRunningRpcsRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.DumpRunningRpcsRequestPB)
}

void DumpRunningRpcsRequestPB::SharedCtor() {
  _cached_size_ = 0;
  include_traces_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DumpRunningRpcsRequestPB::~DumpRunningRpcsRequestPB() {
  // @@protoc_insertion_point(destructor:ant.rpc.DumpRunningRpcsRequestPB)
  SharedDtor();
}

void DumpRunningRpcsRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DumpRunningRpcsRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpRunningRpcsRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DumpRunningRpcsRequestPB_descriptor_;
}

const DumpRunningRpcsRequestPB& DumpRunningRpcsRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fintrospection_2eproto();
  return *default_instance_;
}

DumpRunningRpcsRequestPB* DumpRunningRpcsRequestPB::default_instance_ = NULL;

DumpRunningRpcsRequestPB* DumpRunningRpcsRequestPB::New() const {
  return new DumpRunningRpcsRequestPB;
}

void DumpRunningRpcsRequestPB::Clear() {
  include_traces_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DumpRunningRpcsRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.DumpRunningRpcsRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool include_traces = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_traces_)));
          set_has_include_traces();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.DumpRunningRpcsRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.DumpRunningRpcsRequestPB)
  return false;
#undef DO_
}

void DumpRunningRpcsRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.DumpRunningRpcsRequestPB)
  // optional bool include_traces = 1 [default = false];
  if (has_include_traces()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->include_traces(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.DumpRunningRpcsRequestPB)
}

::google::protobuf::uint8* DumpRunningRpcsRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.DumpRunningRpcsRequestPB)
  // optional bool include_traces = 1 [default = false];
  if (has_include_traces()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->include_traces(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.DumpRunningRpcsRequestPB)
  return target;
}

int DumpRunningRpcsRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool include_traces = 1 [default = false];
    if (has_include_traces()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpRunningRpcsRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DumpRunningRpcsRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DumpRunningRpcsRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DumpRunningRpcsRequestPB::MergeFrom(const DumpRunningRpcsRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_include_traces()) {
      set_include_traces(from.include_traces());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DumpRunningRpcsRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpRunningRpcsRequestPB::CopyFrom(const DumpRunningRpcsRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpRunningRpcsRequestPB::IsInitialized() const {

  return true;
}

void DumpRunningRpcsRequestPB::Swap(DumpRunningRpcsRequestPB* other) {
  if (other != this) {
    std::swap(include_traces_, other->include_traces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DumpRunningRpcsRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DumpRunningRpcsRequestPB_descriptor_;
  metadata.reflection = DumpRunningRpcsRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DumpRunningRpcsResponsePB::kInboundConnectionsFieldNumber;
const int DumpRunningRpcsResponsePB::kOutboundConnectionsFieldNumber;
#endif  // !_MSC_VER

DumpRunningRpcsResponsePB::DumpRunningRpcsResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.DumpRunningRpcsResponsePB)
}

void DumpRunningRpcsResponsePB::InitAsDefaultInstance() {
}

DumpRunningRpcsResponsePB::DumpRunningRpcsResponsePB(const DumpRunningRpcsResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.DumpRunningRpcsResponsePB)
}

void DumpRunningRpcsResponsePB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DumpRunningRpcsResponsePB::~DumpRunningRpcsResponsePB() {
  // @@protoc_insertion_point(destructor:ant.rpc.DumpRunningRpcsResponsePB)
  SharedDtor();
}

void DumpRunningRpcsResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DumpRunningRpcsResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpRunningRpcsResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DumpRunningRpcsResponsePB_descriptor_;
}

const DumpRunningRpcsResponsePB& DumpRunningRpcsResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fintrospection_2eproto();
  return *default_instance_;
}

DumpRunningRpcsResponsePB* DumpRunningRpcsResponsePB::default_instance_ = NULL;

DumpRunningRpcsResponsePB* DumpRunningRpcsResponsePB::New() const {
  return new DumpRunningRpcsResponsePB;
}

void DumpRunningRpcsResponsePB::Clear() {
  inbound_connections_.Clear();
  outbound_connections_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DumpRunningRpcsResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.DumpRunningRpcsResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ant.rpc.RpcConnectionPB inbound_connections = 1;
      case 1: {
        if (tag == 10) {
         parse_inbound_connections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inbound_connections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_inbound_connections;
        if (input->ExpectTag(18)) goto parse_outbound_connections;
        break;
      }

      // repeated .ant.rpc.RpcConnectionPB outbound_connections = 2;
      case 2: {
        if (tag == 18) {
         parse_outbound_connections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outbound_connections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_outbound_connections;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.DumpRunningRpcsResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.DumpRunningRpcsResponsePB)
  return false;
#undef DO_
}

void DumpRunningRpcsResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.DumpRunningRpcsResponsePB)
  // repeated .ant.rpc.RpcConnectionPB inbound_connections = 1;
  for (int i = 0; i < this->inbound_connections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inbound_connections(i), output);
  }

  // repeated .ant.rpc.RpcConnectionPB outbound_connections = 2;
  for (int i = 0; i < this->outbound_connections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->outbound_connections(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.DumpRunningRpcsResponsePB)
}

::google::protobuf::uint8* DumpRunningRpcsResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.DumpRunningRpcsResponsePB)
  // repeated .ant.rpc.RpcConnectionPB inbound_connections = 1;
  for (int i = 0; i < this->inbound_connections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->inbound_connections(i), target);
  }

  // repeated .ant.rpc.RpcConnectionPB outbound_connections = 2;
  for (int i = 0; i < this->outbound_connections_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->outbound_connections(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.DumpRunningRpcsResponsePB)
  return target;
}

int DumpRunningRpcsResponsePB::ByteSize() const {
  int total_size = 0;

  // repeated .ant.rpc.RpcConnectionPB inbound_connections = 1;
  total_size += 1 * this->inbound_connections_size();
  for (int i = 0; i < this->inbound_connections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inbound_connections(i));
  }

  // repeated .ant.rpc.RpcConnectionPB outbound_connections = 2;
  total_size += 1 * this->outbound_connections_size();
  for (int i = 0; i < this->outbound_connections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outbound_connections(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpRunningRpcsResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DumpRunningRpcsResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DumpRunningRpcsResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DumpRunningRpcsResponsePB::MergeFrom(const DumpRunningRpcsResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  inbound_connections_.MergeFrom(from.inbound_connections_);
  outbound_connections_.MergeFrom(from.outbound_connections_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DumpRunningRpcsResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpRunningRpcsResponsePB::CopyFrom(const DumpRunningRpcsResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpRunningRpcsResponsePB::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->inbound_connections())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->outbound_connections())) return false;
  return true;
}

void DumpRunningRpcsResponsePB::Swap(DumpRunningRpcsResponsePB* other) {
  if (other != this) {
    inbound_connections_.Swap(&other->inbound_connections_);
    outbound_connections_.Swap(&other->outbound_connections_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DumpRunningRpcsResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DumpRunningRpcsResponsePB_descriptor_;
  metadata.reflection = DumpRunningRpcsResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TraceMetricPB::kChildPathFieldNumber;
const int TraceMetricPB::kKeyFieldNumber;
const int TraceMetricPB::kValueFieldNumber;
#endif  // !_MSC_VER

TraceMetricPB::TraceMetricPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.TraceMetricPB)
}

void TraceMetricPB::InitAsDefaultInstance() {
}

TraceMetricPB::TraceMetricPB(const TraceMetricPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.TraceMetricPB)
}

void TraceMetricPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  child_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TraceMetricPB::~TraceMetricPB() {
  // @@protoc_insertion_point(destructor:ant.rpc.TraceMetricPB)
  SharedDtor();
}

void TraceMetricPB::SharedDtor() {
  if (child_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete child_path_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void TraceMetricPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceMetricPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TraceMetricPB_descriptor_;
}

const TraceMetricPB& TraceMetricPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fintrospection_2eproto();
  return *default_instance_;
}

TraceMetricPB* TraceMetricPB::default_instance_ = NULL;

TraceMetricPB* TraceMetricPB::New() const {
  return new TraceMetricPB;
}

void TraceMetricPB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_child_path()) {
      if (child_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        child_path_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TraceMetricPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.TraceMetricPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string child_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_child_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->child_path().data(), this->child_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "child_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int64 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.TraceMetricPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.TraceMetricPB)
  return false;
#undef DO_
}

void TraceMetricPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.TraceMetricPB)
  // optional string child_path = 1;
  if (has_child_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_path().data(), this->child_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "child_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->child_path(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional int64 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.TraceMetricPB)
}

::google::protobuf::uint8* TraceMetricPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.TraceMetricPB)
  // optional string child_path = 1;
  if (has_child_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_path().data(), this->child_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "child_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->child_path(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional int64 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.TraceMetricPB)
  return target;
}

int TraceMetricPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string child_path = 1;
    if (has_child_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->child_path());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int64 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceMetricPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TraceMetricPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TraceMetricPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TraceMetricPB::MergeFrom(const TraceMetricPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_child_path()) {
      set_child_path(from.child_path());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TraceMetricPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceMetricPB::CopyFrom(const TraceMetricPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceMetricPB::IsInitialized() const {

  return true;
}

void TraceMetricPB::Swap(TraceMetricPB* other) {
  if (other != this) {
    std::swap(child_path_, other->child_path_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TraceMetricPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TraceMetricPB_descriptor_;
  metadata.reflection = TraceMetricPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpczSamplePB::kHeaderFieldNumber;
const int RpczSamplePB::kTraceFieldNumber;
const int RpczSamplePB::kDurationMsFieldNumber;
const int RpczSamplePB::kMetricsFieldNumber;
#endif  // !_MSC_VER

RpczSamplePB::RpczSamplePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.RpczSamplePB)
}

void RpczSamplePB::InitAsDefaultInstance() {
  header_ = const_cast< ::ant::rpc::RequestHeader*>(&::ant::rpc::RequestHeader::default_instance());
}

RpczSamplePB::RpczSamplePB(const RpczSamplePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.RpczSamplePB)
}

void RpczSamplePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  trace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpczSamplePB::~RpczSamplePB() {
  // @@protoc_insertion_point(destructor:ant.rpc.RpczSamplePB)
  SharedDtor();
}

void RpczSamplePB::SharedDtor() {
  if (trace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trace_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void RpczSamplePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpczSamplePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpczSamplePB_descriptor_;
}

const RpczSamplePB& RpczSamplePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fintrospection_2eproto();
  return *default_instance_;
}

RpczSamplePB* RpczSamplePB::default_instance_ = NULL;

RpczSamplePB* RpczSamplePB::New() const {
  return new RpczSamplePB;
}

void RpczSamplePB::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_header()) {
      if (header_ != NULL) header_->::ant::rpc::RequestHeader::Clear();
    }
    if (has_trace()) {
      if (trace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trace_->clear();
      }
    }
    duration_ms_ = 0;
  }
  metrics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpczSamplePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.RpczSamplePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ant.rpc.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trace;
        break;
      }

      // optional string trace = 2;
      case 2: {
        if (tag == 18) {
         parse_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trace().data(), this->trace().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trace");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_duration_ms;
        break;
      }

      // optional int32 duration_ms = 3;
      case 3: {
        if (tag == 24) {
         parse_duration_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_ms_)));
          set_has_duration_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_metrics;
        break;
      }

      // repeated .ant.rpc.TraceMetricPB metrics = 4;
      case 4: {
        if (tag == 34) {
         parse_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_metrics;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.RpczSamplePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.RpczSamplePB)
  return false;
#undef DO_
}

void RpczSamplePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.RpczSamplePB)
  // optional .ant.rpc.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional string trace = 2;
  if (has_trace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trace().data(), this->trace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trace(), output);
  }

  // optional int32 duration_ms = 3;
  if (has_duration_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duration_ms(), output);
  }

  // repeated .ant.rpc.TraceMetricPB metrics = 4;
  for (int i = 0; i < this->metrics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->metrics(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.RpczSamplePB)
}

::google::protobuf::uint8* RpczSamplePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.RpczSamplePB)
  // optional .ant.rpc.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional string trace = 2;
  if (has_trace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trace().data(), this->trace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trace(), target);
  }

  // optional int32 duration_ms = 3;
  if (has_duration_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duration_ms(), target);
  }

  // repeated .ant.rpc.TraceMetricPB metrics = 4;
  for (int i = 0; i < this->metrics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->metrics(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.RpczSamplePB)
  return target;
}

int RpczSamplePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ant.rpc.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string trace = 2;
    if (has_trace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trace());
    }

    // optional int32 duration_ms = 3;
    if (has_duration_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration_ms());
    }

  }
  // repeated .ant.rpc.TraceMetricPB metrics = 4;
  total_size += 1 * this->metrics_size();
  for (int i = 0; i < this->metrics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metrics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpczSamplePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpczSamplePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpczSamplePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpczSamplePB::MergeFrom(const RpczSamplePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  metrics_.MergeFrom(from.metrics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::ant::rpc::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_trace()) {
      set_trace(from.trace());
    }
    if (from.has_duration_ms()) {
      set_duration_ms(from.duration_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpczSamplePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpczSamplePB::CopyFrom(const RpczSamplePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpczSamplePB::IsInitialized() const {

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void RpczSamplePB::Swap(RpczSamplePB* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(trace_, other->trace_);
    std::swap(duration_ms_, other->duration_ms_);
    metrics_.Swap(&other->metrics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpczSamplePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpczSamplePB_descriptor_;
  metadata.reflection = RpczSamplePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpczMethodPB::kMethodNameFieldNumber;
const int RpczMethodPB::kSamplesFieldNumber;
#endif  // !_MSC_VER

RpczMethodPB::RpczMethodPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.RpczMethodPB)
}

void RpczMethodPB::InitAsDefaultInstance() {
}

RpczMethodPB::RpczMethodPB(const RpczMethodPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.RpczMethodPB)
}

void RpczMethodPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpczMethodPB::~RpczMethodPB() {
  // @@protoc_insertion_point(destructor:ant.rpc.RpczMethodPB)
  SharedDtor();
}

void RpczMethodPB::SharedDtor() {
  if (method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_name_;
  }
  if (this != default_instance_) {
  }
}

void RpczMethodPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpczMethodPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpczMethodPB_descriptor_;
}

const RpczMethodPB& RpczMethodPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fintrospection_2eproto();
  return *default_instance_;
}

RpczMethodPB* RpczMethodPB::default_instance_ = NULL;

RpczMethodPB* RpczMethodPB::New() const {
  return new RpczMethodPB;
}

void RpczMethodPB::Clear() {
  if (has_method_name()) {
    if (method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      method_name_->clear();
    }
  }
  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpczMethodPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.RpczMethodPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string method_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_samples;
        break;
      }

      // repeated .ant.rpc.RpczSamplePB samples = 2;
      case 2: {
        if (tag == 18) {
         parse_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_samples;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.RpczMethodPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.RpczMethodPB)
  return false;
#undef DO_
}

void RpczMethodPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.RpczMethodPB)
  // required string method_name = 1;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->method_name(), output);
  }

  // repeated .ant.rpc.RpczSamplePB samples = 2;
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->samples(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.RpczMethodPB)
}

::google::protobuf::uint8* RpczMethodPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.RpczMethodPB)
  // required string method_name = 1;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method_name(), target);
  }

  // repeated .ant.rpc.RpczSamplePB samples = 2;
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->samples(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.RpczMethodPB)
  return target;
}

int RpczMethodPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string method_name = 1;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

  }
  // repeated .ant.rpc.RpczSamplePB samples = 2;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpczMethodPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpczMethodPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpczMethodPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpczMethodPB::MergeFrom(const RpczMethodPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpczMethodPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpczMethodPB::CopyFrom(const RpczMethodPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpczMethodPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->samples())) return false;
  return true;
}

void RpczMethodPB::Swap(RpczMethodPB* other) {
  if (other != this) {
    std::swap(method_name_, other->method_name_);
    samples_.Swap(&other->samples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpczMethodPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpczMethodPB_descriptor_;
  metadata.reflection = RpczMethodPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DumpRpczStoreRequestPB::DumpRpczStoreRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.DumpRpczStoreRequestPB)
}

void DumpRpczStoreRequestPB::InitAsDefaultInstance() {
}

DumpRpczStoreRequestPB::DumpRpczStoreRequestPB(const DumpRpczStoreRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.DumpRpczStoreRequestPB)
}

void DumpRpczStoreRequestPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DumpRpczStoreRequestPB::~DumpRpczStoreRequestPB() {
  // @@protoc_insertion_point(destructor:ant.rpc.DumpRpczStoreRequestPB)
  SharedDtor();
}

void DumpRpczStoreRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DumpRpczStoreRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpRpczStoreRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DumpRpczStoreRequestPB_descriptor_;
}

const DumpRpczStoreRequestPB& DumpRpczStoreRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fintrospection_2eproto();
  return *default_instance_;
}

DumpRpczStoreRequestPB* DumpRpczStoreRequestPB::default_instance_ = NULL;

DumpRpczStoreRequestPB* DumpRpczStoreRequestPB::New() const {
  return new DumpRpczStoreRequestPB;
}

void DumpRpczStoreRequestPB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DumpRpczStoreRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.DumpRpczStoreRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.DumpRpczStoreRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.DumpRpczStoreRequestPB)
  return false;
#undef DO_
}

void DumpRpczStoreRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.DumpRpczStoreRequestPB)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.DumpRpczStoreRequestPB)
}

::google::protobuf::uint8* DumpRpczStoreRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.DumpRpczStoreRequestPB)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.DumpRpczStoreRequestPB)
  return target;
}

int DumpRpczStoreRequestPB::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpRpczStoreRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DumpRpczStoreRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DumpRpczStoreRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DumpRpczStoreRequestPB::MergeFrom(const DumpRpczStoreRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DumpRpczStoreRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpRpczStoreRequestPB::CopyFrom(const DumpRpczStoreRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpRpczStoreRequestPB::IsInitialized() const {

  return true;
}

void DumpRpczStoreRequestPB::Swap(DumpRpczStoreRequestPB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DumpRpczStoreRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DumpRpczStoreRequestPB_descriptor_;
  metadata.reflection = DumpRpczStoreRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DumpRpczStoreResponsePB::kMethodsFieldNumber;
#endif  // !_MSC_VER

DumpRpczStoreResponsePB::DumpRpczStoreResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.DumpRpczStoreResponsePB)
}

void DumpRpczStoreResponsePB::InitAsDefaultInstance() {
}

DumpRpczStoreResponsePB::DumpRpczStoreResponsePB(const DumpRpczStoreResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.DumpRpczStoreResponsePB)
}

void DumpRpczStoreResponsePB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DumpRpczStoreResponsePB::~DumpRpczStoreResponsePB() {
  // @@protoc_insertion_point(destructor:ant.rpc.DumpRpczStoreResponsePB)
  SharedDtor();
}

void DumpRpczStoreResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DumpRpczStoreResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpRpczStoreResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DumpRpczStoreResponsePB_descriptor_;
}

const DumpRpczStoreResponsePB& DumpRpczStoreResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fintrospection_2eproto();
  return *default_instance_;
}

DumpRpczStoreResponsePB* DumpRpczStoreResponsePB::default_instance_ = NULL;

DumpRpczStoreResponsePB* DumpRpczStoreResponsePB::New() const {
  return new DumpRpczStoreResponsePB;
}

void DumpRpczStoreResponsePB::Clear() {
  methods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DumpRpczStoreResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.DumpRpczStoreResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ant.rpc.RpczMethodPB methods = 1;
      case 1: {
        if (tag == 10) {
         parse_methods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_methods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_methods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.DumpRpczStoreResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.DumpRpczStoreResponsePB)
  return false;
#undef DO_
}

void DumpRpczStoreResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.DumpRpczStoreResponsePB)
  // repeated .ant.rpc.RpczMethodPB methods = 1;
  for (int i = 0; i < this->methods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->methods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.DumpRpczStoreResponsePB)
}

::google::protobuf::uint8* DumpRpczStoreResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.DumpRpczStoreResponsePB)
  // repeated .ant.rpc.RpczMethodPB methods = 1;
  for (int i = 0; i < this->methods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->methods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.DumpRpczStoreResponsePB)
  return target;
}

int DumpRpczStoreResponsePB::ByteSize() const {
  int total_size = 0;

  // repeated .ant.rpc.RpczMethodPB methods = 1;
  total_size += 1 * this->methods_size();
  for (int i = 0; i < this->methods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->methods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpRpczStoreResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DumpRpczStoreResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DumpRpczStoreResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DumpRpczStoreResponsePB::MergeFrom(const DumpRpczStoreResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  methods_.MergeFrom(from.methods_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DumpRpczStoreResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpRpczStoreResponsePB::CopyFrom(const DumpRpczStoreResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpRpczStoreResponsePB::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->methods())) return false;
  return true;
}

void DumpRpczStoreResponsePB::Swap(DumpRpczStoreResponsePB* other) {
  if (other != this) {
    methods_.Swap(&other->methods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DumpRpczStoreResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DumpRpczStoreResponsePB_descriptor_;
  metadata.reflection = DumpRpczStoreResponsePB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace ant

// @@protoc_insertion_point(global_scope)
