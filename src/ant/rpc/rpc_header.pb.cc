// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_header.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc_header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ant {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* UserInformationPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInformationPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionContextPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionContextPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaslMessagePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaslMessagePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaslMessagePB_SaslAuth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaslMessagePB_SaslAuth_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SaslMessagePB_SaslState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RemoteMethodPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteMethodPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestIdPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestIdPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorStatusPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorStatusPB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorStatusPB_RpcErrorCodePB_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcFeatureFlag_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_5fheader_2eproto() {
  protobuf_AddDesc_rpc_5fheader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc_header.proto");
  GOOGLE_CHECK(file != NULL);
  UserInformationPB_descriptor_ = file->message_type(0);
  static const int UserInformationPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInformationPB, effective_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInformationPB, real_user_),
  };
  UserInformationPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInformationPB_descriptor_,
      UserInformationPB::default_instance_,
      UserInformationPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInformationPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInformationPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInformationPB));
  ConnectionContextPB_descriptor_ = file->message_type(1);
  static const int ConnectionContextPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionContextPB, deprecated_user_info_),
  };
  ConnectionContextPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionContextPB_descriptor_,
      ConnectionContextPB::default_instance_,
      ConnectionContextPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionContextPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionContextPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionContextPB));
  SaslMessagePB_descriptor_ = file->message_type(2);
  static const int SaslMessagePB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaslMessagePB, supported_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaslMessagePB, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaslMessagePB, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaslMessagePB, auths_),
  };
  SaslMessagePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaslMessagePB_descriptor_,
      SaslMessagePB::default_instance_,
      SaslMessagePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaslMessagePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaslMessagePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaslMessagePB));
  SaslMessagePB_SaslAuth_descriptor_ = SaslMessagePB_descriptor_->nested_type(0);
  static const int SaslMessagePB_SaslAuth_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaslMessagePB_SaslAuth, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaslMessagePB_SaslAuth, mechanism_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaslMessagePB_SaslAuth, challenge_),
  };
  SaslMessagePB_SaslAuth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaslMessagePB_SaslAuth_descriptor_,
      SaslMessagePB_SaslAuth::default_instance_,
      SaslMessagePB_SaslAuth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaslMessagePB_SaslAuth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaslMessagePB_SaslAuth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaslMessagePB_SaslAuth));
  SaslMessagePB_SaslState_descriptor_ = SaslMessagePB_descriptor_->enum_type(0);
  RemoteMethodPB_descriptor_ = file->message_type(3);
  static const int RemoteMethodPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteMethodPB, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteMethodPB, method_name_),
  };
  RemoteMethodPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteMethodPB_descriptor_,
      RemoteMethodPB::default_instance_,
      RemoteMethodPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteMethodPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteMethodPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteMethodPB));
  RequestIdPB_descriptor_ = file->message_type(4);
  static const int RequestIdPB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIdPB, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIdPB, seq_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIdPB, first_incomplete_seq_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIdPB, attempt_no_),
  };
  RequestIdPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestIdPB_descriptor_,
      RequestIdPB::default_instance_,
      RequestIdPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIdPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIdPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestIdPB));
  RequestHeader_descriptor_ = file->message_type(5);
  static const int RequestHeader_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, call_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, remote_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, timeout_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, required_feature_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, request_id_),
  };
  RequestHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestHeader_descriptor_,
      RequestHeader::default_instance_,
      RequestHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestHeader));
  ResponseHeader_descriptor_ = file->message_type(6);
  static const int ResponseHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, call_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, is_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, sidecar_offsets_),
  };
  ResponseHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseHeader_descriptor_,
      ResponseHeader::default_instance_,
      ResponseHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseHeader));
  ErrorStatusPB_descriptor_ = file->message_type(7);
  static const int ErrorStatusPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorStatusPB, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorStatusPB, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorStatusPB, unsupported_feature_flags_),
  };
  ErrorStatusPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorStatusPB_descriptor_,
      ErrorStatusPB::default_instance_,
      ErrorStatusPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorStatusPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorStatusPB, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorStatusPB, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorStatusPB));
  ErrorStatusPB_RpcErrorCodePB_descriptor_ = ErrorStatusPB_descriptor_->enum_type(0);
  RpcFeatureFlag_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_5fheader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInformationPB_descriptor_, &UserInformationPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionContextPB_descriptor_, &ConnectionContextPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaslMessagePB_descriptor_, &SaslMessagePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaslMessagePB_SaslAuth_descriptor_, &SaslMessagePB_SaslAuth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteMethodPB_descriptor_, &RemoteMethodPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestIdPB_descriptor_, &RequestIdPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestHeader_descriptor_, &RequestHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseHeader_descriptor_, &ResponseHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorStatusPB_descriptor_, &ErrorStatusPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_5fheader_2eproto() {
  delete UserInformationPB::default_instance_;
  delete UserInformationPB_reflection_;
  delete ConnectionContextPB::default_instance_;
  delete ConnectionContextPB_reflection_;
  delete SaslMessagePB::default_instance_;
  delete SaslMessagePB_reflection_;
  delete SaslMessagePB_SaslAuth::default_instance_;
  delete SaslMessagePB_SaslAuth_reflection_;
  delete RemoteMethodPB::default_instance_;
  delete RemoteMethodPB_reflection_;
  delete RequestIdPB::default_instance_;
  delete RequestIdPB_reflection_;
  delete RequestHeader::default_instance_;
  delete RequestHeader_reflection_;
  delete ResponseHeader::default_instance_;
  delete ResponseHeader_reflection_;
  delete ErrorStatusPB::default_instance_;
  delete ErrorStatusPB_reflection_;
}

void protobuf_AddDesc_rpc_5fheader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020rpc_header.proto\022\007ant.rpc\032 google/prot"
    "obuf/descriptor.proto\">\n\021UserInformation"
    "PB\022\026\n\016effective_user\030\001 \001(\t\022\021\n\treal_user\030"
    "\002 \002(\t\"O\n\023ConnectionContextPB\0228\n\024DEPRECAT"
    "ED_user_info\030\002 \001(\0132\032.ant.rpc.UserInforma"
    "tionPB\"\330\002\n\rSaslMessagePB\0223\n\022supported_fe"
    "atures\030\001 \003(\0162\027.ant.rpc.RpcFeatureFlag\022/\n"
    "\005state\030\002 \002(\0162 .ant.rpc.SaslMessagePB.Sas"
    "lState\022\r\n\005token\030\003 \001(\014\022.\n\005auths\030\004 \003(\0132\037.a"
    "nt.rpc.SaslMessagePB.SaslAuth\032@\n\010SaslAut"
    "h\022\016\n\006method\030\001 \001(\t\022\021\n\tmechanism\030\002 \002(\t\022\021\n\t"
    "challenge\030\005 \001(\014\"`\n\tSaslState\022\014\n\007UNKNOWN\020"
    "\347\007\022\013\n\007SUCCESS\020\000\022\r\n\tNEGOTIATE\020\001\022\014\n\010INITIA"
    "TE\020\002\022\r\n\tCHALLENGE\020\003\022\014\n\010RESPONSE\020\004\";\n\016Rem"
    "oteMethodPB\022\024\n\014service_name\030\001 \002(\t\022\023\n\013met"
    "hod_name\030\002 \002(\t\"e\n\013RequestIdPB\022\021\n\tclient_"
    "id\030\001 \002(\t\022\016\n\006seq_no\030\002 \002(\003\022\037\n\027first_incomp"
    "lete_seq_no\030\003 \002(\003\022\022\n\nattempt_no\030\004 \002(\003\"\262\001"
    "\n\rRequestHeader\022\017\n\007call_id\030\003 \002(\005\022.\n\rremo"
    "te_method\030\006 \001(\0132\027.ant.rpc.RemoteMethodPB"
    "\022\026\n\016timeout_millis\030\n \001(\r\022\036\n\026required_fea"
    "ture_flags\030\013 \003(\r\022(\n\nrequest_id\030\017 \001(\0132\024.a"
    "nt.rpc.RequestIdPB\"S\n\016ResponseHeader\022\017\n\007"
    "call_id\030\001 \002(\005\022\027\n\010is_error\030\002 \001(\010:\005false\022\027"
    "\n\017sidecar_offsets\030\003 \003(\r\"\326\003\n\rErrorStatusP"
    "B\022\017\n\007message\030\001 \002(\t\0223\n\004code\030\002 \001(\0162%.ant.r"
    "pc.ErrorStatusPB.RpcErrorCodePB\022!\n\031unsup"
    "ported_feature_flags\030\003 \003(\r\"\321\002\n\016RpcErrorC"
    "odePB\022\021\n\rFATAL_UNKNOWN\020\n\022\025\n\021ERROR_APPLIC"
    "ATION\020\001\022\030\n\024ERROR_NO_SUCH_METHOD\020\002\022\031\n\025ERR"
    "OR_NO_SUCH_SERVICE\020\003\022\031\n\025ERROR_SERVER_TOO"
    "_BUSY\020\004\022\031\n\025ERROR_INVALID_REQUEST\020\005\022\027\n\023ER"
    "ROR_REQUEST_STALE\020\006\022\036\n\032FATAL_SERVER_SHUT"
    "TING_DOWN\020\013\022\034\n\030FATAL_INVALID_RPC_HEADER\020"
    "\014\022\037\n\033FATAL_DESERIALIZING_REQUEST\020\r\022\032\n\026FA"
    "TAL_VERSION_MISMATCH\020\016\022\026\n\022FATAL_UNAUTHOR"
    "IZED\020\017*\010\010d\020\200\200\200\200\002*<\n\016RpcFeatureFlag\022\013\n\007UN"
    "KNOWN\020\000\022\035\n\031APPLICATION_FEATURE_FLAGS\020\001:A"
    "\n\020track_rpc_result\022\036.google.protobuf.Met"
    "hodOptions\030\326\206\003 \001(\010:\005falseB\002H\001", 1589);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc_header.proto", &protobuf_RegisterTypes);
  UserInformationPB::default_instance_ = new UserInformationPB();
  ConnectionContextPB::default_instance_ = new ConnectionContextPB();
  SaslMessagePB::default_instance_ = new SaslMessagePB();
  SaslMessagePB_SaslAuth::default_instance_ = new SaslMessagePB_SaslAuth();
  RemoteMethodPB::default_instance_ = new RemoteMethodPB();
  RequestIdPB::default_instance_ = new RequestIdPB();
  RequestHeader::default_instance_ = new RequestHeader();
  ResponseHeader::default_instance_ = new ResponseHeader();
  ErrorStatusPB::default_instance_ = new ErrorStatusPB();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MethodOptions::default_instance(),
    50006, 8, false, false);
  UserInformationPB::default_instance_->InitAsDefaultInstance();
  ConnectionContextPB::default_instance_->InitAsDefaultInstance();
  SaslMessagePB::default_instance_->InitAsDefaultInstance();
  SaslMessagePB_SaslAuth::default_instance_->InitAsDefaultInstance();
  RemoteMethodPB::default_instance_->InitAsDefaultInstance();
  RequestIdPB::default_instance_->InitAsDefaultInstance();
  RequestHeader::default_instance_->InitAsDefaultInstance();
  ResponseHeader::default_instance_->InitAsDefaultInstance();
  ErrorStatusPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_5fheader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_5fheader_2eproto {
  StaticDescriptorInitializer_rpc_5fheader_2eproto() {
    protobuf_AddDesc_rpc_5fheader_2eproto();
  }
} static_descriptor_initializer_rpc_5fheader_2eproto_;
const ::google::protobuf::EnumDescriptor* RpcFeatureFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcFeatureFlag_descriptor_;
}
bool RpcFeatureFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserInformationPB::kEffectiveUserFieldNumber;
const int UserInformationPB::kRealUserFieldNumber;
#endif  // !_MSC_VER

UserInformationPB::UserInformationPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.UserInformationPB)
}

void UserInformationPB::InitAsDefaultInstance() {
}

UserInformationPB::UserInformationPB(const UserInformationPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.UserInformationPB)
}

void UserInformationPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  effective_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  real_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInformationPB::~UserInformationPB() {
  // @@protoc_insertion_point(destructor:ant.rpc.UserInformationPB)
  SharedDtor();
}

void UserInformationPB::SharedDtor() {
  if (effective_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effective_user_;
  }
  if (real_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete real_user_;
  }
  if (this != default_instance_) {
  }
}

void UserInformationPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInformationPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInformationPB_descriptor_;
}

const UserInformationPB& UserInformationPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fheader_2eproto();
  return *default_instance_;
}

UserInformationPB* UserInformationPB::default_instance_ = NULL;

UserInformationPB* UserInformationPB::New() const {
  return new UserInformationPB;
}

void UserInformationPB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_effective_user()) {
      if (effective_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        effective_user_->clear();
      }
    }
    if (has_real_user()) {
      if (real_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        real_user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInformationPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.UserInformationPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string effective_user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effective_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->effective_user().data(), this->effective_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "effective_user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_real_user;
        break;
      }

      // required string real_user = 2;
      case 2: {
        if (tag == 18) {
         parse_real_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->real_user().data(), this->real_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "real_user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.UserInformationPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.UserInformationPB)
  return false;
#undef DO_
}

void UserInformationPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.UserInformationPB)
  // optional string effective_user = 1;
  if (has_effective_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effective_user().data(), this->effective_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effective_user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->effective_user(), output);
  }

  // required string real_user = 2;
  if (has_real_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_user().data(), this->real_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "real_user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->real_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.UserInformationPB)
}

::google::protobuf::uint8* UserInformationPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.UserInformationPB)
  // optional string effective_user = 1;
  if (has_effective_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effective_user().data(), this->effective_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effective_user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->effective_user(), target);
  }

  // required string real_user = 2;
  if (has_real_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->real_user().data(), this->real_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "real_user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->real_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.UserInformationPB)
  return target;
}

int UserInformationPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string effective_user = 1;
    if (has_effective_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effective_user());
    }

    // required string real_user = 2;
    if (has_real_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInformationPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInformationPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInformationPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInformationPB::MergeFrom(const UserInformationPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effective_user()) {
      set_effective_user(from.effective_user());
    }
    if (from.has_real_user()) {
      set_real_user(from.real_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInformationPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInformationPB::CopyFrom(const UserInformationPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInformationPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void UserInformationPB::Swap(UserInformationPB* other) {
  if (other != this) {
    std::swap(effective_user_, other->effective_user_);
    std::swap(real_user_, other->real_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInformationPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInformationPB_descriptor_;
  metadata.reflection = UserInformationPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectionContextPB::kDEPRECATEDUserInfoFieldNumber;
#endif  // !_MSC_VER

ConnectionContextPB::ConnectionContextPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.ConnectionContextPB)
}

void ConnectionContextPB::InitAsDefaultInstance() {
  deprecated_user_info_ = const_cast< ::ant::rpc::UserInformationPB*>(&::ant::rpc::UserInformationPB::default_instance());
}

ConnectionContextPB::ConnectionContextPB(const ConnectionContextPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.ConnectionContextPB)
}

void ConnectionContextPB::SharedCtor() {
  _cached_size_ = 0;
  deprecated_user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionContextPB::~ConnectionContextPB() {
  // @@protoc_insertion_point(destructor:ant.rpc.ConnectionContextPB)
  SharedDtor();
}

void ConnectionContextPB::SharedDtor() {
  if (this != default_instance_) {
    delete deprecated_user_info_;
  }
}

void ConnectionContextPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionContextPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionContextPB_descriptor_;
}

const ConnectionContextPB& ConnectionContextPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fheader_2eproto();
  return *default_instance_;
}

ConnectionContextPB* ConnectionContextPB::default_instance_ = NULL;

ConnectionContextPB* ConnectionContextPB::New() const {
  return new ConnectionContextPB;
}

void ConnectionContextPB::Clear() {
  if (has_deprecated_user_info()) {
    if (deprecated_user_info_ != NULL) deprecated_user_info_->::ant::rpc::UserInformationPB::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionContextPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.ConnectionContextPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ant.rpc.UserInformationPB DEPRECATED_user_info = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deprecated_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.ConnectionContextPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.ConnectionContextPB)
  return false;
#undef DO_
}

void ConnectionContextPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.ConnectionContextPB)
  // optional .ant.rpc.UserInformationPB DEPRECATED_user_info = 2;
  if (has_deprecated_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->deprecated_user_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.ConnectionContextPB)
}

::google::protobuf::uint8* ConnectionContextPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.ConnectionContextPB)
  // optional .ant.rpc.UserInformationPB DEPRECATED_user_info = 2;
  if (has_deprecated_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->deprecated_user_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.ConnectionContextPB)
  return target;
}

int ConnectionContextPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ant.rpc.UserInformationPB DEPRECATED_user_info = 2;
    if (has_deprecated_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deprecated_user_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionContextPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionContextPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionContextPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionContextPB::MergeFrom(const ConnectionContextPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deprecated_user_info()) {
      mutable_deprecated_user_info()->::ant::rpc::UserInformationPB::MergeFrom(from.deprecated_user_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionContextPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionContextPB::CopyFrom(const ConnectionContextPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionContextPB::IsInitialized() const {

  if (has_deprecated_user_info()) {
    if (!this->deprecated_user_info().IsInitialized()) return false;
  }
  return true;
}

void ConnectionContextPB::Swap(ConnectionContextPB* other) {
  if (other != this) {
    std::swap(deprecated_user_info_, other->deprecated_user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionContextPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionContextPB_descriptor_;
  metadata.reflection = ConnectionContextPB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SaslMessagePB_SaslState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaslMessagePB_SaslState_descriptor_;
}
bool SaslMessagePB_SaslState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 999:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SaslMessagePB_SaslState SaslMessagePB::UNKNOWN;
const SaslMessagePB_SaslState SaslMessagePB::SUCCESS;
const SaslMessagePB_SaslState SaslMessagePB::NEGOTIATE;
const SaslMessagePB_SaslState SaslMessagePB::INITIATE;
const SaslMessagePB_SaslState SaslMessagePB::CHALLENGE;
const SaslMessagePB_SaslState SaslMessagePB::RESPONSE;
const SaslMessagePB_SaslState SaslMessagePB::SaslState_MIN;
const SaslMessagePB_SaslState SaslMessagePB::SaslState_MAX;
const int SaslMessagePB::SaslState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SaslMessagePB_SaslAuth::kMethodFieldNumber;
const int SaslMessagePB_SaslAuth::kMechanismFieldNumber;
const int SaslMessagePB_SaslAuth::kChallengeFieldNumber;
#endif  // !_MSC_VER

SaslMessagePB_SaslAuth::SaslMessagePB_SaslAuth()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.SaslMessagePB.SaslAuth)
}

void SaslMessagePB_SaslAuth::InitAsDefaultInstance() {
}

SaslMessagePB_SaslAuth::SaslMessagePB_SaslAuth(const SaslMessagePB_SaslAuth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.SaslMessagePB.SaslAuth)
}

void SaslMessagePB_SaslAuth::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mechanism_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  challenge_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaslMessagePB_SaslAuth::~SaslMessagePB_SaslAuth() {
  // @@protoc_insertion_point(destructor:ant.rpc.SaslMessagePB.SaslAuth)
  SharedDtor();
}

void SaslMessagePB_SaslAuth::SharedDtor() {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (mechanism_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mechanism_;
  }
  if (challenge_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete challenge_;
  }
  if (this != default_instance_) {
  }
}

void SaslMessagePB_SaslAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaslMessagePB_SaslAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaslMessagePB_SaslAuth_descriptor_;
}

const SaslMessagePB_SaslAuth& SaslMessagePB_SaslAuth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fheader_2eproto();
  return *default_instance_;
}

SaslMessagePB_SaslAuth* SaslMessagePB_SaslAuth::default_instance_ = NULL;

SaslMessagePB_SaslAuth* SaslMessagePB_SaslAuth::New() const {
  return new SaslMessagePB_SaslAuth;
}

void SaslMessagePB_SaslAuth::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        method_->clear();
      }
    }
    if (has_mechanism()) {
      if (mechanism_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mechanism_->clear();
      }
    }
    if (has_challenge()) {
      if (challenge_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        challenge_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaslMessagePB_SaslAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.SaslMessagePB.SaslAuth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string method = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mechanism;
        break;
      }

      // required string mechanism = 2;
      case 2: {
        if (tag == 18) {
         parse_mechanism:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mechanism()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mechanism().data(), this->mechanism().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mechanism");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_challenge;
        break;
      }

      // optional bytes challenge = 5;
      case 5: {
        if (tag == 42) {
         parse_challenge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_challenge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.SaslMessagePB.SaslAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.SaslMessagePB.SaslAuth)
  return false;
#undef DO_
}

void SaslMessagePB_SaslAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.SaslMessagePB.SaslAuth)
  // optional string method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->method(), output);
  }

  // required string mechanism = 2;
  if (has_mechanism()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mechanism().data(), this->mechanism().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mechanism");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mechanism(), output);
  }

  // optional bytes challenge = 5;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->challenge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.SaslMessagePB.SaslAuth)
}

::google::protobuf::uint8* SaslMessagePB_SaslAuth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.SaslMessagePB.SaslAuth)
  // optional string method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method(), target);
  }

  // required string mechanism = 2;
  if (has_mechanism()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mechanism().data(), this->mechanism().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mechanism");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mechanism(), target);
  }

  // optional bytes challenge = 5;
  if (has_challenge()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->challenge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.SaslMessagePB.SaslAuth)
  return target;
}

int SaslMessagePB_SaslAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string method = 1;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // required string mechanism = 2;
    if (has_mechanism()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mechanism());
    }

    // optional bytes challenge = 5;
    if (has_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->challenge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaslMessagePB_SaslAuth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaslMessagePB_SaslAuth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaslMessagePB_SaslAuth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaslMessagePB_SaslAuth::MergeFrom(const SaslMessagePB_SaslAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_mechanism()) {
      set_mechanism(from.mechanism());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaslMessagePB_SaslAuth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaslMessagePB_SaslAuth::CopyFrom(const SaslMessagePB_SaslAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaslMessagePB_SaslAuth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void SaslMessagePB_SaslAuth::Swap(SaslMessagePB_SaslAuth* other) {
  if (other != this) {
    std::swap(method_, other->method_);
    std::swap(mechanism_, other->mechanism_);
    std::swap(challenge_, other->challenge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaslMessagePB_SaslAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaslMessagePB_SaslAuth_descriptor_;
  metadata.reflection = SaslMessagePB_SaslAuth_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SaslMessagePB::kSupportedFeaturesFieldNumber;
const int SaslMessagePB::kStateFieldNumber;
const int SaslMessagePB::kTokenFieldNumber;
const int SaslMessagePB::kAuthsFieldNumber;
#endif  // !_MSC_VER

SaslMessagePB::SaslMessagePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.SaslMessagePB)
}

void SaslMessagePB::InitAsDefaultInstance() {
}

SaslMessagePB::SaslMessagePB(const SaslMessagePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.SaslMessagePB)
}

void SaslMessagePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 999;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaslMessagePB::~SaslMessagePB() {
  // @@protoc_insertion_point(destructor:ant.rpc.SaslMessagePB)
  SharedDtor();
}

void SaslMessagePB::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void SaslMessagePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaslMessagePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaslMessagePB_descriptor_;
}

const SaslMessagePB& SaslMessagePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fheader_2eproto();
  return *default_instance_;
}

SaslMessagePB* SaslMessagePB::default_instance_ = NULL;

SaslMessagePB* SaslMessagePB::New() const {
  return new SaslMessagePB;
}

void SaslMessagePB::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    state_ = 999;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  supported_features_.Clear();
  auths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaslMessagePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.SaslMessagePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ant.rpc.RpcFeatureFlag supported_features = 1;
      case 1: {
        if (tag == 8) {
         parse_supported_features:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ant::rpc::RpcFeatureFlag_IsValid(value)) {
            add_supported_features(static_cast< ::ant::rpc::RpcFeatureFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::ant::rpc::RpcFeatureFlag_IsValid,
                 this->mutable_supported_features())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_supported_features;
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .ant.rpc.SaslMessagePB.SaslState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ant::rpc::SaslMessagePB_SaslState_IsValid(value)) {
            set_state(static_cast< ::ant::rpc::SaslMessagePB_SaslState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional bytes token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_auths;
        break;
      }

      // repeated .ant.rpc.SaslMessagePB.SaslAuth auths = 4;
      case 4: {
        if (tag == 34) {
         parse_auths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_auths()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_auths;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.SaslMessagePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.SaslMessagePB)
  return false;
#undef DO_
}

void SaslMessagePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.SaslMessagePB)
  // repeated .ant.rpc.RpcFeatureFlag supported_features = 1;
  for (int i = 0; i < this->supported_features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->supported_features(i), output);
  }

  // required .ant.rpc.SaslMessagePB.SaslState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional bytes token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->token(), output);
  }

  // repeated .ant.rpc.SaslMessagePB.SaslAuth auths = 4;
  for (int i = 0; i < this->auths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->auths(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.SaslMessagePB)
}

::google::protobuf::uint8* SaslMessagePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.SaslMessagePB)
  // repeated .ant.rpc.RpcFeatureFlag supported_features = 1;
  for (int i = 0; i < this->supported_features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->supported_features(i), target);
  }

  // required .ant.rpc.SaslMessagePB.SaslState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional bytes token = 3;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->token(), target);
  }

  // repeated .ant.rpc.SaslMessagePB.SaslAuth auths = 4;
  for (int i = 0; i < this->auths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->auths(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.SaslMessagePB)
  return target;
}

int SaslMessagePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ant.rpc.SaslMessagePB.SaslState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional bytes token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  // repeated .ant.rpc.RpcFeatureFlag supported_features = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->supported_features_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->supported_features(i));
    }
    total_size += 1 * this->supported_features_size() + data_size;
  }

  // repeated .ant.rpc.SaslMessagePB.SaslAuth auths = 4;
  total_size += 1 * this->auths_size();
  for (int i = 0; i < this->auths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->auths(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaslMessagePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaslMessagePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaslMessagePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaslMessagePB::MergeFrom(const SaslMessagePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  supported_features_.MergeFrom(from.supported_features_);
  auths_.MergeFrom(from.auths_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaslMessagePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaslMessagePB::CopyFrom(const SaslMessagePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaslMessagePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->auths())) return false;
  return true;
}

void SaslMessagePB::Swap(SaslMessagePB* other) {
  if (other != this) {
    supported_features_.Swap(&other->supported_features_);
    std::swap(state_, other->state_);
    std::swap(token_, other->token_);
    auths_.Swap(&other->auths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaslMessagePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaslMessagePB_descriptor_;
  metadata.reflection = SaslMessagePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteMethodPB::kServiceNameFieldNumber;
const int RemoteMethodPB::kMethodNameFieldNumber;
#endif  // !_MSC_VER

RemoteMethodPB::RemoteMethodPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.RemoteMethodPB)
}

void RemoteMethodPB::InitAsDefaultInstance() {
}

RemoteMethodPB::RemoteMethodPB(const RemoteMethodPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.RemoteMethodPB)
}

void RemoteMethodPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteMethodPB::~RemoteMethodPB() {
  // @@protoc_insertion_point(destructor:ant.rpc.RemoteMethodPB)
  SharedDtor();
}

void RemoteMethodPB::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_name_;
  }
  if (this != default_instance_) {
  }
}

void RemoteMethodPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteMethodPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteMethodPB_descriptor_;
}

const RemoteMethodPB& RemoteMethodPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fheader_2eproto();
  return *default_instance_;
}

RemoteMethodPB* RemoteMethodPB::default_instance_ = NULL;

RemoteMethodPB* RemoteMethodPB::New() const {
  return new RemoteMethodPB;
}

void RemoteMethodPB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_name_->clear();
      }
    }
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        method_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteMethodPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.RemoteMethodPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "service_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_method_name;
        break;
      }

      // required string method_name = 2;
      case 2: {
        if (tag == 18) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), this->method_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.RemoteMethodPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.RemoteMethodPB)
  return false;
#undef DO_
}

void RemoteMethodPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.RemoteMethodPB)
  // required string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // required string method_name = 2;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.RemoteMethodPB)
}

::google::protobuf::uint8* RemoteMethodPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.RemoteMethodPB)
  // required string service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // required string method_name = 2;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), this->method_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.RemoteMethodPB)
  return target;
}

int RemoteMethodPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }

    // required string method_name = 2;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteMethodPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteMethodPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteMethodPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteMethodPB::MergeFrom(const RemoteMethodPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteMethodPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteMethodPB::CopyFrom(const RemoteMethodPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteMethodPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RemoteMethodPB::Swap(RemoteMethodPB* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(method_name_, other->method_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteMethodPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteMethodPB_descriptor_;
  metadata.reflection = RemoteMethodPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestIdPB::kClientIdFieldNumber;
const int RequestIdPB::kSeqNoFieldNumber;
const int RequestIdPB::kFirstIncompleteSeqNoFieldNumber;
const int RequestIdPB::kAttemptNoFieldNumber;
#endif  // !_MSC_VER

RequestIdPB::RequestIdPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.RequestIdPB)
}

void RequestIdPB::InitAsDefaultInstance() {
}

RequestIdPB::RequestIdPB(const RequestIdPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.RequestIdPB)
}

void RequestIdPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_no_ = GOOGLE_LONGLONG(0);
  first_incomplete_seq_no_ = GOOGLE_LONGLONG(0);
  attempt_no_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestIdPB::~RequestIdPB() {
  // @@protoc_insertion_point(destructor:ant.rpc.RequestIdPB)
  SharedDtor();
}

void RequestIdPB::SharedDtor() {
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_id_;
  }
  if (this != default_instance_) {
  }
}

void RequestIdPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestIdPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestIdPB_descriptor_;
}

const RequestIdPB& RequestIdPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fheader_2eproto();
  return *default_instance_;
}

RequestIdPB* RequestIdPB::default_instance_ = NULL;

RequestIdPB* RequestIdPB::New() const {
  return new RequestIdPB;
}

void RequestIdPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestIdPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(seq_no_, attempt_no_);
    if (has_client_id()) {
      if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestIdPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.RequestIdPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string client_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq_no;
        break;
      }

      // required int64 seq_no = 2;
      case 2: {
        if (tag == 16) {
         parse_seq_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_no_)));
          set_has_seq_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_first_incomplete_seq_no;
        break;
      }

      // required int64 first_incomplete_seq_no = 3;
      case 3: {
        if (tag == 24) {
         parse_first_incomplete_seq_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_incomplete_seq_no_)));
          set_has_first_incomplete_seq_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attempt_no;
        break;
      }

      // required int64 attempt_no = 4;
      case 4: {
        if (tag == 32) {
         parse_attempt_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attempt_no_)));
          set_has_attempt_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.RequestIdPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.RequestIdPB)
  return false;
#undef DO_
}

void RequestIdPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.RequestIdPB)
  // required string client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // required int64 seq_no = 2;
  if (has_seq_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->seq_no(), output);
  }

  // required int64 first_incomplete_seq_no = 3;
  if (has_first_incomplete_seq_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->first_incomplete_seq_no(), output);
  }

  // required int64 attempt_no = 4;
  if (has_attempt_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->attempt_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.RequestIdPB)
}

::google::protobuf::uint8* RequestIdPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.RequestIdPB)
  // required string client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // required int64 seq_no = 2;
  if (has_seq_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->seq_no(), target);
  }

  // required int64 first_incomplete_seq_no = 3;
  if (has_first_incomplete_seq_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->first_incomplete_seq_no(), target);
  }

  // required int64 attempt_no = 4;
  if (has_attempt_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->attempt_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.RequestIdPB)
  return target;
}

int RequestIdPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_id());
    }

    // required int64 seq_no = 2;
    if (has_seq_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seq_no());
    }

    // required int64 first_incomplete_seq_no = 3;
    if (has_first_incomplete_seq_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->first_incomplete_seq_no());
    }

    // required int64 attempt_no = 4;
    if (has_attempt_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attempt_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestIdPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestIdPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestIdPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestIdPB::MergeFrom(const RequestIdPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_seq_no()) {
      set_seq_no(from.seq_no());
    }
    if (from.has_first_incomplete_seq_no()) {
      set_first_incomplete_seq_no(from.first_incomplete_seq_no());
    }
    if (from.has_attempt_no()) {
      set_attempt_no(from.attempt_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestIdPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestIdPB::CopyFrom(const RequestIdPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestIdPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RequestIdPB::Swap(RequestIdPB* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(seq_no_, other->seq_no_);
    std::swap(first_incomplete_seq_no_, other->first_incomplete_seq_no_);
    std::swap(attempt_no_, other->attempt_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestIdPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestIdPB_descriptor_;
  metadata.reflection = RequestIdPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestHeader::kCallIdFieldNumber;
const int RequestHeader::kRemoteMethodFieldNumber;
const int RequestHeader::kTimeoutMillisFieldNumber;
const int RequestHeader::kRequiredFeatureFlagsFieldNumber;
const int RequestHeader::kRequestIdFieldNumber;
#endif  // !_MSC_VER

RequestHeader::RequestHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.RequestHeader)
}

void RequestHeader::InitAsDefaultInstance() {
  remote_method_ = const_cast< ::ant::rpc::RemoteMethodPB*>(&::ant::rpc::RemoteMethodPB::default_instance());
  request_id_ = const_cast< ::ant::rpc::RequestIdPB*>(&::ant::rpc::RequestIdPB::default_instance());
}

RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.RequestHeader)
}

void RequestHeader::SharedCtor() {
  _cached_size_ = 0;
  call_id_ = 0;
  remote_method_ = NULL;
  timeout_millis_ = 0u;
  request_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:ant.rpc.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
  if (this != default_instance_) {
    delete remote_method_;
    delete request_id_;
  }
}

void RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHeader_descriptor_;
}

const RequestHeader& RequestHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fheader_2eproto();
  return *default_instance_;
}

RequestHeader* RequestHeader::default_instance_ = NULL;

RequestHeader* RequestHeader::New() const {
  return new RequestHeader;
}

void RequestHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RequestHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(call_id_, timeout_millis_);
    if (has_remote_method()) {
      if (remote_method_ != NULL) remote_method_->::ant::rpc::RemoteMethodPB::Clear();
    }
    if (has_request_id()) {
      if (request_id_ != NULL) request_id_->::ant::rpc::RequestIdPB::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  required_feature_flags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.RequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 call_id = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_id_)));
          set_has_call_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_remote_method;
        break;
      }

      // optional .ant.rpc.RemoteMethodPB remote_method = 6;
      case 6: {
        if (tag == 50) {
         parse_remote_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_method()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_timeout_millis;
        break;
      }

      // optional uint32 timeout_millis = 10;
      case 10: {
        if (tag == 80) {
         parse_timeout_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_millis_)));
          set_has_timeout_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_required_feature_flags;
        break;
      }

      // repeated uint32 required_feature_flags = 11;
      case 11: {
        if (tag == 88) {
         parse_required_feature_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_required_feature_flags())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_required_feature_flags())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_required_feature_flags;
        if (input->ExpectTag(122)) goto parse_request_id;
        break;
      }

      // optional .ant.rpc.RequestIdPB request_id = 15;
      case 15: {
        if (tag == 122) {
         parse_request_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.RequestHeader)
  return false;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.RequestHeader)
  // required int32 call_id = 3;
  if (has_call_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->call_id(), output);
  }

  // optional .ant.rpc.RemoteMethodPB remote_method = 6;
  if (has_remote_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->remote_method(), output);
  }

  // optional uint32 timeout_millis = 10;
  if (has_timeout_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->timeout_millis(), output);
  }

  // repeated uint32 required_feature_flags = 11;
  for (int i = 0; i < this->required_feature_flags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->required_feature_flags(i), output);
  }

  // optional .ant.rpc.RequestIdPB request_id = 15;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->request_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.RequestHeader)
}

::google::protobuf::uint8* RequestHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.RequestHeader)
  // required int32 call_id = 3;
  if (has_call_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->call_id(), target);
  }

  // optional .ant.rpc.RemoteMethodPB remote_method = 6;
  if (has_remote_method()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->remote_method(), target);
  }

  // optional uint32 timeout_millis = 10;
  if (has_timeout_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->timeout_millis(), target);
  }

  // repeated uint32 required_feature_flags = 11;
  for (int i = 0; i < this->required_feature_flags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->required_feature_flags(i), target);
  }

  // optional .ant.rpc.RequestIdPB request_id = 15;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->request_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.RequestHeader)
  return target;
}

int RequestHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 call_id = 3;
    if (has_call_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_id());
    }

    // optional .ant.rpc.RemoteMethodPB remote_method = 6;
    if (has_remote_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_method());
    }

    // optional uint32 timeout_millis = 10;
    if (has_timeout_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout_millis());
    }

    // optional .ant.rpc.RequestIdPB request_id = 15;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_id());
    }

  }
  // repeated uint32 required_feature_flags = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->required_feature_flags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->required_feature_flags(i));
    }
    total_size += 1 * this->required_feature_flags_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  required_feature_flags_.MergeFrom(from.required_feature_flags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_call_id()) {
      set_call_id(from.call_id());
    }
    if (from.has_remote_method()) {
      mutable_remote_method()->::ant::rpc::RemoteMethodPB::MergeFrom(from.remote_method());
    }
    if (from.has_timeout_millis()) {
      set_timeout_millis(from.timeout_millis());
    }
    if (from.has_request_id()) {
      mutable_request_id()->::ant::rpc::RequestIdPB::MergeFrom(from.request_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_remote_method()) {
    if (!this->remote_method().IsInitialized()) return false;
  }
  if (has_request_id()) {
    if (!this->request_id().IsInitialized()) return false;
  }
  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other != this) {
    std::swap(call_id_, other->call_id_);
    std::swap(remote_method_, other->remote_method_);
    std::swap(timeout_millis_, other->timeout_millis_);
    required_feature_flags_.Swap(&other->required_feature_flags_);
    std::swap(request_id_, other->request_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHeader_descriptor_;
  metadata.reflection = RequestHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseHeader::kCallIdFieldNumber;
const int ResponseHeader::kIsErrorFieldNumber;
const int ResponseHeader::kSidecarOffsetsFieldNumber;
#endif  // !_MSC_VER

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.ResponseHeader)
}

void ResponseHeader::InitAsDefaultInstance() {
}

ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  _cached_size_ = 0;
  call_id_ = 0;
  is_error_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:ant.rpc.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseHeader_descriptor_;
}

const ResponseHeader& ResponseHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fheader_2eproto();
  return *default_instance_;
}

ResponseHeader* ResponseHeader::default_instance_ = NULL;

ResponseHeader* ResponseHeader::New() const {
  return new ResponseHeader;
}

void ResponseHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResponseHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(call_id_, is_error_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  sidecar_offsets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.ResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 call_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_id_)));
          set_has_call_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_error;
        break;
      }

      // optional bool is_error = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_is_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_error_)));
          set_has_is_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sidecar_offsets;
        break;
      }

      // repeated uint32 sidecar_offsets = 3;
      case 3: {
        if (tag == 24) {
         parse_sidecar_offsets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_sidecar_offsets())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sidecar_offsets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sidecar_offsets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.ResponseHeader)
  return false;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.ResponseHeader)
  // required int32 call_id = 1;
  if (has_call_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->call_id(), output);
  }

  // optional bool is_error = 2 [default = false];
  if (has_is_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_error(), output);
  }

  // repeated uint32 sidecar_offsets = 3;
  for (int i = 0; i < this->sidecar_offsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->sidecar_offsets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.ResponseHeader)
}

::google::protobuf::uint8* ResponseHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.ResponseHeader)
  // required int32 call_id = 1;
  if (has_call_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->call_id(), target);
  }

  // optional bool is_error = 2 [default = false];
  if (has_is_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_error(), target);
  }

  // repeated uint32 sidecar_offsets = 3;
  for (int i = 0; i < this->sidecar_offsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->sidecar_offsets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.ResponseHeader)
  return target;
}

int ResponseHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 call_id = 1;
    if (has_call_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_id());
    }

    // optional bool is_error = 2 [default = false];
    if (has_is_error()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 sidecar_offsets = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->sidecar_offsets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sidecar_offsets(i));
    }
    total_size += 1 * this->sidecar_offsets_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  sidecar_offsets_.MergeFrom(from.sidecar_offsets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_call_id()) {
      set_call_id(from.call_id());
    }
    if (from.has_is_error()) {
      set_is_error(from.is_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other != this) {
    std::swap(call_id_, other->call_id_);
    std::swap(is_error_, other->is_error_);
    sidecar_offsets_.Swap(&other->sidecar_offsets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseHeader_descriptor_;
  metadata.reflection = ResponseHeader_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ErrorStatusPB_RpcErrorCodePB_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorStatusPB_RpcErrorCodePB_descriptor_;
}
bool ErrorStatusPB_RpcErrorCodePB_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::FATAL_UNKNOWN;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::ERROR_APPLICATION;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::ERROR_NO_SUCH_METHOD;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::ERROR_NO_SUCH_SERVICE;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::ERROR_SERVER_TOO_BUSY;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::ERROR_INVALID_REQUEST;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::ERROR_REQUEST_STALE;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::FATAL_SERVER_SHUTTING_DOWN;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::FATAL_INVALID_RPC_HEADER;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::FATAL_DESERIALIZING_REQUEST;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::FATAL_VERSION_MISMATCH;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::FATAL_UNAUTHORIZED;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::RpcErrorCodePB_MIN;
const ErrorStatusPB_RpcErrorCodePB ErrorStatusPB::RpcErrorCodePB_MAX;
const int ErrorStatusPB::RpcErrorCodePB_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ErrorStatusPB::kMessageFieldNumber;
const int ErrorStatusPB::kCodeFieldNumber;
const int ErrorStatusPB::kUnsupportedFeatureFlagsFieldNumber;
#endif  // !_MSC_VER

ErrorStatusPB::ErrorStatusPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc.ErrorStatusPB)
}

void ErrorStatusPB::InitAsDefaultInstance() {
}

ErrorStatusPB::ErrorStatusPB(const ErrorStatusPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc.ErrorStatusPB)
}

void ErrorStatusPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorStatusPB::~ErrorStatusPB() {
  // @@protoc_insertion_point(destructor:ant.rpc.ErrorStatusPB)
  SharedDtor();
}

void ErrorStatusPB::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ErrorStatusPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorStatusPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorStatusPB_descriptor_;
}

const ErrorStatusPB& ErrorStatusPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5fheader_2eproto();
  return *default_instance_;
}

ErrorStatusPB* ErrorStatusPB::default_instance_ = NULL;

ErrorStatusPB* ErrorStatusPB::New() const {
  return new ErrorStatusPB;
}

void ErrorStatusPB::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    code_ = 10;
  }
  unsupported_feature_flags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorStatusPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc.ErrorStatusPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional .ant.rpc.ErrorStatusPB.RpcErrorCodePB code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ant::rpc::ErrorStatusPB_RpcErrorCodePB_IsValid(value)) {
            set_code(static_cast< ::ant::rpc::ErrorStatusPB_RpcErrorCodePB >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unsupported_feature_flags;
        break;
      }

      // repeated uint32 unsupported_feature_flags = 3;
      case 3: {
        if (tag == 24) {
         parse_unsupported_feature_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_unsupported_feature_flags())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unsupported_feature_flags())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unsupported_feature_flags;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc.ErrorStatusPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc.ErrorStatusPB)
  return false;
#undef DO_
}

void ErrorStatusPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc.ErrorStatusPB)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional .ant.rpc.ErrorStatusPB.RpcErrorCodePB code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  // repeated uint32 unsupported_feature_flags = 3;
  for (int i = 0; i < this->unsupported_feature_flags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->unsupported_feature_flags(i), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc.ErrorStatusPB)
}

::google::protobuf::uint8* ErrorStatusPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc.ErrorStatusPB)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional .ant.rpc.ErrorStatusPB.RpcErrorCodePB code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  // repeated uint32 unsupported_feature_flags = 3;
  for (int i = 0; i < this->unsupported_feature_flags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->unsupported_feature_flags(i), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc.ErrorStatusPB)
  return target;
}

int ErrorStatusPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .ant.rpc.ErrorStatusPB.RpcErrorCodePB code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

  }
  // repeated uint32 unsupported_feature_flags = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->unsupported_feature_flags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unsupported_feature_flags(i));
    }
    total_size += 1 * this->unsupported_feature_flags_size() + data_size;
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorStatusPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorStatusPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorStatusPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorStatusPB::MergeFrom(const ErrorStatusPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  unsupported_feature_flags_.MergeFrom(from.unsupported_feature_flags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorStatusPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorStatusPB::CopyFrom(const ErrorStatusPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorStatusPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ErrorStatusPB::Swap(ErrorStatusPB* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(code_, other->code_);
    unsupported_feature_flags_.Swap(&other->unsupported_feature_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ErrorStatusPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorStatusPB_descriptor_;
  metadata.reflection = ErrorStatusPB_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  track_rpc_result(kTrackRpcResultFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace ant

// @@protoc_insertion_point(global_scope)
