// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_introspection.proto

#ifndef PROTOBUF_rpc_5fintrospection_2eproto__INCLUDED
#define PROTOBUF_rpc_5fintrospection_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "rpc_header.pb.h"
// @@protoc_insertion_point(includes)

namespace ant {
namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_5fintrospection_2eproto();
void protobuf_AssignDesc_rpc_5fintrospection_2eproto();
void protobuf_ShutdownFile_rpc_5fintrospection_2eproto();

class RpcCallInProgressPB;
class RpcConnectionPB;
class DumpRunningRpcsRequestPB;
class DumpRunningRpcsResponsePB;
class TraceMetricPB;
class RpczSamplePB;
class RpczMethodPB;
class DumpRpczStoreRequestPB;
class DumpRpczStoreResponsePB;

enum RpcConnectionPB_StateType {
  RpcConnectionPB_StateType_UNKNOWN = 999,
  RpcConnectionPB_StateType_NEGOTIATING = 0,
  RpcConnectionPB_StateType_OPEN = 1
};
bool RpcConnectionPB_StateType_IsValid(int value);
const RpcConnectionPB_StateType RpcConnectionPB_StateType_StateType_MIN = RpcConnectionPB_StateType_NEGOTIATING;
const RpcConnectionPB_StateType RpcConnectionPB_StateType_StateType_MAX = RpcConnectionPB_StateType_UNKNOWN;
const int RpcConnectionPB_StateType_StateType_ARRAYSIZE = RpcConnectionPB_StateType_StateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcConnectionPB_StateType_descriptor();
inline const ::std::string& RpcConnectionPB_StateType_Name(RpcConnectionPB_StateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcConnectionPB_StateType_descriptor(), value);
}
inline bool RpcConnectionPB_StateType_Parse(
    const ::std::string& name, RpcConnectionPB_StateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcConnectionPB_StateType>(
    RpcConnectionPB_StateType_descriptor(), name, value);
}
// ===================================================================

class RpcCallInProgressPB : public ::google::protobuf::Message {
 public:
  RpcCallInProgressPB();
  virtual ~RpcCallInProgressPB();

  RpcCallInProgressPB(const RpcCallInProgressPB& from);

  inline RpcCallInProgressPB& operator=(const RpcCallInProgressPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcCallInProgressPB& default_instance();

  void Swap(RpcCallInProgressPB* other);

  // implements Message ----------------------------------------------

  RpcCallInProgressPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcCallInProgressPB& from);
  void MergeFrom(const RpcCallInProgressPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ant.rpc.RequestHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ant::rpc::RequestHeader& header() const;
  inline ::ant::rpc::RequestHeader* mutable_header();
  inline ::ant::rpc::RequestHeader* release_header();
  inline void set_allocated_header(::ant::rpc::RequestHeader* header);

  // optional string trace_buffer = 2;
  inline bool has_trace_buffer() const;
  inline void clear_trace_buffer();
  static const int kTraceBufferFieldNumber = 2;
  inline const ::std::string& trace_buffer() const;
  inline void set_trace_buffer(const ::std::string& value);
  inline void set_trace_buffer(const char* value);
  inline void set_trace_buffer(const char* value, size_t size);
  inline ::std::string* mutable_trace_buffer();
  inline ::std::string* release_trace_buffer();
  inline void set_allocated_trace_buffer(::std::string* trace_buffer);

  // optional uint64 micros_elapsed = 3;
  inline bool has_micros_elapsed() const;
  inline void clear_micros_elapsed();
  static const int kMicrosElapsedFieldNumber = 3;
  inline ::google::protobuf::uint64 micros_elapsed() const;
  inline void set_micros_elapsed(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ant.rpc.RpcCallInProgressPB)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_trace_buffer();
  inline void clear_has_trace_buffer();
  inline void set_has_micros_elapsed();
  inline void clear_has_micros_elapsed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ant::rpc::RequestHeader* header_;
  ::std::string* trace_buffer_;
  ::google::protobuf::uint64 micros_elapsed_;
  friend void  protobuf_AddDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_AssignDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fintrospection_2eproto();

  void InitAsDefaultInstance();
  static RpcCallInProgressPB* default_instance_;
};
// -------------------------------------------------------------------

class RpcConnectionPB : public ::google::protobuf::Message {
 public:
  RpcConnectionPB();
  virtual ~RpcConnectionPB();

  RpcConnectionPB(const RpcConnectionPB& from);

  inline RpcConnectionPB& operator=(const RpcConnectionPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcConnectionPB& default_instance();

  void Swap(RpcConnectionPB* other);

  // implements Message ----------------------------------------------

  RpcConnectionPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcConnectionPB& from);
  void MergeFrom(const RpcConnectionPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RpcConnectionPB_StateType StateType;
  static const StateType UNKNOWN = RpcConnectionPB_StateType_UNKNOWN;
  static const StateType NEGOTIATING = RpcConnectionPB_StateType_NEGOTIATING;
  static const StateType OPEN = RpcConnectionPB_StateType_OPEN;
  static inline bool StateType_IsValid(int value) {
    return RpcConnectionPB_StateType_IsValid(value);
  }
  static const StateType StateType_MIN =
    RpcConnectionPB_StateType_StateType_MIN;
  static const StateType StateType_MAX =
    RpcConnectionPB_StateType_StateType_MAX;
  static const int StateType_ARRAYSIZE =
    RpcConnectionPB_StateType_StateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StateType_descriptor() {
    return RpcConnectionPB_StateType_descriptor();
  }
  static inline const ::std::string& StateType_Name(StateType value) {
    return RpcConnectionPB_StateType_Name(value);
  }
  static inline bool StateType_Parse(const ::std::string& name,
      StateType* value) {
    return RpcConnectionPB_StateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string remote_ip = 1;
  inline bool has_remote_ip() const;
  inline void clear_remote_ip();
  static const int kRemoteIpFieldNumber = 1;
  inline const ::std::string& remote_ip() const;
  inline void set_remote_ip(const ::std::string& value);
  inline void set_remote_ip(const char* value);
  inline void set_remote_ip(const char* value, size_t size);
  inline ::std::string* mutable_remote_ip();
  inline ::std::string* release_remote_ip();
  inline void set_allocated_remote_ip(::std::string* remote_ip);

  // required .ant.rpc.RpcConnectionPB.StateType state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::ant::rpc::RpcConnectionPB_StateType state() const;
  inline void set_state(::ant::rpc::RpcConnectionPB_StateType value);

  // optional string remote_user_credentials = 3;
  inline bool has_remote_user_credentials() const;
  inline void clear_remote_user_credentials();
  static const int kRemoteUserCredentialsFieldNumber = 3;
  inline const ::std::string& remote_user_credentials() const;
  inline void set_remote_user_credentials(const ::std::string& value);
  inline void set_remote_user_credentials(const char* value);
  inline void set_remote_user_credentials(const char* value, size_t size);
  inline ::std::string* mutable_remote_user_credentials();
  inline ::std::string* release_remote_user_credentials();
  inline void set_allocated_remote_user_credentials(::std::string* remote_user_credentials);

  // repeated .ant.rpc.RpcCallInProgressPB calls_in_flight = 4;
  inline int calls_in_flight_size() const;
  inline void clear_calls_in_flight();
  static const int kCallsInFlightFieldNumber = 4;
  inline const ::ant::rpc::RpcCallInProgressPB& calls_in_flight(int index) const;
  inline ::ant::rpc::RpcCallInProgressPB* mutable_calls_in_flight(int index);
  inline ::ant::rpc::RpcCallInProgressPB* add_calls_in_flight();
  inline const ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcCallInProgressPB >&
      calls_in_flight() const;
  inline ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcCallInProgressPB >*
      mutable_calls_in_flight();

  // @@protoc_insertion_point(class_scope:ant.rpc.RpcConnectionPB)
 private:
  inline void set_has_remote_ip();
  inline void clear_has_remote_ip();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_remote_user_credentials();
  inline void clear_has_remote_user_credentials();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* remote_ip_;
  ::std::string* remote_user_credentials_;
  ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcCallInProgressPB > calls_in_flight_;
  int state_;
  friend void  protobuf_AddDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_AssignDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fintrospection_2eproto();

  void InitAsDefaultInstance();
  static RpcConnectionPB* default_instance_;
};
// -------------------------------------------------------------------

class DumpRunningRpcsRequestPB : public ::google::protobuf::Message {
 public:
  DumpRunningRpcsRequestPB();
  virtual ~DumpRunningRpcsRequestPB();

  DumpRunningRpcsRequestPB(const DumpRunningRpcsRequestPB& from);

  inline DumpRunningRpcsRequestPB& operator=(const DumpRunningRpcsRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpRunningRpcsRequestPB& default_instance();

  void Swap(DumpRunningRpcsRequestPB* other);

  // implements Message ----------------------------------------------

  DumpRunningRpcsRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DumpRunningRpcsRequestPB& from);
  void MergeFrom(const DumpRunningRpcsRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool include_traces = 1 [default = false];
  inline bool has_include_traces() const;
  inline void clear_include_traces();
  static const int kIncludeTracesFieldNumber = 1;
  inline bool include_traces() const;
  inline void set_include_traces(bool value);

  // @@protoc_insertion_point(class_scope:ant.rpc.DumpRunningRpcsRequestPB)
 private:
  inline void set_has_include_traces();
  inline void clear_has_include_traces();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool include_traces_;
  friend void  protobuf_AddDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_AssignDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fintrospection_2eproto();

  void InitAsDefaultInstance();
  static DumpRunningRpcsRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class DumpRunningRpcsResponsePB : public ::google::protobuf::Message {
 public:
  DumpRunningRpcsResponsePB();
  virtual ~DumpRunningRpcsResponsePB();

  DumpRunningRpcsResponsePB(const DumpRunningRpcsResponsePB& from);

  inline DumpRunningRpcsResponsePB& operator=(const DumpRunningRpcsResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpRunningRpcsResponsePB& default_instance();

  void Swap(DumpRunningRpcsResponsePB* other);

  // implements Message ----------------------------------------------

  DumpRunningRpcsResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DumpRunningRpcsResponsePB& from);
  void MergeFrom(const DumpRunningRpcsResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ant.rpc.RpcConnectionPB inbound_connections = 1;
  inline int inbound_connections_size() const;
  inline void clear_inbound_connections();
  static const int kInboundConnectionsFieldNumber = 1;
  inline const ::ant::rpc::RpcConnectionPB& inbound_connections(int index) const;
  inline ::ant::rpc::RpcConnectionPB* mutable_inbound_connections(int index);
  inline ::ant::rpc::RpcConnectionPB* add_inbound_connections();
  inline const ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcConnectionPB >&
      inbound_connections() const;
  inline ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcConnectionPB >*
      mutable_inbound_connections();

  // repeated .ant.rpc.RpcConnectionPB outbound_connections = 2;
  inline int outbound_connections_size() const;
  inline void clear_outbound_connections();
  static const int kOutboundConnectionsFieldNumber = 2;
  inline const ::ant::rpc::RpcConnectionPB& outbound_connections(int index) const;
  inline ::ant::rpc::RpcConnectionPB* mutable_outbound_connections(int index);
  inline ::ant::rpc::RpcConnectionPB* add_outbound_connections();
  inline const ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcConnectionPB >&
      outbound_connections() const;
  inline ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcConnectionPB >*
      mutable_outbound_connections();

  // @@protoc_insertion_point(class_scope:ant.rpc.DumpRunningRpcsResponsePB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcConnectionPB > inbound_connections_;
  ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcConnectionPB > outbound_connections_;
  friend void  protobuf_AddDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_AssignDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fintrospection_2eproto();

  void InitAsDefaultInstance();
  static DumpRunningRpcsResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class TraceMetricPB : public ::google::protobuf::Message {
 public:
  TraceMetricPB();
  virtual ~TraceMetricPB();

  TraceMetricPB(const TraceMetricPB& from);

  inline TraceMetricPB& operator=(const TraceMetricPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceMetricPB& default_instance();

  void Swap(TraceMetricPB* other);

  // implements Message ----------------------------------------------

  TraceMetricPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TraceMetricPB& from);
  void MergeFrom(const TraceMetricPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string child_path = 1;
  inline bool has_child_path() const;
  inline void clear_child_path();
  static const int kChildPathFieldNumber = 1;
  inline const ::std::string& child_path() const;
  inline void set_child_path(const ::std::string& value);
  inline void set_child_path(const char* value);
  inline void set_child_path(const char* value, size_t size);
  inline ::std::string* mutable_child_path();
  inline ::std::string* release_child_path();
  inline void set_allocated_child_path(::std::string* child_path);

  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional int64 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ant.rpc.TraceMetricPB)
 private:
  inline void set_has_child_path();
  inline void clear_has_child_path();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* child_path_;
  ::std::string* key_;
  ::google::protobuf::int64 value_;
  friend void  protobuf_AddDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_AssignDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fintrospection_2eproto();

  void InitAsDefaultInstance();
  static TraceMetricPB* default_instance_;
};
// -------------------------------------------------------------------

class RpczSamplePB : public ::google::protobuf::Message {
 public:
  RpczSamplePB();
  virtual ~RpczSamplePB();

  RpczSamplePB(const RpczSamplePB& from);

  inline RpczSamplePB& operator=(const RpczSamplePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpczSamplePB& default_instance();

  void Swap(RpczSamplePB* other);

  // implements Message ----------------------------------------------

  RpczSamplePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpczSamplePB& from);
  void MergeFrom(const RpczSamplePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ant.rpc.RequestHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::ant::rpc::RequestHeader& header() const;
  inline ::ant::rpc::RequestHeader* mutable_header();
  inline ::ant::rpc::RequestHeader* release_header();
  inline void set_allocated_header(::ant::rpc::RequestHeader* header);

  // optional string trace = 2;
  inline bool has_trace() const;
  inline void clear_trace();
  static const int kTraceFieldNumber = 2;
  inline const ::std::string& trace() const;
  inline void set_trace(const ::std::string& value);
  inline void set_trace(const char* value);
  inline void set_trace(const char* value, size_t size);
  inline ::std::string* mutable_trace();
  inline ::std::string* release_trace();
  inline void set_allocated_trace(::std::string* trace);

  // optional int32 duration_ms = 3;
  inline bool has_duration_ms() const;
  inline void clear_duration_ms();
  static const int kDurationMsFieldNumber = 3;
  inline ::google::protobuf::int32 duration_ms() const;
  inline void set_duration_ms(::google::protobuf::int32 value);

  // repeated .ant.rpc.TraceMetricPB metrics = 4;
  inline int metrics_size() const;
  inline void clear_metrics();
  static const int kMetricsFieldNumber = 4;
  inline const ::ant::rpc::TraceMetricPB& metrics(int index) const;
  inline ::ant::rpc::TraceMetricPB* mutable_metrics(int index);
  inline ::ant::rpc::TraceMetricPB* add_metrics();
  inline const ::google::protobuf::RepeatedPtrField< ::ant::rpc::TraceMetricPB >&
      metrics() const;
  inline ::google::protobuf::RepeatedPtrField< ::ant::rpc::TraceMetricPB >*
      mutable_metrics();

  // @@protoc_insertion_point(class_scope:ant.rpc.RpczSamplePB)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_trace();
  inline void clear_has_trace();
  inline void set_has_duration_ms();
  inline void clear_has_duration_ms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ant::rpc::RequestHeader* header_;
  ::std::string* trace_;
  ::google::protobuf::RepeatedPtrField< ::ant::rpc::TraceMetricPB > metrics_;
  ::google::protobuf::int32 duration_ms_;
  friend void  protobuf_AddDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_AssignDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fintrospection_2eproto();

  void InitAsDefaultInstance();
  static RpczSamplePB* default_instance_;
};
// -------------------------------------------------------------------

class RpczMethodPB : public ::google::protobuf::Message {
 public:
  RpczMethodPB();
  virtual ~RpczMethodPB();

  RpczMethodPB(const RpczMethodPB& from);

  inline RpczMethodPB& operator=(const RpczMethodPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpczMethodPB& default_instance();

  void Swap(RpczMethodPB* other);

  // implements Message ----------------------------------------------

  RpczMethodPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpczMethodPB& from);
  void MergeFrom(const RpczMethodPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string method_name = 1;
  inline bool has_method_name() const;
  inline void clear_method_name();
  static const int kMethodNameFieldNumber = 1;
  inline const ::std::string& method_name() const;
  inline void set_method_name(const ::std::string& value);
  inline void set_method_name(const char* value);
  inline void set_method_name(const char* value, size_t size);
  inline ::std::string* mutable_method_name();
  inline ::std::string* release_method_name();
  inline void set_allocated_method_name(::std::string* method_name);

  // repeated .ant.rpc.RpczSamplePB samples = 2;
  inline int samples_size() const;
  inline void clear_samples();
  static const int kSamplesFieldNumber = 2;
  inline const ::ant::rpc::RpczSamplePB& samples(int index) const;
  inline ::ant::rpc::RpczSamplePB* mutable_samples(int index);
  inline ::ant::rpc::RpczSamplePB* add_samples();
  inline const ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpczSamplePB >&
      samples() const;
  inline ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpczSamplePB >*
      mutable_samples();

  // @@protoc_insertion_point(class_scope:ant.rpc.RpczMethodPB)
 private:
  inline void set_has_method_name();
  inline void clear_has_method_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* method_name_;
  ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpczSamplePB > samples_;
  friend void  protobuf_AddDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_AssignDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fintrospection_2eproto();

  void InitAsDefaultInstance();
  static RpczMethodPB* default_instance_;
};
// -------------------------------------------------------------------

class DumpRpczStoreRequestPB : public ::google::protobuf::Message {
 public:
  DumpRpczStoreRequestPB();
  virtual ~DumpRpczStoreRequestPB();

  DumpRpczStoreRequestPB(const DumpRpczStoreRequestPB& from);

  inline DumpRpczStoreRequestPB& operator=(const DumpRpczStoreRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpRpczStoreRequestPB& default_instance();

  void Swap(DumpRpczStoreRequestPB* other);

  // implements Message ----------------------------------------------

  DumpRpczStoreRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DumpRpczStoreRequestPB& from);
  void MergeFrom(const DumpRpczStoreRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ant.rpc.DumpRpczStoreRequestPB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_AssignDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fintrospection_2eproto();

  void InitAsDefaultInstance();
  static DumpRpczStoreRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class DumpRpczStoreResponsePB : public ::google::protobuf::Message {
 public:
  DumpRpczStoreResponsePB();
  virtual ~DumpRpczStoreResponsePB();

  DumpRpczStoreResponsePB(const DumpRpczStoreResponsePB& from);

  inline DumpRpczStoreResponsePB& operator=(const DumpRpczStoreResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpRpczStoreResponsePB& default_instance();

  void Swap(DumpRpczStoreResponsePB* other);

  // implements Message ----------------------------------------------

  DumpRpczStoreResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DumpRpczStoreResponsePB& from);
  void MergeFrom(const DumpRpczStoreResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ant.rpc.RpczMethodPB methods = 1;
  inline int methods_size() const;
  inline void clear_methods();
  static const int kMethodsFieldNumber = 1;
  inline const ::ant::rpc::RpczMethodPB& methods(int index) const;
  inline ::ant::rpc::RpczMethodPB* mutable_methods(int index);
  inline ::ant::rpc::RpczMethodPB* add_methods();
  inline const ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpczMethodPB >&
      methods() const;
  inline ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpczMethodPB >*
      mutable_methods();

  // @@protoc_insertion_point(class_scope:ant.rpc.DumpRpczStoreResponsePB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpczMethodPB > methods_;
  friend void  protobuf_AddDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_AssignDesc_rpc_5fintrospection_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fintrospection_2eproto();

  void InitAsDefaultInstance();
  static DumpRpczStoreResponsePB* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcCallInProgressPB

// required .ant.rpc.RequestHeader header = 1;
inline bool RpcCallInProgressPB::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcCallInProgressPB::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcCallInProgressPB::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcCallInProgressPB::clear_header() {
  if (header_ != NULL) header_->::ant::rpc::RequestHeader::Clear();
  clear_has_header();
}
inline const ::ant::rpc::RequestHeader& RpcCallInProgressPB::header() const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpcCallInProgressPB.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ant::rpc::RequestHeader* RpcCallInProgressPB::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ant::rpc::RequestHeader;
  // @@protoc_insertion_point(field_mutable:ant.rpc.RpcCallInProgressPB.header)
  return header_;
}
inline ::ant::rpc::RequestHeader* RpcCallInProgressPB::release_header() {
  clear_has_header();
  ::ant::rpc::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RpcCallInProgressPB::set_allocated_header(::ant::rpc::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.rpc.RpcCallInProgressPB.header)
}

// optional string trace_buffer = 2;
inline bool RpcCallInProgressPB::has_trace_buffer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcCallInProgressPB::set_has_trace_buffer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcCallInProgressPB::clear_has_trace_buffer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcCallInProgressPB::clear_trace_buffer() {
  if (trace_buffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_buffer_->clear();
  }
  clear_has_trace_buffer();
}
inline const ::std::string& RpcCallInProgressPB::trace_buffer() const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpcCallInProgressPB.trace_buffer)
  return *trace_buffer_;
}
inline void RpcCallInProgressPB::set_trace_buffer(const ::std::string& value) {
  set_has_trace_buffer();
  if (trace_buffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_buffer_ = new ::std::string;
  }
  trace_buffer_->assign(value);
  // @@protoc_insertion_point(field_set:ant.rpc.RpcCallInProgressPB.trace_buffer)
}
inline void RpcCallInProgressPB::set_trace_buffer(const char* value) {
  set_has_trace_buffer();
  if (trace_buffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_buffer_ = new ::std::string;
  }
  trace_buffer_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.rpc.RpcCallInProgressPB.trace_buffer)
}
inline void RpcCallInProgressPB::set_trace_buffer(const char* value, size_t size) {
  set_has_trace_buffer();
  if (trace_buffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_buffer_ = new ::std::string;
  }
  trace_buffer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.rpc.RpcCallInProgressPB.trace_buffer)
}
inline ::std::string* RpcCallInProgressPB::mutable_trace_buffer() {
  set_has_trace_buffer();
  if (trace_buffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_buffer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.rpc.RpcCallInProgressPB.trace_buffer)
  return trace_buffer_;
}
inline ::std::string* RpcCallInProgressPB::release_trace_buffer() {
  clear_has_trace_buffer();
  if (trace_buffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = trace_buffer_;
    trace_buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcCallInProgressPB::set_allocated_trace_buffer(::std::string* trace_buffer) {
  if (trace_buffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trace_buffer_;
  }
  if (trace_buffer) {
    set_has_trace_buffer();
    trace_buffer_ = trace_buffer;
  } else {
    clear_has_trace_buffer();
    trace_buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.rpc.RpcCallInProgressPB.trace_buffer)
}

// optional uint64 micros_elapsed = 3;
inline bool RpcCallInProgressPB::has_micros_elapsed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcCallInProgressPB::set_has_micros_elapsed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcCallInProgressPB::clear_has_micros_elapsed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcCallInProgressPB::clear_micros_elapsed() {
  micros_elapsed_ = GOOGLE_ULONGLONG(0);
  clear_has_micros_elapsed();
}
inline ::google::protobuf::uint64 RpcCallInProgressPB::micros_elapsed() const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpcCallInProgressPB.micros_elapsed)
  return micros_elapsed_;
}
inline void RpcCallInProgressPB::set_micros_elapsed(::google::protobuf::uint64 value) {
  set_has_micros_elapsed();
  micros_elapsed_ = value;
  // @@protoc_insertion_point(field_set:ant.rpc.RpcCallInProgressPB.micros_elapsed)
}

// -------------------------------------------------------------------

// RpcConnectionPB

// required string remote_ip = 1;
inline bool RpcConnectionPB::has_remote_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcConnectionPB::set_has_remote_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcConnectionPB::clear_has_remote_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcConnectionPB::clear_remote_ip() {
  if (remote_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remote_ip_->clear();
  }
  clear_has_remote_ip();
}
inline const ::std::string& RpcConnectionPB::remote_ip() const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpcConnectionPB.remote_ip)
  return *remote_ip_;
}
inline void RpcConnectionPB::set_remote_ip(const ::std::string& value) {
  set_has_remote_ip();
  if (remote_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remote_ip_ = new ::std::string;
  }
  remote_ip_->assign(value);
  // @@protoc_insertion_point(field_set:ant.rpc.RpcConnectionPB.remote_ip)
}
inline void RpcConnectionPB::set_remote_ip(const char* value) {
  set_has_remote_ip();
  if (remote_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remote_ip_ = new ::std::string;
  }
  remote_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.rpc.RpcConnectionPB.remote_ip)
}
inline void RpcConnectionPB::set_remote_ip(const char* value, size_t size) {
  set_has_remote_ip();
  if (remote_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remote_ip_ = new ::std::string;
  }
  remote_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.rpc.RpcConnectionPB.remote_ip)
}
inline ::std::string* RpcConnectionPB::mutable_remote_ip() {
  set_has_remote_ip();
  if (remote_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remote_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.rpc.RpcConnectionPB.remote_ip)
  return remote_ip_;
}
inline ::std::string* RpcConnectionPB::release_remote_ip() {
  clear_has_remote_ip();
  if (remote_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = remote_ip_;
    remote_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcConnectionPB::set_allocated_remote_ip(::std::string* remote_ip) {
  if (remote_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remote_ip_;
  }
  if (remote_ip) {
    set_has_remote_ip();
    remote_ip_ = remote_ip;
  } else {
    clear_has_remote_ip();
    remote_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.rpc.RpcConnectionPB.remote_ip)
}

// required .ant.rpc.RpcConnectionPB.StateType state = 2;
inline bool RpcConnectionPB::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcConnectionPB::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcConnectionPB::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcConnectionPB::clear_state() {
  state_ = 999;
  clear_has_state();
}
inline ::ant::rpc::RpcConnectionPB_StateType RpcConnectionPB::state() const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpcConnectionPB.state)
  return static_cast< ::ant::rpc::RpcConnectionPB_StateType >(state_);
}
inline void RpcConnectionPB::set_state(::ant::rpc::RpcConnectionPB_StateType value) {
  assert(::ant::rpc::RpcConnectionPB_StateType_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:ant.rpc.RpcConnectionPB.state)
}

// optional string remote_user_credentials = 3;
inline bool RpcConnectionPB::has_remote_user_credentials() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcConnectionPB::set_has_remote_user_credentials() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcConnectionPB::clear_has_remote_user_credentials() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcConnectionPB::clear_remote_user_credentials() {
  if (remote_user_credentials_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remote_user_credentials_->clear();
  }
  clear_has_remote_user_credentials();
}
inline const ::std::string& RpcConnectionPB::remote_user_credentials() const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpcConnectionPB.remote_user_credentials)
  return *remote_user_credentials_;
}
inline void RpcConnectionPB::set_remote_user_credentials(const ::std::string& value) {
  set_has_remote_user_credentials();
  if (remote_user_credentials_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remote_user_credentials_ = new ::std::string;
  }
  remote_user_credentials_->assign(value);
  // @@protoc_insertion_point(field_set:ant.rpc.RpcConnectionPB.remote_user_credentials)
}
inline void RpcConnectionPB::set_remote_user_credentials(const char* value) {
  set_has_remote_user_credentials();
  if (remote_user_credentials_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remote_user_credentials_ = new ::std::string;
  }
  remote_user_credentials_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.rpc.RpcConnectionPB.remote_user_credentials)
}
inline void RpcConnectionPB::set_remote_user_credentials(const char* value, size_t size) {
  set_has_remote_user_credentials();
  if (remote_user_credentials_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remote_user_credentials_ = new ::std::string;
  }
  remote_user_credentials_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.rpc.RpcConnectionPB.remote_user_credentials)
}
inline ::std::string* RpcConnectionPB::mutable_remote_user_credentials() {
  set_has_remote_user_credentials();
  if (remote_user_credentials_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    remote_user_credentials_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.rpc.RpcConnectionPB.remote_user_credentials)
  return remote_user_credentials_;
}
inline ::std::string* RpcConnectionPB::release_remote_user_credentials() {
  clear_has_remote_user_credentials();
  if (remote_user_credentials_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = remote_user_credentials_;
    remote_user_credentials_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcConnectionPB::set_allocated_remote_user_credentials(::std::string* remote_user_credentials) {
  if (remote_user_credentials_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remote_user_credentials_;
  }
  if (remote_user_credentials) {
    set_has_remote_user_credentials();
    remote_user_credentials_ = remote_user_credentials;
  } else {
    clear_has_remote_user_credentials();
    remote_user_credentials_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.rpc.RpcConnectionPB.remote_user_credentials)
}

// repeated .ant.rpc.RpcCallInProgressPB calls_in_flight = 4;
inline int RpcConnectionPB::calls_in_flight_size() const {
  return calls_in_flight_.size();
}
inline void RpcConnectionPB::clear_calls_in_flight() {
  calls_in_flight_.Clear();
}
inline const ::ant::rpc::RpcCallInProgressPB& RpcConnectionPB::calls_in_flight(int index) const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpcConnectionPB.calls_in_flight)
  return calls_in_flight_.Get(index);
}
inline ::ant::rpc::RpcCallInProgressPB* RpcConnectionPB::mutable_calls_in_flight(int index) {
  // @@protoc_insertion_point(field_mutable:ant.rpc.RpcConnectionPB.calls_in_flight)
  return calls_in_flight_.Mutable(index);
}
inline ::ant::rpc::RpcCallInProgressPB* RpcConnectionPB::add_calls_in_flight() {
  // @@protoc_insertion_point(field_add:ant.rpc.RpcConnectionPB.calls_in_flight)
  return calls_in_flight_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcCallInProgressPB >&
RpcConnectionPB::calls_in_flight() const {
  // @@protoc_insertion_point(field_list:ant.rpc.RpcConnectionPB.calls_in_flight)
  return calls_in_flight_;
}
inline ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcCallInProgressPB >*
RpcConnectionPB::mutable_calls_in_flight() {
  // @@protoc_insertion_point(field_mutable_list:ant.rpc.RpcConnectionPB.calls_in_flight)
  return &calls_in_flight_;
}

// -------------------------------------------------------------------

// DumpRunningRpcsRequestPB

// optional bool include_traces = 1 [default = false];
inline bool DumpRunningRpcsRequestPB::has_include_traces() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DumpRunningRpcsRequestPB::set_has_include_traces() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DumpRunningRpcsRequestPB::clear_has_include_traces() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DumpRunningRpcsRequestPB::clear_include_traces() {
  include_traces_ = false;
  clear_has_include_traces();
}
inline bool DumpRunningRpcsRequestPB::include_traces() const {
  // @@protoc_insertion_point(field_get:ant.rpc.DumpRunningRpcsRequestPB.include_traces)
  return include_traces_;
}
inline void DumpRunningRpcsRequestPB::set_include_traces(bool value) {
  set_has_include_traces();
  include_traces_ = value;
  // @@protoc_insertion_point(field_set:ant.rpc.DumpRunningRpcsRequestPB.include_traces)
}

// -------------------------------------------------------------------

// DumpRunningRpcsResponsePB

// repeated .ant.rpc.RpcConnectionPB inbound_connections = 1;
inline int DumpRunningRpcsResponsePB::inbound_connections_size() const {
  return inbound_connections_.size();
}
inline void DumpRunningRpcsResponsePB::clear_inbound_connections() {
  inbound_connections_.Clear();
}
inline const ::ant::rpc::RpcConnectionPB& DumpRunningRpcsResponsePB::inbound_connections(int index) const {
  // @@protoc_insertion_point(field_get:ant.rpc.DumpRunningRpcsResponsePB.inbound_connections)
  return inbound_connections_.Get(index);
}
inline ::ant::rpc::RpcConnectionPB* DumpRunningRpcsResponsePB::mutable_inbound_connections(int index) {
  // @@protoc_insertion_point(field_mutable:ant.rpc.DumpRunningRpcsResponsePB.inbound_connections)
  return inbound_connections_.Mutable(index);
}
inline ::ant::rpc::RpcConnectionPB* DumpRunningRpcsResponsePB::add_inbound_connections() {
  // @@protoc_insertion_point(field_add:ant.rpc.DumpRunningRpcsResponsePB.inbound_connections)
  return inbound_connections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcConnectionPB >&
DumpRunningRpcsResponsePB::inbound_connections() const {
  // @@protoc_insertion_point(field_list:ant.rpc.DumpRunningRpcsResponsePB.inbound_connections)
  return inbound_connections_;
}
inline ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcConnectionPB >*
DumpRunningRpcsResponsePB::mutable_inbound_connections() {
  // @@protoc_insertion_point(field_mutable_list:ant.rpc.DumpRunningRpcsResponsePB.inbound_connections)
  return &inbound_connections_;
}

// repeated .ant.rpc.RpcConnectionPB outbound_connections = 2;
inline int DumpRunningRpcsResponsePB::outbound_connections_size() const {
  return outbound_connections_.size();
}
inline void DumpRunningRpcsResponsePB::clear_outbound_connections() {
  outbound_connections_.Clear();
}
inline const ::ant::rpc::RpcConnectionPB& DumpRunningRpcsResponsePB::outbound_connections(int index) const {
  // @@protoc_insertion_point(field_get:ant.rpc.DumpRunningRpcsResponsePB.outbound_connections)
  return outbound_connections_.Get(index);
}
inline ::ant::rpc::RpcConnectionPB* DumpRunningRpcsResponsePB::mutable_outbound_connections(int index) {
  // @@protoc_insertion_point(field_mutable:ant.rpc.DumpRunningRpcsResponsePB.outbound_connections)
  return outbound_connections_.Mutable(index);
}
inline ::ant::rpc::RpcConnectionPB* DumpRunningRpcsResponsePB::add_outbound_connections() {
  // @@protoc_insertion_point(field_add:ant.rpc.DumpRunningRpcsResponsePB.outbound_connections)
  return outbound_connections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcConnectionPB >&
DumpRunningRpcsResponsePB::outbound_connections() const {
  // @@protoc_insertion_point(field_list:ant.rpc.DumpRunningRpcsResponsePB.outbound_connections)
  return outbound_connections_;
}
inline ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpcConnectionPB >*
DumpRunningRpcsResponsePB::mutable_outbound_connections() {
  // @@protoc_insertion_point(field_mutable_list:ant.rpc.DumpRunningRpcsResponsePB.outbound_connections)
  return &outbound_connections_;
}

// -------------------------------------------------------------------

// TraceMetricPB

// optional string child_path = 1;
inline bool TraceMetricPB::has_child_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TraceMetricPB::set_has_child_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TraceMetricPB::clear_has_child_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TraceMetricPB::clear_child_path() {
  if (child_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    child_path_->clear();
  }
  clear_has_child_path();
}
inline const ::std::string& TraceMetricPB::child_path() const {
  // @@protoc_insertion_point(field_get:ant.rpc.TraceMetricPB.child_path)
  return *child_path_;
}
inline void TraceMetricPB::set_child_path(const ::std::string& value) {
  set_has_child_path();
  if (child_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    child_path_ = new ::std::string;
  }
  child_path_->assign(value);
  // @@protoc_insertion_point(field_set:ant.rpc.TraceMetricPB.child_path)
}
inline void TraceMetricPB::set_child_path(const char* value) {
  set_has_child_path();
  if (child_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    child_path_ = new ::std::string;
  }
  child_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.rpc.TraceMetricPB.child_path)
}
inline void TraceMetricPB::set_child_path(const char* value, size_t size) {
  set_has_child_path();
  if (child_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    child_path_ = new ::std::string;
  }
  child_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.rpc.TraceMetricPB.child_path)
}
inline ::std::string* TraceMetricPB::mutable_child_path() {
  set_has_child_path();
  if (child_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    child_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.rpc.TraceMetricPB.child_path)
  return child_path_;
}
inline ::std::string* TraceMetricPB::release_child_path() {
  clear_has_child_path();
  if (child_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = child_path_;
    child_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TraceMetricPB::set_allocated_child_path(::std::string* child_path) {
  if (child_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete child_path_;
  }
  if (child_path) {
    set_has_child_path();
    child_path_ = child_path;
  } else {
    clear_has_child_path();
    child_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.rpc.TraceMetricPB.child_path)
}

// optional string key = 2;
inline bool TraceMetricPB::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TraceMetricPB::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TraceMetricPB::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TraceMetricPB::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& TraceMetricPB::key() const {
  // @@protoc_insertion_point(field_get:ant.rpc.TraceMetricPB.key)
  return *key_;
}
inline void TraceMetricPB::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:ant.rpc.TraceMetricPB.key)
}
inline void TraceMetricPB::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.rpc.TraceMetricPB.key)
}
inline void TraceMetricPB::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.rpc.TraceMetricPB.key)
}
inline ::std::string* TraceMetricPB::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.rpc.TraceMetricPB.key)
  return key_;
}
inline ::std::string* TraceMetricPB::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TraceMetricPB::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.rpc.TraceMetricPB.key)
}

// optional int64 value = 3;
inline bool TraceMetricPB::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TraceMetricPB::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TraceMetricPB::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TraceMetricPB::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 TraceMetricPB::value() const {
  // @@protoc_insertion_point(field_get:ant.rpc.TraceMetricPB.value)
  return value_;
}
inline void TraceMetricPB::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ant.rpc.TraceMetricPB.value)
}

// -------------------------------------------------------------------

// RpczSamplePB

// optional .ant.rpc.RequestHeader header = 1;
inline bool RpczSamplePB::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpczSamplePB::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpczSamplePB::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpczSamplePB::clear_header() {
  if (header_ != NULL) header_->::ant::rpc::RequestHeader::Clear();
  clear_has_header();
}
inline const ::ant::rpc::RequestHeader& RpczSamplePB::header() const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpczSamplePB.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::ant::rpc::RequestHeader* RpczSamplePB::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::ant::rpc::RequestHeader;
  // @@protoc_insertion_point(field_mutable:ant.rpc.RpczSamplePB.header)
  return header_;
}
inline ::ant::rpc::RequestHeader* RpczSamplePB::release_header() {
  clear_has_header();
  ::ant::rpc::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void RpczSamplePB::set_allocated_header(::ant::rpc::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.rpc.RpczSamplePB.header)
}

// optional string trace = 2;
inline bool RpczSamplePB::has_trace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpczSamplePB::set_has_trace() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpczSamplePB::clear_has_trace() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpczSamplePB::clear_trace() {
  if (trace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_->clear();
  }
  clear_has_trace();
}
inline const ::std::string& RpczSamplePB::trace() const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpczSamplePB.trace)
  return *trace_;
}
inline void RpczSamplePB::set_trace(const ::std::string& value) {
  set_has_trace();
  if (trace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_ = new ::std::string;
  }
  trace_->assign(value);
  // @@protoc_insertion_point(field_set:ant.rpc.RpczSamplePB.trace)
}
inline void RpczSamplePB::set_trace(const char* value) {
  set_has_trace();
  if (trace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_ = new ::std::string;
  }
  trace_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.rpc.RpczSamplePB.trace)
}
inline void RpczSamplePB::set_trace(const char* value, size_t size) {
  set_has_trace();
  if (trace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_ = new ::std::string;
  }
  trace_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.rpc.RpczSamplePB.trace)
}
inline ::std::string* RpczSamplePB::mutable_trace() {
  set_has_trace();
  if (trace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trace_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.rpc.RpczSamplePB.trace)
  return trace_;
}
inline ::std::string* RpczSamplePB::release_trace() {
  clear_has_trace();
  if (trace_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = trace_;
    trace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpczSamplePB::set_allocated_trace(::std::string* trace) {
  if (trace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trace_;
  }
  if (trace) {
    set_has_trace();
    trace_ = trace;
  } else {
    clear_has_trace();
    trace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.rpc.RpczSamplePB.trace)
}

// optional int32 duration_ms = 3;
inline bool RpczSamplePB::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpczSamplePB::set_has_duration_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpczSamplePB::clear_has_duration_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpczSamplePB::clear_duration_ms() {
  duration_ms_ = 0;
  clear_has_duration_ms();
}
inline ::google::protobuf::int32 RpczSamplePB::duration_ms() const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpczSamplePB.duration_ms)
  return duration_ms_;
}
inline void RpczSamplePB::set_duration_ms(::google::protobuf::int32 value) {
  set_has_duration_ms();
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:ant.rpc.RpczSamplePB.duration_ms)
}

// repeated .ant.rpc.TraceMetricPB metrics = 4;
inline int RpczSamplePB::metrics_size() const {
  return metrics_.size();
}
inline void RpczSamplePB::clear_metrics() {
  metrics_.Clear();
}
inline const ::ant::rpc::TraceMetricPB& RpczSamplePB::metrics(int index) const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpczSamplePB.metrics)
  return metrics_.Get(index);
}
inline ::ant::rpc::TraceMetricPB* RpczSamplePB::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:ant.rpc.RpczSamplePB.metrics)
  return metrics_.Mutable(index);
}
inline ::ant::rpc::TraceMetricPB* RpczSamplePB::add_metrics() {
  // @@protoc_insertion_point(field_add:ant.rpc.RpczSamplePB.metrics)
  return metrics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ant::rpc::TraceMetricPB >&
RpczSamplePB::metrics() const {
  // @@protoc_insertion_point(field_list:ant.rpc.RpczSamplePB.metrics)
  return metrics_;
}
inline ::google::protobuf::RepeatedPtrField< ::ant::rpc::TraceMetricPB >*
RpczSamplePB::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:ant.rpc.RpczSamplePB.metrics)
  return &metrics_;
}

// -------------------------------------------------------------------

// RpczMethodPB

// required string method_name = 1;
inline bool RpczMethodPB::has_method_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpczMethodPB::set_has_method_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpczMethodPB::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpczMethodPB::clear_method_name() {
  if (method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_name_->clear();
  }
  clear_has_method_name();
}
inline const ::std::string& RpczMethodPB::method_name() const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpczMethodPB.method_name)
  return *method_name_;
}
inline void RpczMethodPB::set_method_name(const ::std::string& value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
  // @@protoc_insertion_point(field_set:ant.rpc.RpczMethodPB.method_name)
}
inline void RpczMethodPB::set_method_name(const char* value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.rpc.RpczMethodPB.method_name)
}
inline void RpczMethodPB::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.rpc.RpczMethodPB.method_name)
}
inline ::std::string* RpczMethodPB::mutable_method_name() {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.rpc.RpczMethodPB.method_name)
  return method_name_;
}
inline ::std::string* RpczMethodPB::release_method_name() {
  clear_has_method_name();
  if (method_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = method_name_;
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpczMethodPB::set_allocated_method_name(::std::string* method_name) {
  if (method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_name_;
  }
  if (method_name) {
    set_has_method_name();
    method_name_ = method_name;
  } else {
    clear_has_method_name();
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.rpc.RpczMethodPB.method_name)
}

// repeated .ant.rpc.RpczSamplePB samples = 2;
inline int RpczMethodPB::samples_size() const {
  return samples_.size();
}
inline void RpczMethodPB::clear_samples() {
  samples_.Clear();
}
inline const ::ant::rpc::RpczSamplePB& RpczMethodPB::samples(int index) const {
  // @@protoc_insertion_point(field_get:ant.rpc.RpczMethodPB.samples)
  return samples_.Get(index);
}
inline ::ant::rpc::RpczSamplePB* RpczMethodPB::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:ant.rpc.RpczMethodPB.samples)
  return samples_.Mutable(index);
}
inline ::ant::rpc::RpczSamplePB* RpczMethodPB::add_samples() {
  // @@protoc_insertion_point(field_add:ant.rpc.RpczMethodPB.samples)
  return samples_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpczSamplePB >&
RpczMethodPB::samples() const {
  // @@protoc_insertion_point(field_list:ant.rpc.RpczMethodPB.samples)
  return samples_;
}
inline ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpczSamplePB >*
RpczMethodPB::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:ant.rpc.RpczMethodPB.samples)
  return &samples_;
}

// -------------------------------------------------------------------

// DumpRpczStoreRequestPB

// -------------------------------------------------------------------

// DumpRpczStoreResponsePB

// repeated .ant.rpc.RpczMethodPB methods = 1;
inline int DumpRpczStoreResponsePB::methods_size() const {
  return methods_.size();
}
inline void DumpRpczStoreResponsePB::clear_methods() {
  methods_.Clear();
}
inline const ::ant::rpc::RpczMethodPB& DumpRpczStoreResponsePB::methods(int index) const {
  // @@protoc_insertion_point(field_get:ant.rpc.DumpRpczStoreResponsePB.methods)
  return methods_.Get(index);
}
inline ::ant::rpc::RpczMethodPB* DumpRpczStoreResponsePB::mutable_methods(int index) {
  // @@protoc_insertion_point(field_mutable:ant.rpc.DumpRpczStoreResponsePB.methods)
  return methods_.Mutable(index);
}
inline ::ant::rpc::RpczMethodPB* DumpRpczStoreResponsePB::add_methods() {
  // @@protoc_insertion_point(field_add:ant.rpc.DumpRpczStoreResponsePB.methods)
  return methods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpczMethodPB >&
DumpRpczStoreResponsePB::methods() const {
  // @@protoc_insertion_point(field_list:ant.rpc.DumpRpczStoreResponsePB.methods)
  return methods_;
}
inline ::google::protobuf::RepeatedPtrField< ::ant::rpc::RpczMethodPB >*
DumpRpczStoreResponsePB::mutable_methods() {
  // @@protoc_insertion_point(field_mutable_list:ant.rpc.DumpRpczStoreResponsePB.methods)
  return &methods_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace ant

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ant::rpc::RpcConnectionPB_StateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ant::rpc::RpcConnectionPB_StateType>() {
  return ::ant::rpc::RpcConnectionPB_StateType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_5fintrospection_2eproto__INCLUDED
