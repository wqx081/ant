// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ant/common/common.proto

#ifndef PROTOBUF_ant_2fcommon_2fcommon_2eproto__INCLUDED
#define PROTOBUF_ant_2fcommon_2fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ant {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ant_2fcommon_2fcommon_2eproto();
void protobuf_AssignDesc_ant_2fcommon_2fcommon_2eproto();
void protobuf_ShutdownFile_ant_2fcommon_2fcommon_2eproto();

class HostPortPB;

enum ExternalConsistencyMode {
  UNKNOWN_EXTERNAL_CONSISTENCY_MODE = 0,
  CLIENT_PROPAGATED = 1,
  COMMIT_WAIT = 2
};
bool ExternalConsistencyMode_IsValid(int value);
const ExternalConsistencyMode ExternalConsistencyMode_MIN = UNKNOWN_EXTERNAL_CONSISTENCY_MODE;
const ExternalConsistencyMode ExternalConsistencyMode_MAX = COMMIT_WAIT;
const int ExternalConsistencyMode_ARRAYSIZE = ExternalConsistencyMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExternalConsistencyMode_descriptor();
inline const ::std::string& ExternalConsistencyMode_Name(ExternalConsistencyMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExternalConsistencyMode_descriptor(), value);
}
inline bool ExternalConsistencyMode_Parse(
    const ::std::string& name, ExternalConsistencyMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExternalConsistencyMode>(
    ExternalConsistencyMode_descriptor(), name, value);
}
// ===================================================================

class HostPortPB : public ::google::protobuf::Message {
 public:
  HostPortPB();
  virtual ~HostPortPB();

  HostPortPB(const HostPortPB& from);

  inline HostPortPB& operator=(const HostPortPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HostPortPB& default_instance();

  void Swap(HostPortPB* other);

  // implements Message ----------------------------------------------

  HostPortPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HostPortPB& from);
  void MergeFrom(const HostPortPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // required uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ant.HostPortPB)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* host_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_ant_2fcommon_2fcommon_2eproto();
  friend void protobuf_AssignDesc_ant_2fcommon_2fcommon_2eproto();
  friend void protobuf_ShutdownFile_ant_2fcommon_2fcommon_2eproto();

  void InitAsDefaultInstance();
  static HostPortPB* default_instance_;
};
// ===================================================================


// ===================================================================

// HostPortPB

// required string host = 1;
inline bool HostPortPB::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HostPortPB::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HostPortPB::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HostPortPB::clear_host() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& HostPortPB::host() const {
  // @@protoc_insertion_point(field_get:ant.HostPortPB.host)
  return *host_;
}
inline void HostPortPB::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set:ant.HostPortPB.host)
}
inline void HostPortPB::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.HostPortPB.host)
}
inline void HostPortPB::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.HostPortPB.host)
}
inline ::std::string* HostPortPB::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.HostPortPB.host)
  return host_;
}
inline ::std::string* HostPortPB::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HostPortPB::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.HostPortPB.host)
}

// required uint32 port = 2;
inline bool HostPortPB::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HostPortPB::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HostPortPB::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HostPortPB::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 HostPortPB::port() const {
  // @@protoc_insertion_point(field_get:ant.HostPortPB.port)
  return port_;
}
inline void HostPortPB::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:ant.HostPortPB.port)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ant

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ant::ExternalConsistencyMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ant::ExternalConsistencyMode>() {
  return ::ant::ExternalConsistencyMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ant_2fcommon_2fcommon_2eproto__INCLUDED
