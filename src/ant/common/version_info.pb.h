// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ant/common/version_info.proto

#ifndef PROTOBUF_ant_2fcommon_2fversion_5finfo_2eproto__INCLUDED
#define PROTOBUF_ant_2fcommon_2fversion_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ant {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ant_2fcommon_2fversion_5finfo_2eproto();
void protobuf_AssignDesc_ant_2fcommon_2fversion_5finfo_2eproto();
void protobuf_ShutdownFile_ant_2fcommon_2fversion_5finfo_2eproto();

class VersionInfoPB;

// ===================================================================

class VersionInfoPB : public ::google::protobuf::Message {
 public:
  VersionInfoPB();
  virtual ~VersionInfoPB();

  VersionInfoPB(const VersionInfoPB& from);

  inline VersionInfoPB& operator=(const VersionInfoPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionInfoPB& default_instance();

  void Swap(VersionInfoPB* other);

  // implements Message ----------------------------------------------

  VersionInfoPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VersionInfoPB& from);
  void MergeFrom(const VersionInfoPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string git_hash = 1;
  inline bool has_git_hash() const;
  inline void clear_git_hash();
  static const int kGitHashFieldNumber = 1;
  inline const ::std::string& git_hash() const;
  inline void set_git_hash(const ::std::string& value);
  inline void set_git_hash(const char* value);
  inline void set_git_hash(const char* value, size_t size);
  inline ::std::string* mutable_git_hash();
  inline ::std::string* release_git_hash();
  inline void set_allocated_git_hash(::std::string* git_hash);

  // optional string build_hostname = 2;
  inline bool has_build_hostname() const;
  inline void clear_build_hostname();
  static const int kBuildHostnameFieldNumber = 2;
  inline const ::std::string& build_hostname() const;
  inline void set_build_hostname(const ::std::string& value);
  inline void set_build_hostname(const char* value);
  inline void set_build_hostname(const char* value, size_t size);
  inline ::std::string* mutable_build_hostname();
  inline ::std::string* release_build_hostname();
  inline void set_allocated_build_hostname(::std::string* build_hostname);

  // optional string build_timestamp = 3;
  inline bool has_build_timestamp() const;
  inline void clear_build_timestamp();
  static const int kBuildTimestampFieldNumber = 3;
  inline const ::std::string& build_timestamp() const;
  inline void set_build_timestamp(const ::std::string& value);
  inline void set_build_timestamp(const char* value);
  inline void set_build_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_build_timestamp();
  inline ::std::string* release_build_timestamp();
  inline void set_allocated_build_timestamp(::std::string* build_timestamp);

  // optional string build_username = 4;
  inline bool has_build_username() const;
  inline void clear_build_username();
  static const int kBuildUsernameFieldNumber = 4;
  inline const ::std::string& build_username() const;
  inline void set_build_username(const ::std::string& value);
  inline void set_build_username(const char* value);
  inline void set_build_username(const char* value, size_t size);
  inline ::std::string* mutable_build_username();
  inline ::std::string* release_build_username();
  inline void set_allocated_build_username(::std::string* build_username);

  // optional bool build_clean_repo = 5;
  inline bool has_build_clean_repo() const;
  inline void clear_build_clean_repo();
  static const int kBuildCleanRepoFieldNumber = 5;
  inline bool build_clean_repo() const;
  inline void set_build_clean_repo(bool value);

  // optional string build_id = 6;
  inline bool has_build_id() const;
  inline void clear_build_id();
  static const int kBuildIdFieldNumber = 6;
  inline const ::std::string& build_id() const;
  inline void set_build_id(const ::std::string& value);
  inline void set_build_id(const char* value);
  inline void set_build_id(const char* value, size_t size);
  inline ::std::string* mutable_build_id();
  inline ::std::string* release_build_id();
  inline void set_allocated_build_id(::std::string* build_id);

  // optional string build_type = 7;
  inline bool has_build_type() const;
  inline void clear_build_type();
  static const int kBuildTypeFieldNumber = 7;
  inline const ::std::string& build_type() const;
  inline void set_build_type(const ::std::string& value);
  inline void set_build_type(const char* value);
  inline void set_build_type(const char* value, size_t size);
  inline ::std::string* mutable_build_type();
  inline ::std::string* release_build_type();
  inline void set_allocated_build_type(::std::string* build_type);

  // optional string version_string = 8;
  inline bool has_version_string() const;
  inline void clear_version_string();
  static const int kVersionStringFieldNumber = 8;
  inline const ::std::string& version_string() const;
  inline void set_version_string(const ::std::string& value);
  inline void set_version_string(const char* value);
  inline void set_version_string(const char* value, size_t size);
  inline ::std::string* mutable_version_string();
  inline ::std::string* release_version_string();
  inline void set_allocated_version_string(::std::string* version_string);

  // @@protoc_insertion_point(class_scope:ant.VersionInfoPB)
 private:
  inline void set_has_git_hash();
  inline void clear_has_git_hash();
  inline void set_has_build_hostname();
  inline void clear_has_build_hostname();
  inline void set_has_build_timestamp();
  inline void clear_has_build_timestamp();
  inline void set_has_build_username();
  inline void clear_has_build_username();
  inline void set_has_build_clean_repo();
  inline void clear_has_build_clean_repo();
  inline void set_has_build_id();
  inline void clear_has_build_id();
  inline void set_has_build_type();
  inline void clear_has_build_type();
  inline void set_has_version_string();
  inline void clear_has_version_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* git_hash_;
  ::std::string* build_hostname_;
  ::std::string* build_timestamp_;
  ::std::string* build_username_;
  ::std::string* build_id_;
  ::std::string* build_type_;
  ::std::string* version_string_;
  bool build_clean_repo_;
  friend void  protobuf_AddDesc_ant_2fcommon_2fversion_5finfo_2eproto();
  friend void protobuf_AssignDesc_ant_2fcommon_2fversion_5finfo_2eproto();
  friend void protobuf_ShutdownFile_ant_2fcommon_2fversion_5finfo_2eproto();

  void InitAsDefaultInstance();
  static VersionInfoPB* default_instance_;
};
// ===================================================================


// ===================================================================

// VersionInfoPB

// optional string git_hash = 1;
inline bool VersionInfoPB::has_git_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionInfoPB::set_has_git_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionInfoPB::clear_has_git_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionInfoPB::clear_git_hash() {
  if (git_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    git_hash_->clear();
  }
  clear_has_git_hash();
}
inline const ::std::string& VersionInfoPB::git_hash() const {
  // @@protoc_insertion_point(field_get:ant.VersionInfoPB.git_hash)
  return *git_hash_;
}
inline void VersionInfoPB::set_git_hash(const ::std::string& value) {
  set_has_git_hash();
  if (git_hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    git_hash_ = new ::std::string;
  }
  git_hash_->assign(value);
  // @@protoc_insertion_point(field_set:ant.VersionInfoPB.git_hash)
}
inline void VersionInfoPB::set_git_hash(const char* value) {
  set_has_git_hash();
  if (git_hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    git_hash_ = new ::std::string;
  }
  git_hash_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.VersionInfoPB.git_hash)
}
inline void VersionInfoPB::set_git_hash(const char* value, size_t size) {
  set_has_git_hash();
  if (git_hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    git_hash_ = new ::std::string;
  }
  git_hash_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.VersionInfoPB.git_hash)
}
inline ::std::string* VersionInfoPB::mutable_git_hash() {
  set_has_git_hash();
  if (git_hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    git_hash_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.VersionInfoPB.git_hash)
  return git_hash_;
}
inline ::std::string* VersionInfoPB::release_git_hash() {
  clear_has_git_hash();
  if (git_hash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = git_hash_;
    git_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VersionInfoPB::set_allocated_git_hash(::std::string* git_hash) {
  if (git_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete git_hash_;
  }
  if (git_hash) {
    set_has_git_hash();
    git_hash_ = git_hash;
  } else {
    clear_has_git_hash();
    git_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.VersionInfoPB.git_hash)
}

// optional string build_hostname = 2;
inline bool VersionInfoPB::has_build_hostname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VersionInfoPB::set_has_build_hostname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VersionInfoPB::clear_has_build_hostname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VersionInfoPB::clear_build_hostname() {
  if (build_hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_hostname_->clear();
  }
  clear_has_build_hostname();
}
inline const ::std::string& VersionInfoPB::build_hostname() const {
  // @@protoc_insertion_point(field_get:ant.VersionInfoPB.build_hostname)
  return *build_hostname_;
}
inline void VersionInfoPB::set_build_hostname(const ::std::string& value) {
  set_has_build_hostname();
  if (build_hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_hostname_ = new ::std::string;
  }
  build_hostname_->assign(value);
  // @@protoc_insertion_point(field_set:ant.VersionInfoPB.build_hostname)
}
inline void VersionInfoPB::set_build_hostname(const char* value) {
  set_has_build_hostname();
  if (build_hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_hostname_ = new ::std::string;
  }
  build_hostname_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.VersionInfoPB.build_hostname)
}
inline void VersionInfoPB::set_build_hostname(const char* value, size_t size) {
  set_has_build_hostname();
  if (build_hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_hostname_ = new ::std::string;
  }
  build_hostname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.VersionInfoPB.build_hostname)
}
inline ::std::string* VersionInfoPB::mutable_build_hostname() {
  set_has_build_hostname();
  if (build_hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_hostname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.VersionInfoPB.build_hostname)
  return build_hostname_;
}
inline ::std::string* VersionInfoPB::release_build_hostname() {
  clear_has_build_hostname();
  if (build_hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = build_hostname_;
    build_hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VersionInfoPB::set_allocated_build_hostname(::std::string* build_hostname) {
  if (build_hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_hostname_;
  }
  if (build_hostname) {
    set_has_build_hostname();
    build_hostname_ = build_hostname;
  } else {
    clear_has_build_hostname();
    build_hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.VersionInfoPB.build_hostname)
}

// optional string build_timestamp = 3;
inline bool VersionInfoPB::has_build_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VersionInfoPB::set_has_build_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VersionInfoPB::clear_has_build_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VersionInfoPB::clear_build_timestamp() {
  if (build_timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_timestamp_->clear();
  }
  clear_has_build_timestamp();
}
inline const ::std::string& VersionInfoPB::build_timestamp() const {
  // @@protoc_insertion_point(field_get:ant.VersionInfoPB.build_timestamp)
  return *build_timestamp_;
}
inline void VersionInfoPB::set_build_timestamp(const ::std::string& value) {
  set_has_build_timestamp();
  if (build_timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_timestamp_ = new ::std::string;
  }
  build_timestamp_->assign(value);
  // @@protoc_insertion_point(field_set:ant.VersionInfoPB.build_timestamp)
}
inline void VersionInfoPB::set_build_timestamp(const char* value) {
  set_has_build_timestamp();
  if (build_timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_timestamp_ = new ::std::string;
  }
  build_timestamp_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.VersionInfoPB.build_timestamp)
}
inline void VersionInfoPB::set_build_timestamp(const char* value, size_t size) {
  set_has_build_timestamp();
  if (build_timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_timestamp_ = new ::std::string;
  }
  build_timestamp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.VersionInfoPB.build_timestamp)
}
inline ::std::string* VersionInfoPB::mutable_build_timestamp() {
  set_has_build_timestamp();
  if (build_timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_timestamp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.VersionInfoPB.build_timestamp)
  return build_timestamp_;
}
inline ::std::string* VersionInfoPB::release_build_timestamp() {
  clear_has_build_timestamp();
  if (build_timestamp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = build_timestamp_;
    build_timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VersionInfoPB::set_allocated_build_timestamp(::std::string* build_timestamp) {
  if (build_timestamp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_timestamp_;
  }
  if (build_timestamp) {
    set_has_build_timestamp();
    build_timestamp_ = build_timestamp;
  } else {
    clear_has_build_timestamp();
    build_timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.VersionInfoPB.build_timestamp)
}

// optional string build_username = 4;
inline bool VersionInfoPB::has_build_username() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VersionInfoPB::set_has_build_username() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VersionInfoPB::clear_has_build_username() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VersionInfoPB::clear_build_username() {
  if (build_username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_username_->clear();
  }
  clear_has_build_username();
}
inline const ::std::string& VersionInfoPB::build_username() const {
  // @@protoc_insertion_point(field_get:ant.VersionInfoPB.build_username)
  return *build_username_;
}
inline void VersionInfoPB::set_build_username(const ::std::string& value) {
  set_has_build_username();
  if (build_username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_username_ = new ::std::string;
  }
  build_username_->assign(value);
  // @@protoc_insertion_point(field_set:ant.VersionInfoPB.build_username)
}
inline void VersionInfoPB::set_build_username(const char* value) {
  set_has_build_username();
  if (build_username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_username_ = new ::std::string;
  }
  build_username_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.VersionInfoPB.build_username)
}
inline void VersionInfoPB::set_build_username(const char* value, size_t size) {
  set_has_build_username();
  if (build_username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_username_ = new ::std::string;
  }
  build_username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.VersionInfoPB.build_username)
}
inline ::std::string* VersionInfoPB::mutable_build_username() {
  set_has_build_username();
  if (build_username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.VersionInfoPB.build_username)
  return build_username_;
}
inline ::std::string* VersionInfoPB::release_build_username() {
  clear_has_build_username();
  if (build_username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = build_username_;
    build_username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VersionInfoPB::set_allocated_build_username(::std::string* build_username) {
  if (build_username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_username_;
  }
  if (build_username) {
    set_has_build_username();
    build_username_ = build_username;
  } else {
    clear_has_build_username();
    build_username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.VersionInfoPB.build_username)
}

// optional bool build_clean_repo = 5;
inline bool VersionInfoPB::has_build_clean_repo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VersionInfoPB::set_has_build_clean_repo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VersionInfoPB::clear_has_build_clean_repo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VersionInfoPB::clear_build_clean_repo() {
  build_clean_repo_ = false;
  clear_has_build_clean_repo();
}
inline bool VersionInfoPB::build_clean_repo() const {
  // @@protoc_insertion_point(field_get:ant.VersionInfoPB.build_clean_repo)
  return build_clean_repo_;
}
inline void VersionInfoPB::set_build_clean_repo(bool value) {
  set_has_build_clean_repo();
  build_clean_repo_ = value;
  // @@protoc_insertion_point(field_set:ant.VersionInfoPB.build_clean_repo)
}

// optional string build_id = 6;
inline bool VersionInfoPB::has_build_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VersionInfoPB::set_has_build_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VersionInfoPB::clear_has_build_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VersionInfoPB::clear_build_id() {
  if (build_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_id_->clear();
  }
  clear_has_build_id();
}
inline const ::std::string& VersionInfoPB::build_id() const {
  // @@protoc_insertion_point(field_get:ant.VersionInfoPB.build_id)
  return *build_id_;
}
inline void VersionInfoPB::set_build_id(const ::std::string& value) {
  set_has_build_id();
  if (build_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_id_ = new ::std::string;
  }
  build_id_->assign(value);
  // @@protoc_insertion_point(field_set:ant.VersionInfoPB.build_id)
}
inline void VersionInfoPB::set_build_id(const char* value) {
  set_has_build_id();
  if (build_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_id_ = new ::std::string;
  }
  build_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.VersionInfoPB.build_id)
}
inline void VersionInfoPB::set_build_id(const char* value, size_t size) {
  set_has_build_id();
  if (build_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_id_ = new ::std::string;
  }
  build_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.VersionInfoPB.build_id)
}
inline ::std::string* VersionInfoPB::mutable_build_id() {
  set_has_build_id();
  if (build_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.VersionInfoPB.build_id)
  return build_id_;
}
inline ::std::string* VersionInfoPB::release_build_id() {
  clear_has_build_id();
  if (build_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = build_id_;
    build_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VersionInfoPB::set_allocated_build_id(::std::string* build_id) {
  if (build_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_id_;
  }
  if (build_id) {
    set_has_build_id();
    build_id_ = build_id;
  } else {
    clear_has_build_id();
    build_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.VersionInfoPB.build_id)
}

// optional string build_type = 7;
inline bool VersionInfoPB::has_build_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VersionInfoPB::set_has_build_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VersionInfoPB::clear_has_build_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VersionInfoPB::clear_build_type() {
  if (build_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_type_->clear();
  }
  clear_has_build_type();
}
inline const ::std::string& VersionInfoPB::build_type() const {
  // @@protoc_insertion_point(field_get:ant.VersionInfoPB.build_type)
  return *build_type_;
}
inline void VersionInfoPB::set_build_type(const ::std::string& value) {
  set_has_build_type();
  if (build_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_type_ = new ::std::string;
  }
  build_type_->assign(value);
  // @@protoc_insertion_point(field_set:ant.VersionInfoPB.build_type)
}
inline void VersionInfoPB::set_build_type(const char* value) {
  set_has_build_type();
  if (build_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_type_ = new ::std::string;
  }
  build_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.VersionInfoPB.build_type)
}
inline void VersionInfoPB::set_build_type(const char* value, size_t size) {
  set_has_build_type();
  if (build_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_type_ = new ::std::string;
  }
  build_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.VersionInfoPB.build_type)
}
inline ::std::string* VersionInfoPB::mutable_build_type() {
  set_has_build_type();
  if (build_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.VersionInfoPB.build_type)
  return build_type_;
}
inline ::std::string* VersionInfoPB::release_build_type() {
  clear_has_build_type();
  if (build_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = build_type_;
    build_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VersionInfoPB::set_allocated_build_type(::std::string* build_type) {
  if (build_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_type_;
  }
  if (build_type) {
    set_has_build_type();
    build_type_ = build_type;
  } else {
    clear_has_build_type();
    build_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.VersionInfoPB.build_type)
}

// optional string version_string = 8;
inline bool VersionInfoPB::has_version_string() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VersionInfoPB::set_has_version_string() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VersionInfoPB::clear_has_version_string() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VersionInfoPB::clear_version_string() {
  if (version_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_string_->clear();
  }
  clear_has_version_string();
}
inline const ::std::string& VersionInfoPB::version_string() const {
  // @@protoc_insertion_point(field_get:ant.VersionInfoPB.version_string)
  return *version_string_;
}
inline void VersionInfoPB::set_version_string(const ::std::string& value) {
  set_has_version_string();
  if (version_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_string_ = new ::std::string;
  }
  version_string_->assign(value);
  // @@protoc_insertion_point(field_set:ant.VersionInfoPB.version_string)
}
inline void VersionInfoPB::set_version_string(const char* value) {
  set_has_version_string();
  if (version_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_string_ = new ::std::string;
  }
  version_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.VersionInfoPB.version_string)
}
inline void VersionInfoPB::set_version_string(const char* value, size_t size) {
  set_has_version_string();
  if (version_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_string_ = new ::std::string;
  }
  version_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.VersionInfoPB.version_string)
}
inline ::std::string* VersionInfoPB::mutable_version_string() {
  set_has_version_string();
  if (version_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.VersionInfoPB.version_string)
  return version_string_;
}
inline ::std::string* VersionInfoPB::release_version_string() {
  clear_has_version_string();
  if (version_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_string_;
    version_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VersionInfoPB::set_allocated_version_string(::std::string* version_string) {
  if (version_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_string_;
  }
  if (version_string) {
    set_has_version_string();
    version_string_ = version_string;
  } else {
    clear_has_version_string();
    version_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.VersionInfoPB.version_string)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ant

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ant_2fcommon_2fversion_5finfo_2eproto__INCLUDED
