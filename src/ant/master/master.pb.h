// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ant/master/master.proto

#ifndef PROTOBUF_ant_2fmaster_2fmaster_2eproto__INCLUDED
#define PROTOBUF_ant_2fmaster_2fmaster_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ant/common/wire_protocol.pb.h"
// @@protoc_insertion_point(includes)

namespace ant {
namespace master {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ant_2fmaster_2fmaster_2eproto();
void protobuf_AssignDesc_ant_2fmaster_2fmaster_2eproto();
void protobuf_ShutdownFile_ant_2fmaster_2fmaster_2eproto();

class MasterErrorPB;
class WorkerToMasterCommonPB;
class PingRequestPB;
class PingResponsePB;
class WorkerReportPB;
class WorkerHeartbeatRequestPB;
class WorkerHeartbeatResponsePB;

enum MasterErrorPB_Code {
  MasterErrorPB_Code_UNKNOWN_ERROR = 1
};
bool MasterErrorPB_Code_IsValid(int value);
const MasterErrorPB_Code MasterErrorPB_Code_Code_MIN = MasterErrorPB_Code_UNKNOWN_ERROR;
const MasterErrorPB_Code MasterErrorPB_Code_Code_MAX = MasterErrorPB_Code_UNKNOWN_ERROR;
const int MasterErrorPB_Code_Code_ARRAYSIZE = MasterErrorPB_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* MasterErrorPB_Code_descriptor();
inline const ::std::string& MasterErrorPB_Code_Name(MasterErrorPB_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    MasterErrorPB_Code_descriptor(), value);
}
inline bool MasterErrorPB_Code_Parse(
    const ::std::string& name, MasterErrorPB_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MasterErrorPB_Code>(
    MasterErrorPB_Code_descriptor(), name, value);
}
// ===================================================================

class MasterErrorPB : public ::google::protobuf::Message {
 public:
  MasterErrorPB();
  virtual ~MasterErrorPB();

  MasterErrorPB(const MasterErrorPB& from);

  inline MasterErrorPB& operator=(const MasterErrorPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterErrorPB& default_instance();

  void Swap(MasterErrorPB* other);

  // implements Message ----------------------------------------------

  MasterErrorPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterErrorPB& from);
  void MergeFrom(const MasterErrorPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MasterErrorPB_Code Code;
  static const Code UNKNOWN_ERROR = MasterErrorPB_Code_UNKNOWN_ERROR;
  static inline bool Code_IsValid(int value) {
    return MasterErrorPB_Code_IsValid(value);
  }
  static const Code Code_MIN =
    MasterErrorPB_Code_Code_MIN;
  static const Code Code_MAX =
    MasterErrorPB_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    MasterErrorPB_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return MasterErrorPB_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return MasterErrorPB_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return MasterErrorPB_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ant.master.MasterErrorPB.Code code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::ant::master::MasterErrorPB_Code code() const;
  inline void set_code(::ant::master::MasterErrorPB_Code value);

  // required .ant.AppStatusPB status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::ant::AppStatusPB& status() const;
  inline ::ant::AppStatusPB* mutable_status();
  inline ::ant::AppStatusPB* release_status();
  inline void set_allocated_status(::ant::AppStatusPB* status);

  // @@protoc_insertion_point(class_scope:ant.master.MasterErrorPB)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ant::AppStatusPB* status_;
  int code_;
  friend void  protobuf_AddDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_AssignDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_ShutdownFile_ant_2fmaster_2fmaster_2eproto();

  void InitAsDefaultInstance();
  static MasterErrorPB* default_instance_;
};
// -------------------------------------------------------------------

class WorkerToMasterCommonPB : public ::google::protobuf::Message {
 public:
  WorkerToMasterCommonPB();
  virtual ~WorkerToMasterCommonPB();

  WorkerToMasterCommonPB(const WorkerToMasterCommonPB& from);

  inline WorkerToMasterCommonPB& operator=(const WorkerToMasterCommonPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerToMasterCommonPB& default_instance();

  void Swap(WorkerToMasterCommonPB* other);

  // implements Message ----------------------------------------------

  WorkerToMasterCommonPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerToMasterCommonPB& from);
  void MergeFrom(const WorkerToMasterCommonPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ant.NodeInstancePB worker_instance = 1;
  inline bool has_worker_instance() const;
  inline void clear_worker_instance();
  static const int kWorkerInstanceFieldNumber = 1;
  inline const ::ant::NodeInstancePB& worker_instance() const;
  inline ::ant::NodeInstancePB* mutable_worker_instance();
  inline ::ant::NodeInstancePB* release_worker_instance();
  inline void set_allocated_worker_instance(::ant::NodeInstancePB* worker_instance);

  // @@protoc_insertion_point(class_scope:ant.master.WorkerToMasterCommonPB)
 private:
  inline void set_has_worker_instance();
  inline void clear_has_worker_instance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ant::NodeInstancePB* worker_instance_;
  friend void  protobuf_AddDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_AssignDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_ShutdownFile_ant_2fmaster_2fmaster_2eproto();

  void InitAsDefaultInstance();
  static WorkerToMasterCommonPB* default_instance_;
};
// -------------------------------------------------------------------

class PingRequestPB : public ::google::protobuf::Message {
 public:
  PingRequestPB();
  virtual ~PingRequestPB();

  PingRequestPB(const PingRequestPB& from);

  inline PingRequestPB& operator=(const PingRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequestPB& default_instance();

  void Swap(PingRequestPB* other);

  // implements Message ----------------------------------------------

  PingRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingRequestPB& from);
  void MergeFrom(const PingRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ant.master.PingRequestPB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_AssignDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_ShutdownFile_ant_2fmaster_2fmaster_2eproto();

  void InitAsDefaultInstance();
  static PingRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class PingResponsePB : public ::google::protobuf::Message {
 public:
  PingResponsePB();
  virtual ~PingResponsePB();

  PingResponsePB(const PingResponsePB& from);

  inline PingResponsePB& operator=(const PingResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingResponsePB& default_instance();

  void Swap(PingResponsePB* other);

  // implements Message ----------------------------------------------

  PingResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingResponsePB& from);
  void MergeFrom(const PingResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ant.master.PingResponsePB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_AssignDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_ShutdownFile_ant_2fmaster_2fmaster_2eproto();

  void InitAsDefaultInstance();
  static PingResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class WorkerReportPB : public ::google::protobuf::Message {
 public:
  WorkerReportPB();
  virtual ~WorkerReportPB();

  WorkerReportPB(const WorkerReportPB& from);

  inline WorkerReportPB& operator=(const WorkerReportPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerReportPB& default_instance();

  void Swap(WorkerReportPB* other);

  // implements Message ----------------------------------------------

  WorkerReportPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerReportPB& from);
  void MergeFrom(const WorkerReportPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_incremental = 1;
  inline bool has_is_incremental() const;
  inline void clear_is_incremental();
  static const int kIsIncrementalFieldNumber = 1;
  inline bool is_incremental() const;
  inline void set_is_incremental(bool value);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // required int32 sequence_number = 3;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 3;
  inline ::google::protobuf::int32 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ant.master.WorkerReportPB)
 private:
  inline void set_has_is_incremental();
  inline void clear_has_is_incremental();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  bool is_incremental_;
  ::google::protobuf::int32 sequence_number_;
  friend void  protobuf_AddDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_AssignDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_ShutdownFile_ant_2fmaster_2fmaster_2eproto();

  void InitAsDefaultInstance();
  static WorkerReportPB* default_instance_;
};
// -------------------------------------------------------------------

class WorkerHeartbeatRequestPB : public ::google::protobuf::Message {
 public:
  WorkerHeartbeatRequestPB();
  virtual ~WorkerHeartbeatRequestPB();

  WorkerHeartbeatRequestPB(const WorkerHeartbeatRequestPB& from);

  inline WorkerHeartbeatRequestPB& operator=(const WorkerHeartbeatRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerHeartbeatRequestPB& default_instance();

  void Swap(WorkerHeartbeatRequestPB* other);

  // implements Message ----------------------------------------------

  WorkerHeartbeatRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerHeartbeatRequestPB& from);
  void MergeFrom(const WorkerHeartbeatRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ant.master.WorkerToMasterCommonPB common = 1;
  inline bool has_common() const;
  inline void clear_common();
  static const int kCommonFieldNumber = 1;
  inline const ::ant::master::WorkerToMasterCommonPB& common() const;
  inline ::ant::master::WorkerToMasterCommonPB* mutable_common();
  inline ::ant::master::WorkerToMasterCommonPB* release_common();
  inline void set_allocated_common(::ant::master::WorkerToMasterCommonPB* common);

  // optional .ant.ServerRegistrationPB registration = 2;
  inline bool has_registration() const;
  inline void clear_registration();
  static const int kRegistrationFieldNumber = 2;
  inline const ::ant::ServerRegistrationPB& registration() const;
  inline ::ant::ServerRegistrationPB* mutable_registration();
  inline ::ant::ServerRegistrationPB* release_registration();
  inline void set_allocated_registration(::ant::ServerRegistrationPB* registration);

  // optional .ant.master.WorkerReportPB worker_report = 3;
  inline bool has_worker_report() const;
  inline void clear_worker_report();
  static const int kWorkerReportFieldNumber = 3;
  inline const ::ant::master::WorkerReportPB& worker_report() const;
  inline ::ant::master::WorkerReportPB* mutable_worker_report();
  inline ::ant::master::WorkerReportPB* release_worker_report();
  inline void set_allocated_worker_report(::ant::master::WorkerReportPB* worker_report);

  // @@protoc_insertion_point(class_scope:ant.master.WorkerHeartbeatRequestPB)
 private:
  inline void set_has_common();
  inline void clear_has_common();
  inline void set_has_registration();
  inline void clear_has_registration();
  inline void set_has_worker_report();
  inline void clear_has_worker_report();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ant::master::WorkerToMasterCommonPB* common_;
  ::ant::ServerRegistrationPB* registration_;
  ::ant::master::WorkerReportPB* worker_report_;
  friend void  protobuf_AddDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_AssignDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_ShutdownFile_ant_2fmaster_2fmaster_2eproto();

  void InitAsDefaultInstance();
  static WorkerHeartbeatRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class WorkerHeartbeatResponsePB : public ::google::protobuf::Message {
 public:
  WorkerHeartbeatResponsePB();
  virtual ~WorkerHeartbeatResponsePB();

  WorkerHeartbeatResponsePB(const WorkerHeartbeatResponsePB& from);

  inline WorkerHeartbeatResponsePB& operator=(const WorkerHeartbeatResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerHeartbeatResponsePB& default_instance();

  void Swap(WorkerHeartbeatResponsePB* other);

  // implements Message ----------------------------------------------

  WorkerHeartbeatResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerHeartbeatResponsePB& from);
  void MergeFrom(const WorkerHeartbeatResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ant.master.MasterErrorPB error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::ant::master::MasterErrorPB& error() const;
  inline ::ant::master::MasterErrorPB* mutable_error();
  inline ::ant::master::MasterErrorPB* release_error();
  inline void set_allocated_error(::ant::master::MasterErrorPB* error);

  // optional .ant.NodeInstancePB master_instance = 2;
  inline bool has_master_instance() const;
  inline void clear_master_instance();
  static const int kMasterInstanceFieldNumber = 2;
  inline const ::ant::NodeInstancePB& master_instance() const;
  inline ::ant::NodeInstancePB* mutable_master_instance();
  inline ::ant::NodeInstancePB* release_master_instance();
  inline void set_allocated_master_instance(::ant::NodeInstancePB* master_instance);

  // optional bool needs_reregister = 3 [default = false];
  inline bool has_needs_reregister() const;
  inline void clear_needs_reregister();
  static const int kNeedsReregisterFieldNumber = 3;
  inline bool needs_reregister() const;
  inline void set_needs_reregister(bool value);

  // optional bool needs_full_worker_report = 4 [default = false];
  inline bool has_needs_full_worker_report() const;
  inline void clear_needs_full_worker_report();
  static const int kNeedsFullWorkerReportFieldNumber = 4;
  inline bool needs_full_worker_report() const;
  inline void set_needs_full_worker_report(bool value);

  // @@protoc_insertion_point(class_scope:ant.master.WorkerHeartbeatResponsePB)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_master_instance();
  inline void clear_has_master_instance();
  inline void set_has_needs_reregister();
  inline void clear_has_needs_reregister();
  inline void set_has_needs_full_worker_report();
  inline void clear_has_needs_full_worker_report();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ant::master::MasterErrorPB* error_;
  ::ant::NodeInstancePB* master_instance_;
  bool needs_reregister_;
  bool needs_full_worker_report_;
  friend void  protobuf_AddDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_AssignDesc_ant_2fmaster_2fmaster_2eproto();
  friend void protobuf_ShutdownFile_ant_2fmaster_2fmaster_2eproto();

  void InitAsDefaultInstance();
  static WorkerHeartbeatResponsePB* default_instance_;
};
// ===================================================================


// ===================================================================

// MasterErrorPB

// required .ant.master.MasterErrorPB.Code code = 1;
inline bool MasterErrorPB::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterErrorPB::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterErrorPB::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterErrorPB::clear_code() {
  code_ = 1;
  clear_has_code();
}
inline ::ant::master::MasterErrorPB_Code MasterErrorPB::code() const {
  // @@protoc_insertion_point(field_get:ant.master.MasterErrorPB.code)
  return static_cast< ::ant::master::MasterErrorPB_Code >(code_);
}
inline void MasterErrorPB::set_code(::ant::master::MasterErrorPB_Code value) {
  assert(::ant::master::MasterErrorPB_Code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:ant.master.MasterErrorPB.code)
}

// required .ant.AppStatusPB status = 2;
inline bool MasterErrorPB::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterErrorPB::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterErrorPB::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterErrorPB::clear_status() {
  if (status_ != NULL) status_->::ant::AppStatusPB::Clear();
  clear_has_status();
}
inline const ::ant::AppStatusPB& MasterErrorPB::status() const {
  // @@protoc_insertion_point(field_get:ant.master.MasterErrorPB.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::ant::AppStatusPB* MasterErrorPB::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::ant::AppStatusPB;
  // @@protoc_insertion_point(field_mutable:ant.master.MasterErrorPB.status)
  return status_;
}
inline ::ant::AppStatusPB* MasterErrorPB::release_status() {
  clear_has_status();
  ::ant::AppStatusPB* temp = status_;
  status_ = NULL;
  return temp;
}
inline void MasterErrorPB::set_allocated_status(::ant::AppStatusPB* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.master.MasterErrorPB.status)
}

// -------------------------------------------------------------------

// WorkerToMasterCommonPB

// required .ant.NodeInstancePB worker_instance = 1;
inline bool WorkerToMasterCommonPB::has_worker_instance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorkerToMasterCommonPB::set_has_worker_instance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorkerToMasterCommonPB::clear_has_worker_instance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorkerToMasterCommonPB::clear_worker_instance() {
  if (worker_instance_ != NULL) worker_instance_->::ant::NodeInstancePB::Clear();
  clear_has_worker_instance();
}
inline const ::ant::NodeInstancePB& WorkerToMasterCommonPB::worker_instance() const {
  // @@protoc_insertion_point(field_get:ant.master.WorkerToMasterCommonPB.worker_instance)
  return worker_instance_ != NULL ? *worker_instance_ : *default_instance_->worker_instance_;
}
inline ::ant::NodeInstancePB* WorkerToMasterCommonPB::mutable_worker_instance() {
  set_has_worker_instance();
  if (worker_instance_ == NULL) worker_instance_ = new ::ant::NodeInstancePB;
  // @@protoc_insertion_point(field_mutable:ant.master.WorkerToMasterCommonPB.worker_instance)
  return worker_instance_;
}
inline ::ant::NodeInstancePB* WorkerToMasterCommonPB::release_worker_instance() {
  clear_has_worker_instance();
  ::ant::NodeInstancePB* temp = worker_instance_;
  worker_instance_ = NULL;
  return temp;
}
inline void WorkerToMasterCommonPB::set_allocated_worker_instance(::ant::NodeInstancePB* worker_instance) {
  delete worker_instance_;
  worker_instance_ = worker_instance;
  if (worker_instance) {
    set_has_worker_instance();
  } else {
    clear_has_worker_instance();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.master.WorkerToMasterCommonPB.worker_instance)
}

// -------------------------------------------------------------------

// PingRequestPB

// -------------------------------------------------------------------

// PingResponsePB

// -------------------------------------------------------------------

// WorkerReportPB

// required bool is_incremental = 1;
inline bool WorkerReportPB::has_is_incremental() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorkerReportPB::set_has_is_incremental() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorkerReportPB::clear_has_is_incremental() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorkerReportPB::clear_is_incremental() {
  is_incremental_ = false;
  clear_has_is_incremental();
}
inline bool WorkerReportPB::is_incremental() const {
  // @@protoc_insertion_point(field_get:ant.master.WorkerReportPB.is_incremental)
  return is_incremental_;
}
inline void WorkerReportPB::set_is_incremental(bool value) {
  set_has_is_incremental();
  is_incremental_ = value;
  // @@protoc_insertion_point(field_set:ant.master.WorkerReportPB.is_incremental)
}

// required string msg = 2;
inline bool WorkerReportPB::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorkerReportPB::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorkerReportPB::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorkerReportPB::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& WorkerReportPB::msg() const {
  // @@protoc_insertion_point(field_get:ant.master.WorkerReportPB.msg)
  return *msg_;
}
inline void WorkerReportPB::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:ant.master.WorkerReportPB.msg)
}
inline void WorkerReportPB::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.master.WorkerReportPB.msg)
}
inline void WorkerReportPB::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.master.WorkerReportPB.msg)
}
inline ::std::string* WorkerReportPB::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.master.WorkerReportPB.msg)
  return msg_;
}
inline ::std::string* WorkerReportPB::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorkerReportPB::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.master.WorkerReportPB.msg)
}

// required int32 sequence_number = 3;
inline bool WorkerReportPB::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorkerReportPB::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorkerReportPB::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorkerReportPB::clear_sequence_number() {
  sequence_number_ = 0;
  clear_has_sequence_number();
}
inline ::google::protobuf::int32 WorkerReportPB::sequence_number() const {
  // @@protoc_insertion_point(field_get:ant.master.WorkerReportPB.sequence_number)
  return sequence_number_;
}
inline void WorkerReportPB::set_sequence_number(::google::protobuf::int32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:ant.master.WorkerReportPB.sequence_number)
}

// -------------------------------------------------------------------

// WorkerHeartbeatRequestPB

// required .ant.master.WorkerToMasterCommonPB common = 1;
inline bool WorkerHeartbeatRequestPB::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorkerHeartbeatRequestPB::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorkerHeartbeatRequestPB::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorkerHeartbeatRequestPB::clear_common() {
  if (common_ != NULL) common_->::ant::master::WorkerToMasterCommonPB::Clear();
  clear_has_common();
}
inline const ::ant::master::WorkerToMasterCommonPB& WorkerHeartbeatRequestPB::common() const {
  // @@protoc_insertion_point(field_get:ant.master.WorkerHeartbeatRequestPB.common)
  return common_ != NULL ? *common_ : *default_instance_->common_;
}
inline ::ant::master::WorkerToMasterCommonPB* WorkerHeartbeatRequestPB::mutable_common() {
  set_has_common();
  if (common_ == NULL) common_ = new ::ant::master::WorkerToMasterCommonPB;
  // @@protoc_insertion_point(field_mutable:ant.master.WorkerHeartbeatRequestPB.common)
  return common_;
}
inline ::ant::master::WorkerToMasterCommonPB* WorkerHeartbeatRequestPB::release_common() {
  clear_has_common();
  ::ant::master::WorkerToMasterCommonPB* temp = common_;
  common_ = NULL;
  return temp;
}
inline void WorkerHeartbeatRequestPB::set_allocated_common(::ant::master::WorkerToMasterCommonPB* common) {
  delete common_;
  common_ = common;
  if (common) {
    set_has_common();
  } else {
    clear_has_common();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.master.WorkerHeartbeatRequestPB.common)
}

// optional .ant.ServerRegistrationPB registration = 2;
inline bool WorkerHeartbeatRequestPB::has_registration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorkerHeartbeatRequestPB::set_has_registration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorkerHeartbeatRequestPB::clear_has_registration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorkerHeartbeatRequestPB::clear_registration() {
  if (registration_ != NULL) registration_->::ant::ServerRegistrationPB::Clear();
  clear_has_registration();
}
inline const ::ant::ServerRegistrationPB& WorkerHeartbeatRequestPB::registration() const {
  // @@protoc_insertion_point(field_get:ant.master.WorkerHeartbeatRequestPB.registration)
  return registration_ != NULL ? *registration_ : *default_instance_->registration_;
}
inline ::ant::ServerRegistrationPB* WorkerHeartbeatRequestPB::mutable_registration() {
  set_has_registration();
  if (registration_ == NULL) registration_ = new ::ant::ServerRegistrationPB;
  // @@protoc_insertion_point(field_mutable:ant.master.WorkerHeartbeatRequestPB.registration)
  return registration_;
}
inline ::ant::ServerRegistrationPB* WorkerHeartbeatRequestPB::release_registration() {
  clear_has_registration();
  ::ant::ServerRegistrationPB* temp = registration_;
  registration_ = NULL;
  return temp;
}
inline void WorkerHeartbeatRequestPB::set_allocated_registration(::ant::ServerRegistrationPB* registration) {
  delete registration_;
  registration_ = registration;
  if (registration) {
    set_has_registration();
  } else {
    clear_has_registration();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.master.WorkerHeartbeatRequestPB.registration)
}

// optional .ant.master.WorkerReportPB worker_report = 3;
inline bool WorkerHeartbeatRequestPB::has_worker_report() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorkerHeartbeatRequestPB::set_has_worker_report() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorkerHeartbeatRequestPB::clear_has_worker_report() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorkerHeartbeatRequestPB::clear_worker_report() {
  if (worker_report_ != NULL) worker_report_->::ant::master::WorkerReportPB::Clear();
  clear_has_worker_report();
}
inline const ::ant::master::WorkerReportPB& WorkerHeartbeatRequestPB::worker_report() const {
  // @@protoc_insertion_point(field_get:ant.master.WorkerHeartbeatRequestPB.worker_report)
  return worker_report_ != NULL ? *worker_report_ : *default_instance_->worker_report_;
}
inline ::ant::master::WorkerReportPB* WorkerHeartbeatRequestPB::mutable_worker_report() {
  set_has_worker_report();
  if (worker_report_ == NULL) worker_report_ = new ::ant::master::WorkerReportPB;
  // @@protoc_insertion_point(field_mutable:ant.master.WorkerHeartbeatRequestPB.worker_report)
  return worker_report_;
}
inline ::ant::master::WorkerReportPB* WorkerHeartbeatRequestPB::release_worker_report() {
  clear_has_worker_report();
  ::ant::master::WorkerReportPB* temp = worker_report_;
  worker_report_ = NULL;
  return temp;
}
inline void WorkerHeartbeatRequestPB::set_allocated_worker_report(::ant::master::WorkerReportPB* worker_report) {
  delete worker_report_;
  worker_report_ = worker_report;
  if (worker_report) {
    set_has_worker_report();
  } else {
    clear_has_worker_report();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.master.WorkerHeartbeatRequestPB.worker_report)
}

// -------------------------------------------------------------------

// WorkerHeartbeatResponsePB

// optional .ant.master.MasterErrorPB error = 1;
inline bool WorkerHeartbeatResponsePB::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorkerHeartbeatResponsePB::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorkerHeartbeatResponsePB::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorkerHeartbeatResponsePB::clear_error() {
  if (error_ != NULL) error_->::ant::master::MasterErrorPB::Clear();
  clear_has_error();
}
inline const ::ant::master::MasterErrorPB& WorkerHeartbeatResponsePB::error() const {
  // @@protoc_insertion_point(field_get:ant.master.WorkerHeartbeatResponsePB.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::ant::master::MasterErrorPB* WorkerHeartbeatResponsePB::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::ant::master::MasterErrorPB;
  // @@protoc_insertion_point(field_mutable:ant.master.WorkerHeartbeatResponsePB.error)
  return error_;
}
inline ::ant::master::MasterErrorPB* WorkerHeartbeatResponsePB::release_error() {
  clear_has_error();
  ::ant::master::MasterErrorPB* temp = error_;
  error_ = NULL;
  return temp;
}
inline void WorkerHeartbeatResponsePB::set_allocated_error(::ant::master::MasterErrorPB* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.master.WorkerHeartbeatResponsePB.error)
}

// optional .ant.NodeInstancePB master_instance = 2;
inline bool WorkerHeartbeatResponsePB::has_master_instance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorkerHeartbeatResponsePB::set_has_master_instance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorkerHeartbeatResponsePB::clear_has_master_instance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorkerHeartbeatResponsePB::clear_master_instance() {
  if (master_instance_ != NULL) master_instance_->::ant::NodeInstancePB::Clear();
  clear_has_master_instance();
}
inline const ::ant::NodeInstancePB& WorkerHeartbeatResponsePB::master_instance() const {
  // @@protoc_insertion_point(field_get:ant.master.WorkerHeartbeatResponsePB.master_instance)
  return master_instance_ != NULL ? *master_instance_ : *default_instance_->master_instance_;
}
inline ::ant::NodeInstancePB* WorkerHeartbeatResponsePB::mutable_master_instance() {
  set_has_master_instance();
  if (master_instance_ == NULL) master_instance_ = new ::ant::NodeInstancePB;
  // @@protoc_insertion_point(field_mutable:ant.master.WorkerHeartbeatResponsePB.master_instance)
  return master_instance_;
}
inline ::ant::NodeInstancePB* WorkerHeartbeatResponsePB::release_master_instance() {
  clear_has_master_instance();
  ::ant::NodeInstancePB* temp = master_instance_;
  master_instance_ = NULL;
  return temp;
}
inline void WorkerHeartbeatResponsePB::set_allocated_master_instance(::ant::NodeInstancePB* master_instance) {
  delete master_instance_;
  master_instance_ = master_instance;
  if (master_instance) {
    set_has_master_instance();
  } else {
    clear_has_master_instance();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.master.WorkerHeartbeatResponsePB.master_instance)
}

// optional bool needs_reregister = 3 [default = false];
inline bool WorkerHeartbeatResponsePB::has_needs_reregister() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorkerHeartbeatResponsePB::set_has_needs_reregister() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorkerHeartbeatResponsePB::clear_has_needs_reregister() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorkerHeartbeatResponsePB::clear_needs_reregister() {
  needs_reregister_ = false;
  clear_has_needs_reregister();
}
inline bool WorkerHeartbeatResponsePB::needs_reregister() const {
  // @@protoc_insertion_point(field_get:ant.master.WorkerHeartbeatResponsePB.needs_reregister)
  return needs_reregister_;
}
inline void WorkerHeartbeatResponsePB::set_needs_reregister(bool value) {
  set_has_needs_reregister();
  needs_reregister_ = value;
  // @@protoc_insertion_point(field_set:ant.master.WorkerHeartbeatResponsePB.needs_reregister)
}

// optional bool needs_full_worker_report = 4 [default = false];
inline bool WorkerHeartbeatResponsePB::has_needs_full_worker_report() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorkerHeartbeatResponsePB::set_has_needs_full_worker_report() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorkerHeartbeatResponsePB::clear_has_needs_full_worker_report() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorkerHeartbeatResponsePB::clear_needs_full_worker_report() {
  needs_full_worker_report_ = false;
  clear_has_needs_full_worker_report();
}
inline bool WorkerHeartbeatResponsePB::needs_full_worker_report() const {
  // @@protoc_insertion_point(field_get:ant.master.WorkerHeartbeatResponsePB.needs_full_worker_report)
  return needs_full_worker_report_;
}
inline void WorkerHeartbeatResponsePB::set_needs_full_worker_report(bool value) {
  set_has_needs_full_worker_report();
  needs_full_worker_report_ = value;
  // @@protoc_insertion_point(field_set:ant.master.WorkerHeartbeatResponsePB.needs_full_worker_report)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace master
}  // namespace ant

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ant::master::MasterErrorPB_Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ant::master::MasterErrorPB_Code>() {
  return ::ant::master::MasterErrorPB_Code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ant_2fmaster_2fmaster_2eproto__INCLUDED
