// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ant/tests/rpc/rtest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ant/tests/rpc/rtest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ant {
namespace rpc_test {

namespace {

const ::google::protobuf::Descriptor* AddRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRequestPartialPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRequestPartialPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SleepRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SleepRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SleepResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SleepResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendTwoStringsRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendTwoStringsRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendTwoStringsResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendTwoStringsResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* EchoRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EchoRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* EchoResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EchoResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhoAmIRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhoAmIRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhoAmIResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhoAmIResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalculatorError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalculatorError_reflection_ = NULL;
const ::google::protobuf::Descriptor* PanicRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PanicRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PanicResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PanicResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestInvalidResponseRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestInvalidResponseRequestPB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TestInvalidResponseRequestPB_ErrorType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TestInvalidResponseResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestInvalidResponseResponsePB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExactlyOnceRequestPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExactlyOnceRequestPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExactlyOnceResponsePB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExactlyOnceResponsePB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FeatureFlags_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ant_2ftests_2frpc_2frtest_2eproto() {
  protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ant/tests/rpc/rtest.proto");
  GOOGLE_CHECK(file != NULL);
  AddRequestPB_descriptor_ = file->message_type(0);
  static const int AddRequestPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPB, y_),
  };
  AddRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRequestPB_descriptor_,
      AddRequestPB::default_instance_,
      AddRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRequestPB));
  AddRequestPartialPB_descriptor_ = file->message_type(1);
  static const int AddRequestPartialPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPartialPB, x_),
  };
  AddRequestPartialPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRequestPartialPB_descriptor_,
      AddRequestPartialPB::default_instance_,
      AddRequestPartialPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPartialPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRequestPartialPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRequestPartialPB));
  AddResponsePB_descriptor_ = file->message_type(2);
  static const int AddResponsePB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResponsePB, result_),
  };
  AddResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddResponsePB_descriptor_,
      AddResponsePB::default_instance_,
      AddResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddResponsePB));
  SleepRequestPB_descriptor_ = file->message_type(3);
  static const int SleepRequestPB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepRequestPB, sleep_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepRequestPB, deferred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepRequestPB, return_app_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepRequestPB, client_timeout_defined_),
  };
  SleepRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SleepRequestPB_descriptor_,
      SleepRequestPB::default_instance_,
      SleepRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SleepRequestPB));
  SleepResponsePB_descriptor_ = file->message_type(4);
  static const int SleepResponsePB_offsets_[1] = {
  };
  SleepResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SleepResponsePB_descriptor_,
      SleepResponsePB::default_instance_,
      SleepResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SleepResponsePB));
  SendTwoStringsRequestPB_descriptor_ = file->message_type(5);
  static const int SendTwoStringsRequestPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTwoStringsRequestPB, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTwoStringsRequestPB, size1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTwoStringsRequestPB, size2_),
  };
  SendTwoStringsRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendTwoStringsRequestPB_descriptor_,
      SendTwoStringsRequestPB::default_instance_,
      SendTwoStringsRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTwoStringsRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTwoStringsRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendTwoStringsRequestPB));
  SendTwoStringsResponsePB_descriptor_ = file->message_type(6);
  static const int SendTwoStringsResponsePB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTwoStringsResponsePB, sidecar1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTwoStringsResponsePB, sidecar2_),
  };
  SendTwoStringsResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendTwoStringsResponsePB_descriptor_,
      SendTwoStringsResponsePB::default_instance_,
      SendTwoStringsResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTwoStringsResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTwoStringsResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendTwoStringsResponsePB));
  EchoRequestPB_descriptor_ = file->message_type(7);
  static const int EchoRequestPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequestPB, data_),
  };
  EchoRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EchoRequestPB_descriptor_,
      EchoRequestPB::default_instance_,
      EchoRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EchoRequestPB));
  EchoResponsePB_descriptor_ = file->message_type(8);
  static const int EchoResponsePB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponsePB, data_),
  };
  EchoResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EchoResponsePB_descriptor_,
      EchoResponsePB::default_instance_,
      EchoResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EchoResponsePB));
  WhoAmIRequestPB_descriptor_ = file->message_type(9);
  static const int WhoAmIRequestPB_offsets_[1] = {
  };
  WhoAmIRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhoAmIRequestPB_descriptor_,
      WhoAmIRequestPB::default_instance_,
      WhoAmIRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoAmIRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoAmIRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhoAmIRequestPB));
  WhoAmIResponsePB_descriptor_ = file->message_type(10);
  static const int WhoAmIResponsePB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoAmIResponsePB, credentials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoAmIResponsePB, address_),
  };
  WhoAmIResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhoAmIResponsePB_descriptor_,
      WhoAmIResponsePB::default_instance_,
      WhoAmIResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoAmIResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhoAmIResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhoAmIResponsePB));
  CalculatorError_descriptor_ = file->message_type(11);
  static const int CalculatorError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorError, extra_error_data_),
  };
  CalculatorError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalculatorError_descriptor_,
      CalculatorError::default_instance_,
      CalculatorError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalculatorError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalculatorError));
  PanicRequestPB_descriptor_ = file->message_type(12);
  static const int PanicRequestPB_offsets_[1] = {
  };
  PanicRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PanicRequestPB_descriptor_,
      PanicRequestPB::default_instance_,
      PanicRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PanicRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PanicRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PanicRequestPB));
  PanicResponsePB_descriptor_ = file->message_type(13);
  static const int PanicResponsePB_offsets_[1] = {
  };
  PanicResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PanicResponsePB_descriptor_,
      PanicResponsePB::default_instance_,
      PanicResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PanicResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PanicResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PanicResponsePB));
  TestInvalidResponseRequestPB_descriptor_ = file->message_type(14);
  static const int TestInvalidResponseRequestPB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInvalidResponseRequestPB, error_type_),
  };
  TestInvalidResponseRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestInvalidResponseRequestPB_descriptor_,
      TestInvalidResponseRequestPB::default_instance_,
      TestInvalidResponseRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInvalidResponseRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInvalidResponseRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestInvalidResponseRequestPB));
  TestInvalidResponseRequestPB_ErrorType_descriptor_ = TestInvalidResponseRequestPB_descriptor_->enum_type(0);
  TestInvalidResponseResponsePB_descriptor_ = file->message_type(15);
  static const int TestInvalidResponseResponsePB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInvalidResponseResponsePB, response_),
  };
  TestInvalidResponseResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestInvalidResponseResponsePB_descriptor_,
      TestInvalidResponseResponsePB::default_instance_,
      TestInvalidResponseResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInvalidResponseResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInvalidResponseResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestInvalidResponseResponsePB));
  ExactlyOnceRequestPB_descriptor_ = file->message_type(16);
  static const int ExactlyOnceRequestPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRequestPB, sleep_for_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRequestPB, value_to_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRequestPB, randomly_fail_),
  };
  ExactlyOnceRequestPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExactlyOnceRequestPB_descriptor_,
      ExactlyOnceRequestPB::default_instance_,
      ExactlyOnceRequestPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRequestPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceRequestPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExactlyOnceRequestPB));
  ExactlyOnceResponsePB_descriptor_ = file->message_type(17);
  static const int ExactlyOnceResponsePB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceResponsePB, current_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceResponsePB, current_time_micros_),
  };
  ExactlyOnceResponsePB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExactlyOnceResponsePB_descriptor_,
      ExactlyOnceResponsePB::default_instance_,
      ExactlyOnceResponsePB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceResponsePB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExactlyOnceResponsePB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExactlyOnceResponsePB));
  FeatureFlags_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ant_2ftests_2frpc_2frtest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRequestPB_descriptor_, &AddRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRequestPartialPB_descriptor_, &AddRequestPartialPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddResponsePB_descriptor_, &AddResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SleepRequestPB_descriptor_, &SleepRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SleepResponsePB_descriptor_, &SleepResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendTwoStringsRequestPB_descriptor_, &SendTwoStringsRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendTwoStringsResponsePB_descriptor_, &SendTwoStringsResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EchoRequestPB_descriptor_, &EchoRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EchoResponsePB_descriptor_, &EchoResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhoAmIRequestPB_descriptor_, &WhoAmIRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhoAmIResponsePB_descriptor_, &WhoAmIResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalculatorError_descriptor_, &CalculatorError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PanicRequestPB_descriptor_, &PanicRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PanicResponsePB_descriptor_, &PanicResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestInvalidResponseRequestPB_descriptor_, &TestInvalidResponseRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestInvalidResponseResponsePB_descriptor_, &TestInvalidResponseResponsePB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExactlyOnceRequestPB_descriptor_, &ExactlyOnceRequestPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExactlyOnceResponsePB_descriptor_, &ExactlyOnceResponsePB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ant_2ftests_2frpc_2frtest_2eproto() {
  delete AddRequestPB::default_instance_;
  delete AddRequestPB_reflection_;
  delete AddRequestPartialPB::default_instance_;
  delete AddRequestPartialPB_reflection_;
  delete AddResponsePB::default_instance_;
  delete AddResponsePB_reflection_;
  delete SleepRequestPB::default_instance_;
  delete SleepRequestPB_reflection_;
  delete SleepResponsePB::default_instance_;
  delete SleepResponsePB_reflection_;
  delete SendTwoStringsRequestPB::default_instance_;
  delete SendTwoStringsRequestPB_reflection_;
  delete SendTwoStringsResponsePB::default_instance_;
  delete SendTwoStringsResponsePB_reflection_;
  delete EchoRequestPB::default_instance_;
  delete EchoRequestPB_reflection_;
  delete EchoResponsePB::default_instance_;
  delete EchoResponsePB_reflection_;
  delete WhoAmIRequestPB::default_instance_;
  delete WhoAmIRequestPB_reflection_;
  delete WhoAmIResponsePB::default_instance_;
  delete WhoAmIResponsePB_reflection_;
  delete CalculatorError::default_instance_;
  delete CalculatorError_reflection_;
  delete PanicRequestPB::default_instance_;
  delete PanicRequestPB_reflection_;
  delete PanicResponsePB::default_instance_;
  delete PanicResponsePB_reflection_;
  delete TestInvalidResponseRequestPB::default_instance_;
  delete TestInvalidResponseRequestPB_reflection_;
  delete TestInvalidResponseResponsePB::default_instance_;
  delete TestInvalidResponseResponsePB_reflection_;
  delete ExactlyOnceRequestPB::default_instance_;
  delete ExactlyOnceRequestPB_reflection_;
  delete ExactlyOnceResponsePB::default_instance_;
  delete ExactlyOnceResponsePB_reflection_;
}

void protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ant::rpc::protobuf_AddDesc_ant_2frpc_2frpc_5fheader_2eproto();
  ::ant::rpc_test_diff_package::protobuf_AddDesc_ant_2ftests_2frpc_2frtest_5fdiff_5fpackage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031ant/tests/rpc/rtest.proto\022\014ant.rpc_tes"
    "t\032\030ant/rpc/rpc_header.proto\032&ant/tests/r"
    "pc/rtest_diff_package.proto\"$\n\014AddReques"
    "tPB\022\t\n\001x\030\001 \002(\r\022\t\n\001y\030\002 \002(\r\" \n\023AddRequestP"
    "artialPB\022\t\n\001x\030\001 \002(\r\"\037\n\rAddResponsePB\022\016\n\006"
    "result\030\001 \002(\r\"\207\001\n\016SleepRequestPB\022\024\n\014sleep"
    "_micros\030\001 \002(\r\022\027\n\010deferred\030\002 \001(\010:\005false\022\037"
    "\n\020return_app_error\030\003 \001(\010:\005false\022%\n\026clien"
    "t_timeout_defined\030\004 \001(\010:\005false\"\021\n\017SleepR"
    "esponsePB\"L\n\027SendTwoStringsRequestPB\022\023\n\013"
    "random_seed\030\001 \002(\r\022\r\n\005size1\030\002 \002(\004\022\r\n\005size"
    "2\030\003 \002(\004\">\n\030SendTwoStringsResponsePB\022\020\n\010s"
    "idecar1\030\001 \002(\r\022\020\n\010sidecar2\030\002 \002(\r\"\035\n\rEchoR"
    "equestPB\022\014\n\004data\030\001 \002(\t\"\036\n\016EchoResponsePB"
    "\022\014\n\004data\030\001 \002(\t\"\021\n\017WhoAmIRequestPB\"T\n\020Who"
    "AmIResponsePB\022/\n\013credentials\030\001 \002(\0132\032.ant"
    ".rpc.UserInformationPB\022\017\n\007address\030\002 \002(\t\""
    "y\n\017CalculatorError\022\030\n\020extra_error_data\030\001"
    " \002(\t2L\n\rapp_error_ext\022\026.ant.rpc.ErrorSta"
    "tusPB\030e \001(\0132\035.ant.rpc_test.CalculatorErr"
    "or\"\020\n\016PanicRequestPB\"\021\n\017PanicResponsePB\""
    "\251\001\n\034TestInvalidResponseRequestPB\022H\n\nerro"
    "r_type\030\001 \002(\01624.ant.rpc_test.TestInvalidR"
    "esponseRequestPB.ErrorType\"\?\n\tErrorType\022"
    "\032\n\026MISSING_REQUIRED_FIELD\020\001\022\026\n\022RESPONSE_"
    "TOO_LARGE\020\002\"1\n\035TestInvalidResponseRespon"
    "sePB\022\020\n\010response\030\001 \002(\014\"c\n\024ExactlyOnceReq"
    "uestPB\022\027\n\014sleep_for_ms\030\001 \001(\r:\0010\022\024\n\014value"
    "_to_add\030\002 \002(\r\022\034\n\rrandomly_fail\030\003 \001(\010:\005fa"
    "lse\"I\n\025ExactlyOnceResponsePB\022\023\n\013current_"
    "val\030\001 \002(\r\022\033\n\023current_time_micros\030\002 \002(\006*$"
    "\n\014FeatureFlags\022\013\n\007UNKNOWN\020\000\022\007\n\003FOO\020\0012\265\005\n"
    "\021CalculatorService\022>\n\003Add\022\032.ant.rpc_test"
    ".AddRequestPB\032\033.ant.rpc_test.AddResponse"
    "PB\022D\n\005Sleep\022\034.ant.rpc_test.SleepRequestP"
    "B\032\035.ant.rpc_test.SleepResponsePB\022A\n\004Echo"
    "\022\033.ant.rpc_test.EchoRequestPB\032\034.ant.rpc_"
    "test.EchoResponsePB\022G\n\006WhoAmI\022\035.ant.rpc_"
    "test.WhoAmIRequestPB\032\036.ant.rpc_test.WhoA"
    "mIResponsePB\022w\n\032TestArgumentsInDiffPacka"
    "ge\022+.ant.rpc_test_diff_package.ReqDiffPa"
    "ckagePB\032,.ant.rpc_test_diff_package.Resp"
    "DiffPackagePB\022D\n\005Panic\022\034.ant.rpc_test.Pa"
    "nicRequestPB\032\035.ant.rpc_test.PanicRespons"
    "ePB\022_\n\016AddExactlyOnce\022\".ant.rpc_test.Exa"
    "ctlyOnceRequestPB\032#.ant.rpc_test.Exactly"
    "OnceResponsePB\"\004\260\265\030\001\022n\n\023TestInvalidRespo"
    "nse\022*.ant.rpc_test.TestInvalidResponseRe"
    "questPB\032+.ant.rpc_test.TestInvalidRespon"
    "seResponsePB", 1972);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ant/tests/rpc/rtest.proto", &protobuf_RegisterTypes);
  AddRequestPB::default_instance_ = new AddRequestPB();
  AddRequestPartialPB::default_instance_ = new AddRequestPartialPB();
  AddResponsePB::default_instance_ = new AddResponsePB();
  SleepRequestPB::default_instance_ = new SleepRequestPB();
  SleepResponsePB::default_instance_ = new SleepResponsePB();
  SendTwoStringsRequestPB::default_instance_ = new SendTwoStringsRequestPB();
  SendTwoStringsResponsePB::default_instance_ = new SendTwoStringsResponsePB();
  EchoRequestPB::default_instance_ = new EchoRequestPB();
  EchoResponsePB::default_instance_ = new EchoResponsePB();
  WhoAmIRequestPB::default_instance_ = new WhoAmIRequestPB();
  WhoAmIResponsePB::default_instance_ = new WhoAmIResponsePB();
  CalculatorError::default_instance_ = new CalculatorError();
  PanicRequestPB::default_instance_ = new PanicRequestPB();
  PanicResponsePB::default_instance_ = new PanicResponsePB();
  TestInvalidResponseRequestPB::default_instance_ = new TestInvalidResponseRequestPB();
  TestInvalidResponseResponsePB::default_instance_ = new TestInvalidResponseResponsePB();
  ExactlyOnceRequestPB::default_instance_ = new ExactlyOnceRequestPB();
  ExactlyOnceResponsePB::default_instance_ = new ExactlyOnceResponsePB();
  AddRequestPB::default_instance_->InitAsDefaultInstance();
  AddRequestPartialPB::default_instance_->InitAsDefaultInstance();
  AddResponsePB::default_instance_->InitAsDefaultInstance();
  SleepRequestPB::default_instance_->InitAsDefaultInstance();
  SleepResponsePB::default_instance_->InitAsDefaultInstance();
  SendTwoStringsRequestPB::default_instance_->InitAsDefaultInstance();
  SendTwoStringsResponsePB::default_instance_->InitAsDefaultInstance();
  EchoRequestPB::default_instance_->InitAsDefaultInstance();
  EchoResponsePB::default_instance_->InitAsDefaultInstance();
  WhoAmIRequestPB::default_instance_->InitAsDefaultInstance();
  WhoAmIResponsePB::default_instance_->InitAsDefaultInstance();
  CalculatorError::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ant::rpc::ErrorStatusPB::default_instance(),
    101, 11, false, false,
    &::ant::rpc_test::CalculatorError::default_instance());
  PanicRequestPB::default_instance_->InitAsDefaultInstance();
  PanicResponsePB::default_instance_->InitAsDefaultInstance();
  TestInvalidResponseRequestPB::default_instance_->InitAsDefaultInstance();
  TestInvalidResponseResponsePB::default_instance_->InitAsDefaultInstance();
  ExactlyOnceRequestPB::default_instance_->InitAsDefaultInstance();
  ExactlyOnceResponsePB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ant_2ftests_2frpc_2frtest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ant_2ftests_2frpc_2frtest_2eproto {
  StaticDescriptorInitializer_ant_2ftests_2frpc_2frtest_2eproto() {
    protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  }
} static_descriptor_initializer_ant_2ftests_2frpc_2frtest_2eproto_;
const ::google::protobuf::EnumDescriptor* FeatureFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureFlags_descriptor_;
}
bool FeatureFlags_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AddRequestPB::kXFieldNumber;
const int AddRequestPB::kYFieldNumber;
#endif  // !_MSC_VER

AddRequestPB::AddRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.AddRequestPB)
}

void AddRequestPB::InitAsDefaultInstance() {
}

AddRequestPB::AddRequestPB(const AddRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.AddRequestPB)
}

void AddRequestPB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRequestPB::~AddRequestPB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.AddRequestPB)
  SharedDtor();
}

void AddRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRequestPB_descriptor_;
}

const AddRequestPB& AddRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

AddRequestPB* AddRequestPB::default_instance_ = NULL;

AddRequestPB* AddRequestPB::New() const {
  return new AddRequestPB;
}

void AddRequestPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddRequestPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.AddRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.AddRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.AddRequestPB)
  return false;
#undef DO_
}

void AddRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.AddRequestPB)
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.AddRequestPB)
}

::google::protobuf::uint8* AddRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.AddRequestPB)
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.AddRequestPB)
  return target;
}

int AddRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRequestPB::MergeFrom(const AddRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRequestPB::CopyFrom(const AddRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddRequestPB::Swap(AddRequestPB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRequestPB_descriptor_;
  metadata.reflection = AddRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRequestPartialPB::kXFieldNumber;
#endif  // !_MSC_VER

AddRequestPartialPB::AddRequestPartialPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.AddRequestPartialPB)
}

void AddRequestPartialPB::InitAsDefaultInstance() {
}

AddRequestPartialPB::AddRequestPartialPB(const AddRequestPartialPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.AddRequestPartialPB)
}

void AddRequestPartialPB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRequestPartialPB::~AddRequestPartialPB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.AddRequestPartialPB)
  SharedDtor();
}

void AddRequestPartialPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddRequestPartialPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRequestPartialPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRequestPartialPB_descriptor_;
}

const AddRequestPartialPB& AddRequestPartialPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

AddRequestPartialPB* AddRequestPartialPB::default_instance_ = NULL;

AddRequestPartialPB* AddRequestPartialPB::New() const {
  return new AddRequestPartialPB;
}

void AddRequestPartialPB::Clear() {
  x_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRequestPartialPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.AddRequestPartialPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.AddRequestPartialPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.AddRequestPartialPB)
  return false;
#undef DO_
}

void AddRequestPartialPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.AddRequestPartialPB)
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.AddRequestPartialPB)
}

::google::protobuf::uint8* AddRequestPartialPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.AddRequestPartialPB)
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.AddRequestPartialPB)
  return target;
}

int AddRequestPartialPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRequestPartialPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRequestPartialPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRequestPartialPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRequestPartialPB::MergeFrom(const AddRequestPartialPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRequestPartialPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRequestPartialPB::CopyFrom(const AddRequestPartialPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRequestPartialPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddRequestPartialPB::Swap(AddRequestPartialPB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRequestPartialPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRequestPartialPB_descriptor_;
  metadata.reflection = AddRequestPartialPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddResponsePB::kResultFieldNumber;
#endif  // !_MSC_VER

AddResponsePB::AddResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.AddResponsePB)
}

void AddResponsePB::InitAsDefaultInstance() {
}

AddResponsePB::AddResponsePB(const AddResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.AddResponsePB)
}

void AddResponsePB::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddResponsePB::~AddResponsePB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.AddResponsePB)
  SharedDtor();
}

void AddResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddResponsePB_descriptor_;
}

const AddResponsePB& AddResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

AddResponsePB* AddResponsePB::default_instance_ = NULL;

AddResponsePB* AddResponsePB::New() const {
  return new AddResponsePB;
}

void AddResponsePB::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.AddResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.AddResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.AddResponsePB)
  return false;
#undef DO_
}

void AddResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.AddResponsePB)
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.AddResponsePB)
}

::google::protobuf::uint8* AddResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.AddResponsePB)
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.AddResponsePB)
  return target;
}

int AddResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddResponsePB::MergeFrom(const AddResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddResponsePB::CopyFrom(const AddResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddResponsePB::Swap(AddResponsePB* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddResponsePB_descriptor_;
  metadata.reflection = AddResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SleepRequestPB::kSleepMicrosFieldNumber;
const int SleepRequestPB::kDeferredFieldNumber;
const int SleepRequestPB::kReturnAppErrorFieldNumber;
const int SleepRequestPB::kClientTimeoutDefinedFieldNumber;
#endif  // !_MSC_VER

SleepRequestPB::SleepRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.SleepRequestPB)
}

void SleepRequestPB::InitAsDefaultInstance() {
}

SleepRequestPB::SleepRequestPB(const SleepRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.SleepRequestPB)
}

void SleepRequestPB::SharedCtor() {
  _cached_size_ = 0;
  sleep_micros_ = 0u;
  deferred_ = false;
  return_app_error_ = false;
  client_timeout_defined_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SleepRequestPB::~SleepRequestPB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.SleepRequestPB)
  SharedDtor();
}

void SleepRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SleepRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SleepRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SleepRequestPB_descriptor_;
}

const SleepRequestPB& SleepRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

SleepRequestPB* SleepRequestPB::default_instance_ = NULL;

SleepRequestPB* SleepRequestPB::New() const {
  return new SleepRequestPB;
}

void SleepRequestPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SleepRequestPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sleep_micros_, client_timeout_defined_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SleepRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.SleepRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sleep_micros = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sleep_micros_)));
          set_has_sleep_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_deferred;
        break;
      }

      // optional bool deferred = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_deferred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deferred_)));
          set_has_deferred();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_return_app_error;
        break;
      }

      // optional bool return_app_error = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_return_app_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_app_error_)));
          set_has_return_app_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_client_timeout_defined;
        break;
      }

      // optional bool client_timeout_defined = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_client_timeout_defined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_timeout_defined_)));
          set_has_client_timeout_defined();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.SleepRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.SleepRequestPB)
  return false;
#undef DO_
}

void SleepRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.SleepRequestPB)
  // required uint32 sleep_micros = 1;
  if (has_sleep_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sleep_micros(), output);
  }

  // optional bool deferred = 2 [default = false];
  if (has_deferred()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->deferred(), output);
  }

  // optional bool return_app_error = 3 [default = false];
  if (has_return_app_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->return_app_error(), output);
  }

  // optional bool client_timeout_defined = 4 [default = false];
  if (has_client_timeout_defined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->client_timeout_defined(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.SleepRequestPB)
}

::google::protobuf::uint8* SleepRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.SleepRequestPB)
  // required uint32 sleep_micros = 1;
  if (has_sleep_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sleep_micros(), target);
  }

  // optional bool deferred = 2 [default = false];
  if (has_deferred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->deferred(), target);
  }

  // optional bool return_app_error = 3 [default = false];
  if (has_return_app_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->return_app_error(), target);
  }

  // optional bool client_timeout_defined = 4 [default = false];
  if (has_client_timeout_defined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->client_timeout_defined(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.SleepRequestPB)
  return target;
}

int SleepRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sleep_micros = 1;
    if (has_sleep_micros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sleep_micros());
    }

    // optional bool deferred = 2 [default = false];
    if (has_deferred()) {
      total_size += 1 + 1;
    }

    // optional bool return_app_error = 3 [default = false];
    if (has_return_app_error()) {
      total_size += 1 + 1;
    }

    // optional bool client_timeout_defined = 4 [default = false];
    if (has_client_timeout_defined()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SleepRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SleepRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SleepRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SleepRequestPB::MergeFrom(const SleepRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sleep_micros()) {
      set_sleep_micros(from.sleep_micros());
    }
    if (from.has_deferred()) {
      set_deferred(from.deferred());
    }
    if (from.has_return_app_error()) {
      set_return_app_error(from.return_app_error());
    }
    if (from.has_client_timeout_defined()) {
      set_client_timeout_defined(from.client_timeout_defined());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SleepRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SleepRequestPB::CopyFrom(const SleepRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SleepRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SleepRequestPB::Swap(SleepRequestPB* other) {
  if (other != this) {
    std::swap(sleep_micros_, other->sleep_micros_);
    std::swap(deferred_, other->deferred_);
    std::swap(return_app_error_, other->return_app_error_);
    std::swap(client_timeout_defined_, other->client_timeout_defined_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SleepRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SleepRequestPB_descriptor_;
  metadata.reflection = SleepRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SleepResponsePB::SleepResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.SleepResponsePB)
}

void SleepResponsePB::InitAsDefaultInstance() {
}

SleepResponsePB::SleepResponsePB(const SleepResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.SleepResponsePB)
}

void SleepResponsePB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SleepResponsePB::~SleepResponsePB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.SleepResponsePB)
  SharedDtor();
}

void SleepResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SleepResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SleepResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SleepResponsePB_descriptor_;
}

const SleepResponsePB& SleepResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

SleepResponsePB* SleepResponsePB::default_instance_ = NULL;

SleepResponsePB* SleepResponsePB::New() const {
  return new SleepResponsePB;
}

void SleepResponsePB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SleepResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.SleepResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.SleepResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.SleepResponsePB)
  return false;
#undef DO_
}

void SleepResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.SleepResponsePB)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.SleepResponsePB)
}

::google::protobuf::uint8* SleepResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.SleepResponsePB)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.SleepResponsePB)
  return target;
}

int SleepResponsePB::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SleepResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SleepResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SleepResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SleepResponsePB::MergeFrom(const SleepResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SleepResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SleepResponsePB::CopyFrom(const SleepResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SleepResponsePB::IsInitialized() const {

  return true;
}

void SleepResponsePB::Swap(SleepResponsePB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SleepResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SleepResponsePB_descriptor_;
  metadata.reflection = SleepResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendTwoStringsRequestPB::kRandomSeedFieldNumber;
const int SendTwoStringsRequestPB::kSize1FieldNumber;
const int SendTwoStringsRequestPB::kSize2FieldNumber;
#endif  // !_MSC_VER

SendTwoStringsRequestPB::SendTwoStringsRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.SendTwoStringsRequestPB)
}

void SendTwoStringsRequestPB::InitAsDefaultInstance() {
}

SendTwoStringsRequestPB::SendTwoStringsRequestPB(const SendTwoStringsRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.SendTwoStringsRequestPB)
}

void SendTwoStringsRequestPB::SharedCtor() {
  _cached_size_ = 0;
  random_seed_ = 0u;
  size1_ = GOOGLE_ULONGLONG(0);
  size2_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendTwoStringsRequestPB::~SendTwoStringsRequestPB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.SendTwoStringsRequestPB)
  SharedDtor();
}

void SendTwoStringsRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendTwoStringsRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendTwoStringsRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendTwoStringsRequestPB_descriptor_;
}

const SendTwoStringsRequestPB& SendTwoStringsRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

SendTwoStringsRequestPB* SendTwoStringsRequestPB::default_instance_ = NULL;

SendTwoStringsRequestPB* SendTwoStringsRequestPB::New() const {
  return new SendTwoStringsRequestPB;
}

void SendTwoStringsRequestPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendTwoStringsRequestPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(size1_, random_seed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendTwoStringsRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.SendTwoStringsRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 random_seed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size1;
        break;
      }

      // required uint64 size1 = 2;
      case 2: {
        if (tag == 16) {
         parse_size1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size1_)));
          set_has_size1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size2;
        break;
      }

      // required uint64 size2 = 3;
      case 3: {
        if (tag == 24) {
         parse_size2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size2_)));
          set_has_size2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.SendTwoStringsRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.SendTwoStringsRequestPB)
  return false;
#undef DO_
}

void SendTwoStringsRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.SendTwoStringsRequestPB)
  // required uint32 random_seed = 1;
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->random_seed(), output);
  }

  // required uint64 size1 = 2;
  if (has_size1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size1(), output);
  }

  // required uint64 size2 = 3;
  if (has_size2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.SendTwoStringsRequestPB)
}

::google::protobuf::uint8* SendTwoStringsRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.SendTwoStringsRequestPB)
  // required uint32 random_seed = 1;
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->random_seed(), target);
  }

  // required uint64 size1 = 2;
  if (has_size1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size1(), target);
  }

  // required uint64 size2 = 3;
  if (has_size2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.SendTwoStringsRequestPB)
  return target;
}

int SendTwoStringsRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 random_seed = 1;
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_seed());
    }

    // required uint64 size1 = 2;
    if (has_size1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size1());
    }

    // required uint64 size2 = 3;
    if (has_size2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendTwoStringsRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendTwoStringsRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendTwoStringsRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendTwoStringsRequestPB::MergeFrom(const SendTwoStringsRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_size1()) {
      set_size1(from.size1());
    }
    if (from.has_size2()) {
      set_size2(from.size2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendTwoStringsRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendTwoStringsRequestPB::CopyFrom(const SendTwoStringsRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTwoStringsRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SendTwoStringsRequestPB::Swap(SendTwoStringsRequestPB* other) {
  if (other != this) {
    std::swap(random_seed_, other->random_seed_);
    std::swap(size1_, other->size1_);
    std::swap(size2_, other->size2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendTwoStringsRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendTwoStringsRequestPB_descriptor_;
  metadata.reflection = SendTwoStringsRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendTwoStringsResponsePB::kSidecar1FieldNumber;
const int SendTwoStringsResponsePB::kSidecar2FieldNumber;
#endif  // !_MSC_VER

SendTwoStringsResponsePB::SendTwoStringsResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.SendTwoStringsResponsePB)
}

void SendTwoStringsResponsePB::InitAsDefaultInstance() {
}

SendTwoStringsResponsePB::SendTwoStringsResponsePB(const SendTwoStringsResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.SendTwoStringsResponsePB)
}

void SendTwoStringsResponsePB::SharedCtor() {
  _cached_size_ = 0;
  sidecar1_ = 0u;
  sidecar2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendTwoStringsResponsePB::~SendTwoStringsResponsePB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.SendTwoStringsResponsePB)
  SharedDtor();
}

void SendTwoStringsResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendTwoStringsResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendTwoStringsResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendTwoStringsResponsePB_descriptor_;
}

const SendTwoStringsResponsePB& SendTwoStringsResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

SendTwoStringsResponsePB* SendTwoStringsResponsePB::default_instance_ = NULL;

SendTwoStringsResponsePB* SendTwoStringsResponsePB::New() const {
  return new SendTwoStringsResponsePB;
}

void SendTwoStringsResponsePB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendTwoStringsResponsePB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sidecar1_, sidecar2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendTwoStringsResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.SendTwoStringsResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sidecar1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sidecar1_)));
          set_has_sidecar1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sidecar2;
        break;
      }

      // required uint32 sidecar2 = 2;
      case 2: {
        if (tag == 16) {
         parse_sidecar2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sidecar2_)));
          set_has_sidecar2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.SendTwoStringsResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.SendTwoStringsResponsePB)
  return false;
#undef DO_
}

void SendTwoStringsResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.SendTwoStringsResponsePB)
  // required uint32 sidecar1 = 1;
  if (has_sidecar1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sidecar1(), output);
  }

  // required uint32 sidecar2 = 2;
  if (has_sidecar2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sidecar2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.SendTwoStringsResponsePB)
}

::google::protobuf::uint8* SendTwoStringsResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.SendTwoStringsResponsePB)
  // required uint32 sidecar1 = 1;
  if (has_sidecar1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sidecar1(), target);
  }

  // required uint32 sidecar2 = 2;
  if (has_sidecar2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sidecar2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.SendTwoStringsResponsePB)
  return target;
}

int SendTwoStringsResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sidecar1 = 1;
    if (has_sidecar1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sidecar1());
    }

    // required uint32 sidecar2 = 2;
    if (has_sidecar2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sidecar2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendTwoStringsResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendTwoStringsResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendTwoStringsResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendTwoStringsResponsePB::MergeFrom(const SendTwoStringsResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sidecar1()) {
      set_sidecar1(from.sidecar1());
    }
    if (from.has_sidecar2()) {
      set_sidecar2(from.sidecar2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendTwoStringsResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendTwoStringsResponsePB::CopyFrom(const SendTwoStringsResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTwoStringsResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SendTwoStringsResponsePB::Swap(SendTwoStringsResponsePB* other) {
  if (other != this) {
    std::swap(sidecar1_, other->sidecar1_);
    std::swap(sidecar2_, other->sidecar2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendTwoStringsResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendTwoStringsResponsePB_descriptor_;
  metadata.reflection = SendTwoStringsResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EchoRequestPB::kDataFieldNumber;
#endif  // !_MSC_VER

EchoRequestPB::EchoRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.EchoRequestPB)
}

void EchoRequestPB::InitAsDefaultInstance() {
}

EchoRequestPB::EchoRequestPB(const EchoRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.EchoRequestPB)
}

void EchoRequestPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EchoRequestPB::~EchoRequestPB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.EchoRequestPB)
  SharedDtor();
}

void EchoRequestPB::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void EchoRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EchoRequestPB_descriptor_;
}

const EchoRequestPB& EchoRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

EchoRequestPB* EchoRequestPB::default_instance_ = NULL;

EchoRequestPB* EchoRequestPB::New() const {
  return new EchoRequestPB;
}

void EchoRequestPB::Clear() {
  if (has_data()) {
    if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EchoRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.EchoRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.EchoRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.EchoRequestPB)
  return false;
#undef DO_
}

void EchoRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.EchoRequestPB)
  // required string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.EchoRequestPB)
}

::google::protobuf::uint8* EchoRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.EchoRequestPB)
  // required string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.EchoRequestPB)
  return target;
}

int EchoRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EchoRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EchoRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EchoRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EchoRequestPB::MergeFrom(const EchoRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EchoRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoRequestPB::CopyFrom(const EchoRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EchoRequestPB::Swap(EchoRequestPB* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EchoRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EchoRequestPB_descriptor_;
  metadata.reflection = EchoRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EchoResponsePB::kDataFieldNumber;
#endif  // !_MSC_VER

EchoResponsePB::EchoResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.EchoResponsePB)
}

void EchoResponsePB::InitAsDefaultInstance() {
}

EchoResponsePB::EchoResponsePB(const EchoResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.EchoResponsePB)
}

void EchoResponsePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EchoResponsePB::~EchoResponsePB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.EchoResponsePB)
  SharedDtor();
}

void EchoResponsePB::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void EchoResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EchoResponsePB_descriptor_;
}

const EchoResponsePB& EchoResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

EchoResponsePB* EchoResponsePB::default_instance_ = NULL;

EchoResponsePB* EchoResponsePB::New() const {
  return new EchoResponsePB;
}

void EchoResponsePB::Clear() {
  if (has_data()) {
    if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      data_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EchoResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.EchoResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.EchoResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.EchoResponsePB)
  return false;
#undef DO_
}

void EchoResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.EchoResponsePB)
  // required string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.EchoResponsePB)
}

::google::protobuf::uint8* EchoResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.EchoResponsePB)
  // required string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.EchoResponsePB)
  return target;
}

int EchoResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EchoResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EchoResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EchoResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EchoResponsePB::MergeFrom(const EchoResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EchoResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoResponsePB::CopyFrom(const EchoResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EchoResponsePB::Swap(EchoResponsePB* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EchoResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EchoResponsePB_descriptor_;
  metadata.reflection = EchoResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WhoAmIRequestPB::WhoAmIRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.WhoAmIRequestPB)
}

void WhoAmIRequestPB::InitAsDefaultInstance() {
}

WhoAmIRequestPB::WhoAmIRequestPB(const WhoAmIRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.WhoAmIRequestPB)
}

void WhoAmIRequestPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhoAmIRequestPB::~WhoAmIRequestPB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.WhoAmIRequestPB)
  SharedDtor();
}

void WhoAmIRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WhoAmIRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhoAmIRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhoAmIRequestPB_descriptor_;
}

const WhoAmIRequestPB& WhoAmIRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

WhoAmIRequestPB* WhoAmIRequestPB::default_instance_ = NULL;

WhoAmIRequestPB* WhoAmIRequestPB::New() const {
  return new WhoAmIRequestPB;
}

void WhoAmIRequestPB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhoAmIRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.WhoAmIRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.WhoAmIRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.WhoAmIRequestPB)
  return false;
#undef DO_
}

void WhoAmIRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.WhoAmIRequestPB)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.WhoAmIRequestPB)
}

::google::protobuf::uint8* WhoAmIRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.WhoAmIRequestPB)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.WhoAmIRequestPB)
  return target;
}

int WhoAmIRequestPB::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhoAmIRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhoAmIRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhoAmIRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhoAmIRequestPB::MergeFrom(const WhoAmIRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhoAmIRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhoAmIRequestPB::CopyFrom(const WhoAmIRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhoAmIRequestPB::IsInitialized() const {

  return true;
}

void WhoAmIRequestPB::Swap(WhoAmIRequestPB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhoAmIRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhoAmIRequestPB_descriptor_;
  metadata.reflection = WhoAmIRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WhoAmIResponsePB::kCredentialsFieldNumber;
const int WhoAmIResponsePB::kAddressFieldNumber;
#endif  // !_MSC_VER

WhoAmIResponsePB::WhoAmIResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.WhoAmIResponsePB)
}

void WhoAmIResponsePB::InitAsDefaultInstance() {
  credentials_ = const_cast< ::ant::rpc::UserInformationPB*>(&::ant::rpc::UserInformationPB::default_instance());
}

WhoAmIResponsePB::WhoAmIResponsePB(const WhoAmIResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.WhoAmIResponsePB)
}

void WhoAmIResponsePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  credentials_ = NULL;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhoAmIResponsePB::~WhoAmIResponsePB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.WhoAmIResponsePB)
  SharedDtor();
}

void WhoAmIResponsePB::SharedDtor() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
    delete credentials_;
  }
}

void WhoAmIResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhoAmIResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhoAmIResponsePB_descriptor_;
}

const WhoAmIResponsePB& WhoAmIResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

WhoAmIResponsePB* WhoAmIResponsePB::default_instance_ = NULL;

WhoAmIResponsePB* WhoAmIResponsePB::New() const {
  return new WhoAmIResponsePB;
}

void WhoAmIResponsePB::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_credentials()) {
      if (credentials_ != NULL) credentials_->::ant::rpc::UserInformationPB::Clear();
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhoAmIResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.WhoAmIResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ant.rpc.UserInformationPB credentials = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credentials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // required string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.WhoAmIResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.WhoAmIResponsePB)
  return false;
#undef DO_
}

void WhoAmIResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.WhoAmIResponsePB)
  // required .ant.rpc.UserInformationPB credentials = 1;
  if (has_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->credentials(), output);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.WhoAmIResponsePB)
}

::google::protobuf::uint8* WhoAmIResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.WhoAmIResponsePB)
  // required .ant.rpc.UserInformationPB credentials = 1;
  if (has_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->credentials(), target);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.WhoAmIResponsePB)
  return target;
}

int WhoAmIResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ant.rpc.UserInformationPB credentials = 1;
    if (has_credentials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->credentials());
    }

    // required string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhoAmIResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhoAmIResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhoAmIResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhoAmIResponsePB::MergeFrom(const WhoAmIResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_credentials()) {
      mutable_credentials()->::ant::rpc::UserInformationPB::MergeFrom(from.credentials());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhoAmIResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhoAmIResponsePB::CopyFrom(const WhoAmIResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhoAmIResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_credentials()) {
    if (!this->credentials().IsInitialized()) return false;
  }
  return true;
}

void WhoAmIResponsePB::Swap(WhoAmIResponsePB* other) {
  if (other != this) {
    std::swap(credentials_, other->credentials_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhoAmIResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhoAmIResponsePB_descriptor_;
  metadata.reflection = WhoAmIResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalculatorError::kExtraErrorDataFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CalculatorError::kAppErrorExtFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ant::rpc::ErrorStatusPB,
    ::google::protobuf::internal::MessageTypeTraits< ::ant::rpc_test::CalculatorError >, 11, false >
  CalculatorError::app_error_ext(kAppErrorExtFieldNumber, ::ant::rpc_test::CalculatorError::default_instance());
CalculatorError::CalculatorError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.CalculatorError)
}

void CalculatorError::InitAsDefaultInstance() {
}

CalculatorError::CalculatorError(const CalculatorError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.CalculatorError)
}

void CalculatorError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  extra_error_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalculatorError::~CalculatorError() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.CalculatorError)
  SharedDtor();
}

void CalculatorError::SharedDtor() {
  if (extra_error_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_error_data_;
  }
  if (this != default_instance_) {
  }
}

void CalculatorError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalculatorError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalculatorError_descriptor_;
}

const CalculatorError& CalculatorError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

CalculatorError* CalculatorError::default_instance_ = NULL;

CalculatorError* CalculatorError::New() const {
  return new CalculatorError;
}

void CalculatorError::Clear() {
  if (has_extra_error_data()) {
    if (extra_error_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      extra_error_data_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalculatorError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.CalculatorError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string extra_error_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_error_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra_error_data().data(), this->extra_error_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extra_error_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.CalculatorError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.CalculatorError)
  return false;
#undef DO_
}

void CalculatorError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.CalculatorError)
  // required string extra_error_data = 1;
  if (has_extra_error_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_error_data().data(), this->extra_error_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra_error_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->extra_error_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.CalculatorError)
}

::google::protobuf::uint8* CalculatorError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.CalculatorError)
  // required string extra_error_data = 1;
  if (has_extra_error_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_error_data().data(), this->extra_error_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra_error_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->extra_error_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.CalculatorError)
  return target;
}

int CalculatorError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string extra_error_data = 1;
    if (has_extra_error_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_error_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalculatorError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalculatorError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalculatorError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalculatorError::MergeFrom(const CalculatorError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_extra_error_data()) {
      set_extra_error_data(from.extra_error_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalculatorError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculatorError::CopyFrom(const CalculatorError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculatorError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CalculatorError::Swap(CalculatorError* other) {
  if (other != this) {
    std::swap(extra_error_data_, other->extra_error_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalculatorError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalculatorError_descriptor_;
  metadata.reflection = CalculatorError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PanicRequestPB::PanicRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.PanicRequestPB)
}

void PanicRequestPB::InitAsDefaultInstance() {
}

PanicRequestPB::PanicRequestPB(const PanicRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.PanicRequestPB)
}

void PanicRequestPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PanicRequestPB::~PanicRequestPB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.PanicRequestPB)
  SharedDtor();
}

void PanicRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PanicRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PanicRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PanicRequestPB_descriptor_;
}

const PanicRequestPB& PanicRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

PanicRequestPB* PanicRequestPB::default_instance_ = NULL;

PanicRequestPB* PanicRequestPB::New() const {
  return new PanicRequestPB;
}

void PanicRequestPB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PanicRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.PanicRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.PanicRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.PanicRequestPB)
  return false;
#undef DO_
}

void PanicRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.PanicRequestPB)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.PanicRequestPB)
}

::google::protobuf::uint8* PanicRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.PanicRequestPB)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.PanicRequestPB)
  return target;
}

int PanicRequestPB::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PanicRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PanicRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PanicRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PanicRequestPB::MergeFrom(const PanicRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PanicRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PanicRequestPB::CopyFrom(const PanicRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PanicRequestPB::IsInitialized() const {

  return true;
}

void PanicRequestPB::Swap(PanicRequestPB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PanicRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PanicRequestPB_descriptor_;
  metadata.reflection = PanicRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PanicResponsePB::PanicResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.PanicResponsePB)
}

void PanicResponsePB::InitAsDefaultInstance() {
}

PanicResponsePB::PanicResponsePB(const PanicResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.PanicResponsePB)
}

void PanicResponsePB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PanicResponsePB::~PanicResponsePB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.PanicResponsePB)
  SharedDtor();
}

void PanicResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PanicResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PanicResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PanicResponsePB_descriptor_;
}

const PanicResponsePB& PanicResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

PanicResponsePB* PanicResponsePB::default_instance_ = NULL;

PanicResponsePB* PanicResponsePB::New() const {
  return new PanicResponsePB;
}

void PanicResponsePB::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PanicResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.PanicResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.PanicResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.PanicResponsePB)
  return false;
#undef DO_
}

void PanicResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.PanicResponsePB)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.PanicResponsePB)
}

::google::protobuf::uint8* PanicResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.PanicResponsePB)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.PanicResponsePB)
  return target;
}

int PanicResponsePB::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PanicResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PanicResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PanicResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PanicResponsePB::MergeFrom(const PanicResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PanicResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PanicResponsePB::CopyFrom(const PanicResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PanicResponsePB::IsInitialized() const {

  return true;
}

void PanicResponsePB::Swap(PanicResponsePB* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PanicResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PanicResponsePB_descriptor_;
  metadata.reflection = PanicResponsePB_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TestInvalidResponseRequestPB_ErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestInvalidResponseRequestPB_ErrorType_descriptor_;
}
bool TestInvalidResponseRequestPB_ErrorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TestInvalidResponseRequestPB_ErrorType TestInvalidResponseRequestPB::MISSING_REQUIRED_FIELD;
const TestInvalidResponseRequestPB_ErrorType TestInvalidResponseRequestPB::RESPONSE_TOO_LARGE;
const TestInvalidResponseRequestPB_ErrorType TestInvalidResponseRequestPB::ErrorType_MIN;
const TestInvalidResponseRequestPB_ErrorType TestInvalidResponseRequestPB::ErrorType_MAX;
const int TestInvalidResponseRequestPB::ErrorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TestInvalidResponseRequestPB::kErrorTypeFieldNumber;
#endif  // !_MSC_VER

TestInvalidResponseRequestPB::TestInvalidResponseRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.TestInvalidResponseRequestPB)
}

void TestInvalidResponseRequestPB::InitAsDefaultInstance() {
}

TestInvalidResponseRequestPB::TestInvalidResponseRequestPB(const TestInvalidResponseRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.TestInvalidResponseRequestPB)
}

void TestInvalidResponseRequestPB::SharedCtor() {
  _cached_size_ = 0;
  error_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestInvalidResponseRequestPB::~TestInvalidResponseRequestPB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.TestInvalidResponseRequestPB)
  SharedDtor();
}

void TestInvalidResponseRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestInvalidResponseRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestInvalidResponseRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestInvalidResponseRequestPB_descriptor_;
}

const TestInvalidResponseRequestPB& TestInvalidResponseRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

TestInvalidResponseRequestPB* TestInvalidResponseRequestPB::default_instance_ = NULL;

TestInvalidResponseRequestPB* TestInvalidResponseRequestPB::New() const {
  return new TestInvalidResponseRequestPB;
}

void TestInvalidResponseRequestPB::Clear() {
  error_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestInvalidResponseRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.TestInvalidResponseRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ant.rpc_test.TestInvalidResponseRequestPB.ErrorType error_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ant::rpc_test::TestInvalidResponseRequestPB_ErrorType_IsValid(value)) {
            set_error_type(static_cast< ::ant::rpc_test::TestInvalidResponseRequestPB_ErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.TestInvalidResponseRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.TestInvalidResponseRequestPB)
  return false;
#undef DO_
}

void TestInvalidResponseRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.TestInvalidResponseRequestPB)
  // required .ant.rpc_test.TestInvalidResponseRequestPB.ErrorType error_type = 1;
  if (has_error_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.TestInvalidResponseRequestPB)
}

::google::protobuf::uint8* TestInvalidResponseRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.TestInvalidResponseRequestPB)
  // required .ant.rpc_test.TestInvalidResponseRequestPB.ErrorType error_type = 1;
  if (has_error_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.TestInvalidResponseRequestPB)
  return target;
}

int TestInvalidResponseRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ant.rpc_test.TestInvalidResponseRequestPB.ErrorType error_type = 1;
    if (has_error_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestInvalidResponseRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestInvalidResponseRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestInvalidResponseRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestInvalidResponseRequestPB::MergeFrom(const TestInvalidResponseRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_type()) {
      set_error_type(from.error_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestInvalidResponseRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestInvalidResponseRequestPB::CopyFrom(const TestInvalidResponseRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestInvalidResponseRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestInvalidResponseRequestPB::Swap(TestInvalidResponseRequestPB* other) {
  if (other != this) {
    std::swap(error_type_, other->error_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestInvalidResponseRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestInvalidResponseRequestPB_descriptor_;
  metadata.reflection = TestInvalidResponseRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestInvalidResponseResponsePB::kResponseFieldNumber;
#endif  // !_MSC_VER

TestInvalidResponseResponsePB::TestInvalidResponseResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.TestInvalidResponseResponsePB)
}

void TestInvalidResponseResponsePB::InitAsDefaultInstance() {
}

TestInvalidResponseResponsePB::TestInvalidResponseResponsePB(const TestInvalidResponseResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.TestInvalidResponseResponsePB)
}

void TestInvalidResponseResponsePB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestInvalidResponseResponsePB::~TestInvalidResponseResponsePB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.TestInvalidResponseResponsePB)
  SharedDtor();
}

void TestInvalidResponseResponsePB::SharedDtor() {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_;
  }
  if (this != default_instance_) {
  }
}

void TestInvalidResponseResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestInvalidResponseResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestInvalidResponseResponsePB_descriptor_;
}

const TestInvalidResponseResponsePB& TestInvalidResponseResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

TestInvalidResponseResponsePB* TestInvalidResponseResponsePB::default_instance_ = NULL;

TestInvalidResponseResponsePB* TestInvalidResponseResponsePB::New() const {
  return new TestInvalidResponseResponsePB;
}

void TestInvalidResponseResponsePB::Clear() {
  if (has_response()) {
    if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      response_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestInvalidResponseResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.TestInvalidResponseResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes response = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.TestInvalidResponseResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.TestInvalidResponseResponsePB)
  return false;
#undef DO_
}

void TestInvalidResponseResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.TestInvalidResponseResponsePB)
  // required bytes response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.TestInvalidResponseResponsePB)
}

::google::protobuf::uint8* TestInvalidResponseResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.TestInvalidResponseResponsePB)
  // required bytes response = 1;
  if (has_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.TestInvalidResponseResponsePB)
  return target;
}

int TestInvalidResponseResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestInvalidResponseResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestInvalidResponseResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestInvalidResponseResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestInvalidResponseResponsePB::MergeFrom(const TestInvalidResponseResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestInvalidResponseResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestInvalidResponseResponsePB::CopyFrom(const TestInvalidResponseResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestInvalidResponseResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestInvalidResponseResponsePB::Swap(TestInvalidResponseResponsePB* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestInvalidResponseResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestInvalidResponseResponsePB_descriptor_;
  metadata.reflection = TestInvalidResponseResponsePB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExactlyOnceRequestPB::kSleepForMsFieldNumber;
const int ExactlyOnceRequestPB::kValueToAddFieldNumber;
const int ExactlyOnceRequestPB::kRandomlyFailFieldNumber;
#endif  // !_MSC_VER

ExactlyOnceRequestPB::ExactlyOnceRequestPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.ExactlyOnceRequestPB)
}

void ExactlyOnceRequestPB::InitAsDefaultInstance() {
}

ExactlyOnceRequestPB::ExactlyOnceRequestPB(const ExactlyOnceRequestPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.ExactlyOnceRequestPB)
}

void ExactlyOnceRequestPB::SharedCtor() {
  _cached_size_ = 0;
  sleep_for_ms_ = 0u;
  value_to_add_ = 0u;
  randomly_fail_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExactlyOnceRequestPB::~ExactlyOnceRequestPB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.ExactlyOnceRequestPB)
  SharedDtor();
}

void ExactlyOnceRequestPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExactlyOnceRequestPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExactlyOnceRequestPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExactlyOnceRequestPB_descriptor_;
}

const ExactlyOnceRequestPB& ExactlyOnceRequestPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

ExactlyOnceRequestPB* ExactlyOnceRequestPB::default_instance_ = NULL;

ExactlyOnceRequestPB* ExactlyOnceRequestPB::New() const {
  return new ExactlyOnceRequestPB;
}

void ExactlyOnceRequestPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExactlyOnceRequestPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sleep_for_ms_, randomly_fail_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExactlyOnceRequestPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.ExactlyOnceRequestPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sleep_for_ms = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sleep_for_ms_)));
          set_has_sleep_for_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value_to_add;
        break;
      }

      // required uint32 value_to_add = 2;
      case 2: {
        if (tag == 16) {
         parse_value_to_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_to_add_)));
          set_has_value_to_add();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_randomly_fail;
        break;
      }

      // optional bool randomly_fail = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_randomly_fail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomly_fail_)));
          set_has_randomly_fail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.ExactlyOnceRequestPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.ExactlyOnceRequestPB)
  return false;
#undef DO_
}

void ExactlyOnceRequestPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.ExactlyOnceRequestPB)
  // optional uint32 sleep_for_ms = 1 [default = 0];
  if (has_sleep_for_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sleep_for_ms(), output);
  }

  // required uint32 value_to_add = 2;
  if (has_value_to_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value_to_add(), output);
  }

  // optional bool randomly_fail = 3 [default = false];
  if (has_randomly_fail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->randomly_fail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.ExactlyOnceRequestPB)
}

::google::protobuf::uint8* ExactlyOnceRequestPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.ExactlyOnceRequestPB)
  // optional uint32 sleep_for_ms = 1 [default = 0];
  if (has_sleep_for_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sleep_for_ms(), target);
  }

  // required uint32 value_to_add = 2;
  if (has_value_to_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value_to_add(), target);
  }

  // optional bool randomly_fail = 3 [default = false];
  if (has_randomly_fail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->randomly_fail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.ExactlyOnceRequestPB)
  return target;
}

int ExactlyOnceRequestPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sleep_for_ms = 1 [default = 0];
    if (has_sleep_for_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sleep_for_ms());
    }

    // required uint32 value_to_add = 2;
    if (has_value_to_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_to_add());
    }

    // optional bool randomly_fail = 3 [default = false];
    if (has_randomly_fail()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExactlyOnceRequestPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExactlyOnceRequestPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExactlyOnceRequestPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExactlyOnceRequestPB::MergeFrom(const ExactlyOnceRequestPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sleep_for_ms()) {
      set_sleep_for_ms(from.sleep_for_ms());
    }
    if (from.has_value_to_add()) {
      set_value_to_add(from.value_to_add());
    }
    if (from.has_randomly_fail()) {
      set_randomly_fail(from.randomly_fail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExactlyOnceRequestPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExactlyOnceRequestPB::CopyFrom(const ExactlyOnceRequestPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExactlyOnceRequestPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void ExactlyOnceRequestPB::Swap(ExactlyOnceRequestPB* other) {
  if (other != this) {
    std::swap(sleep_for_ms_, other->sleep_for_ms_);
    std::swap(value_to_add_, other->value_to_add_);
    std::swap(randomly_fail_, other->randomly_fail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExactlyOnceRequestPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExactlyOnceRequestPB_descriptor_;
  metadata.reflection = ExactlyOnceRequestPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExactlyOnceResponsePB::kCurrentValFieldNumber;
const int ExactlyOnceResponsePB::kCurrentTimeMicrosFieldNumber;
#endif  // !_MSC_VER

ExactlyOnceResponsePB::ExactlyOnceResponsePB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ant.rpc_test.ExactlyOnceResponsePB)
}

void ExactlyOnceResponsePB::InitAsDefaultInstance() {
}

ExactlyOnceResponsePB::ExactlyOnceResponsePB(const ExactlyOnceResponsePB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ant.rpc_test.ExactlyOnceResponsePB)
}

void ExactlyOnceResponsePB::SharedCtor() {
  _cached_size_ = 0;
  current_val_ = 0u;
  current_time_micros_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExactlyOnceResponsePB::~ExactlyOnceResponsePB() {
  // @@protoc_insertion_point(destructor:ant.rpc_test.ExactlyOnceResponsePB)
  SharedDtor();
}

void ExactlyOnceResponsePB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExactlyOnceResponsePB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExactlyOnceResponsePB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExactlyOnceResponsePB_descriptor_;
}

const ExactlyOnceResponsePB& ExactlyOnceResponsePB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ant_2ftests_2frpc_2frtest_2eproto();
  return *default_instance_;
}

ExactlyOnceResponsePB* ExactlyOnceResponsePB::default_instance_ = NULL;

ExactlyOnceResponsePB* ExactlyOnceResponsePB::New() const {
  return new ExactlyOnceResponsePB;
}

void ExactlyOnceResponsePB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExactlyOnceResponsePB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(current_time_micros_, current_val_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExactlyOnceResponsePB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ant.rpc_test.ExactlyOnceResponsePB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 current_val = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_val_)));
          set_has_current_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_current_time_micros;
        break;
      }

      // required fixed64 current_time_micros = 2;
      case 2: {
        if (tag == 17) {
         parse_current_time_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &current_time_micros_)));
          set_has_current_time_micros();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ant.rpc_test.ExactlyOnceResponsePB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ant.rpc_test.ExactlyOnceResponsePB)
  return false;
#undef DO_
}

void ExactlyOnceResponsePB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ant.rpc_test.ExactlyOnceResponsePB)
  // required uint32 current_val = 1;
  if (has_current_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_val(), output);
  }

  // required fixed64 current_time_micros = 2;
  if (has_current_time_micros()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->current_time_micros(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ant.rpc_test.ExactlyOnceResponsePB)
}

::google::protobuf::uint8* ExactlyOnceResponsePB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ant.rpc_test.ExactlyOnceResponsePB)
  // required uint32 current_val = 1;
  if (has_current_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_val(), target);
  }

  // required fixed64 current_time_micros = 2;
  if (has_current_time_micros()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->current_time_micros(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ant.rpc_test.ExactlyOnceResponsePB)
  return target;
}

int ExactlyOnceResponsePB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 current_val = 1;
    if (has_current_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_val());
    }

    // required fixed64 current_time_micros = 2;
    if (has_current_time_micros()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExactlyOnceResponsePB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExactlyOnceResponsePB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExactlyOnceResponsePB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExactlyOnceResponsePB::MergeFrom(const ExactlyOnceResponsePB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_val()) {
      set_current_val(from.current_val());
    }
    if (from.has_current_time_micros()) {
      set_current_time_micros(from.current_time_micros());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExactlyOnceResponsePB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExactlyOnceResponsePB::CopyFrom(const ExactlyOnceResponsePB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExactlyOnceResponsePB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExactlyOnceResponsePB::Swap(ExactlyOnceResponsePB* other) {
  if (other != this) {
    std::swap(current_val_, other->current_val_);
    std::swap(current_time_micros_, other->current_time_micros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExactlyOnceResponsePB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExactlyOnceResponsePB_descriptor_;
  metadata.reflection = ExactlyOnceResponsePB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc_test
}  // namespace ant

// @@protoc_insertion_point(global_scope)
