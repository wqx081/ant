// THIS FILE IS AUTOGENERATED FROM ant/tests/rpc/rtest.proto

#ifndef KUDU_RPC_RTEST_PROXY_DOT_H
#define KUDU_RPC_RTEST_PROXY_DOT_H

#include "ant/tests/rpc/rtest.pb.h"

#include "ant/rpc/proxy.h"
#include "ant/util/status.h"

namespace ant { class Sockaddr; }
namespace ant { namespace rpc { class UserCredentials; } }
namespace ant {
namespace rpc_test {


class CalculatorServiceProxy : public ::ant::rpc::Proxy {
 public:
  CalculatorServiceProxy(const std::shared_ptr< ::ant::rpc::Messenger>
                &messenger, const ::ant::Sockaddr &sockaddr);
  ~CalculatorServiceProxy();


  ::ant::Status Add(const AddRequestPB &req, AddResponsePB *resp,
                          ::ant::rpc::RpcController *controller);
  void AddAsync(const AddRequestPB &req,
                       AddResponsePB *response,
                       ::ant::rpc::RpcController *controller,
                       const ::ant::rpc::ResponseCallback &callback);

  ::ant::Status Sleep(const SleepRequestPB &req, SleepResponsePB *resp,
                          ::ant::rpc::RpcController *controller);
  void SleepAsync(const SleepRequestPB &req,
                       SleepResponsePB *response,
                       ::ant::rpc::RpcController *controller,
                       const ::ant::rpc::ResponseCallback &callback);

  ::ant::Status Echo(const EchoRequestPB &req, EchoResponsePB *resp,
                          ::ant::rpc::RpcController *controller);
  void EchoAsync(const EchoRequestPB &req,
                       EchoResponsePB *response,
                       ::ant::rpc::RpcController *controller,
                       const ::ant::rpc::ResponseCallback &callback);

  ::ant::Status WhoAmI(const WhoAmIRequestPB &req, WhoAmIResponsePB *resp,
                          ::ant::rpc::RpcController *controller);
  void WhoAmIAsync(const WhoAmIRequestPB &req,
                       WhoAmIResponsePB *response,
                       ::ant::rpc::RpcController *controller,
                       const ::ant::rpc::ResponseCallback &callback);

  ::ant::Status TestArgumentsInDiffPackage(const ant::rpc_test_diff_package::ReqDiffPackagePB &req, ant::rpc_test_diff_package::RespDiffPackagePB *resp,
                          ::ant::rpc::RpcController *controller);
  void TestArgumentsInDiffPackageAsync(const ant::rpc_test_diff_package::ReqDiffPackagePB &req,
                       ant::rpc_test_diff_package::RespDiffPackagePB *response,
                       ::ant::rpc::RpcController *controller,
                       const ::ant::rpc::ResponseCallback &callback);

  ::ant::Status Panic(const PanicRequestPB &req, PanicResponsePB *resp,
                          ::ant::rpc::RpcController *controller);
  void PanicAsync(const PanicRequestPB &req,
                       PanicResponsePB *response,
                       ::ant::rpc::RpcController *controller,
                       const ::ant::rpc::ResponseCallback &callback);

  ::ant::Status AddExactlyOnce(const ExactlyOnceRequestPB &req, ExactlyOnceResponsePB *resp,
                          ::ant::rpc::RpcController *controller);
  void AddExactlyOnceAsync(const ExactlyOnceRequestPB &req,
                       ExactlyOnceResponsePB *response,
                       ::ant::rpc::RpcController *controller,
                       const ::ant::rpc::ResponseCallback &callback);

  ::ant::Status TestInvalidResponse(const TestInvalidResponseRequestPB &req, TestInvalidResponseResponsePB *resp,
                          ::ant::rpc::RpcController *controller);
  void TestInvalidResponseAsync(const TestInvalidResponseRequestPB &req,
                       TestInvalidResponseResponsePB *response,
                       ::ant::rpc::RpcController *controller,
                       const ::ant::rpc::ResponseCallback &callback);
};

} // namespace rpc_test
} // namespace ant

#endif
