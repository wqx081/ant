// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ant/server/server_base.proto

#ifndef PROTOBUF_ant_2fserver_2fserver_5fbase_2eproto__INCLUDED
#define PROTOBUF_ant_2fserver_2fserver_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ant/common/common.pb.h"
#include "ant/common/version_info.pb.h"
#include "ant/common/wire_protocol.pb.h"
// @@protoc_insertion_point(includes)

namespace ant {
namespace server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ant_2fserver_2fserver_5fbase_2eproto();
void protobuf_AssignDesc_ant_2fserver_2fserver_5fbase_2eproto();
void protobuf_ShutdownFile_ant_2fserver_2fserver_5fbase_2eproto();

class ServerStatusPB;
class SetFlagRequestPB;
class SetFlagResponsePB;
class FlushCoverageRequestPB;
class FlushCoverageResponsePB;
class ServerClockRequestPB;
class ServerClockResponsePB;
class GetStatusRequestPB;
class GetStatusResponsePB;
class SetServerWallClockForTestsRequestPB;
class SetServerWallClockForTestsResponsePB;

enum SetFlagResponsePB_Code {
  SetFlagResponsePB_Code_UNKNOWN = 0,
  SetFlagResponsePB_Code_SUCCESS = 1,
  SetFlagResponsePB_Code_NO_SUCH_FLAG = 2,
  SetFlagResponsePB_Code_BAD_VALUE = 3,
  SetFlagResponsePB_Code_NOT_SAFE = 4
};
bool SetFlagResponsePB_Code_IsValid(int value);
const SetFlagResponsePB_Code SetFlagResponsePB_Code_Code_MIN = SetFlagResponsePB_Code_UNKNOWN;
const SetFlagResponsePB_Code SetFlagResponsePB_Code_Code_MAX = SetFlagResponsePB_Code_NOT_SAFE;
const int SetFlagResponsePB_Code_Code_ARRAYSIZE = SetFlagResponsePB_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* SetFlagResponsePB_Code_descriptor();
inline const ::std::string& SetFlagResponsePB_Code_Name(SetFlagResponsePB_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    SetFlagResponsePB_Code_descriptor(), value);
}
inline bool SetFlagResponsePB_Code_Parse(
    const ::std::string& name, SetFlagResponsePB_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetFlagResponsePB_Code>(
    SetFlagResponsePB_Code_descriptor(), name, value);
}
// ===================================================================

class ServerStatusPB : public ::google::protobuf::Message {
 public:
  ServerStatusPB();
  virtual ~ServerStatusPB();

  ServerStatusPB(const ServerStatusPB& from);

  inline ServerStatusPB& operator=(const ServerStatusPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerStatusPB& default_instance();

  void Swap(ServerStatusPB* other);

  // implements Message ----------------------------------------------

  ServerStatusPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerStatusPB& from);
  void MergeFrom(const ServerStatusPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ant.NodeInstancePB node_instance = 1;
  inline bool has_node_instance() const;
  inline void clear_node_instance();
  static const int kNodeInstanceFieldNumber = 1;
  inline const ::ant::NodeInstancePB& node_instance() const;
  inline ::ant::NodeInstancePB* mutable_node_instance();
  inline ::ant::NodeInstancePB* release_node_instance();
  inline void set_allocated_node_instance(::ant::NodeInstancePB* node_instance);

  // repeated .ant.HostPortPB bound_rpc_addresses = 2;
  inline int bound_rpc_addresses_size() const;
  inline void clear_bound_rpc_addresses();
  static const int kBoundRpcAddressesFieldNumber = 2;
  inline const ::ant::HostPortPB& bound_rpc_addresses(int index) const;
  inline ::ant::HostPortPB* mutable_bound_rpc_addresses(int index);
  inline ::ant::HostPortPB* add_bound_rpc_addresses();
  inline const ::google::protobuf::RepeatedPtrField< ::ant::HostPortPB >&
      bound_rpc_addresses() const;
  inline ::google::protobuf::RepeatedPtrField< ::ant::HostPortPB >*
      mutable_bound_rpc_addresses();

  // repeated .ant.HostPortPB bound_http_addresses = 3;
  inline int bound_http_addresses_size() const;
  inline void clear_bound_http_addresses();
  static const int kBoundHttpAddressesFieldNumber = 3;
  inline const ::ant::HostPortPB& bound_http_addresses(int index) const;
  inline ::ant::HostPortPB* mutable_bound_http_addresses(int index);
  inline ::ant::HostPortPB* add_bound_http_addresses();
  inline const ::google::protobuf::RepeatedPtrField< ::ant::HostPortPB >&
      bound_http_addresses() const;
  inline ::google::protobuf::RepeatedPtrField< ::ant::HostPortPB >*
      mutable_bound_http_addresses();

  // optional .ant.VersionInfoPB version_info = 4;
  inline bool has_version_info() const;
  inline void clear_version_info();
  static const int kVersionInfoFieldNumber = 4;
  inline const ::ant::VersionInfoPB& version_info() const;
  inline ::ant::VersionInfoPB* mutable_version_info();
  inline ::ant::VersionInfoPB* release_version_info();
  inline void set_allocated_version_info(::ant::VersionInfoPB* version_info);

  // @@protoc_insertion_point(class_scope:ant.server.ServerStatusPB)
 private:
  inline void set_has_node_instance();
  inline void clear_has_node_instance();
  inline void set_has_version_info();
  inline void clear_has_version_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ant::NodeInstancePB* node_instance_;
  ::google::protobuf::RepeatedPtrField< ::ant::HostPortPB > bound_rpc_addresses_;
  ::google::protobuf::RepeatedPtrField< ::ant::HostPortPB > bound_http_addresses_;
  ::ant::VersionInfoPB* version_info_;
  friend void  protobuf_AddDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_AssignDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_ShutdownFile_ant_2fserver_2fserver_5fbase_2eproto();

  void InitAsDefaultInstance();
  static ServerStatusPB* default_instance_;
};
// -------------------------------------------------------------------

class SetFlagRequestPB : public ::google::protobuf::Message {
 public:
  SetFlagRequestPB();
  virtual ~SetFlagRequestPB();

  SetFlagRequestPB(const SetFlagRequestPB& from);

  inline SetFlagRequestPB& operator=(const SetFlagRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetFlagRequestPB& default_instance();

  void Swap(SetFlagRequestPB* other);

  // implements Message ----------------------------------------------

  SetFlagRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetFlagRequestPB& from);
  void MergeFrom(const SetFlagRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline const ::std::string& flag() const;
  inline void set_flag(const ::std::string& value);
  inline void set_flag(const char* value);
  inline void set_flag(const char* value, size_t size);
  inline ::std::string* mutable_flag();
  inline ::std::string* release_flag();
  inline void set_allocated_flag(::std::string* flag);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional bool force = 3 [default = false];
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 3;
  inline bool force() const;
  inline void set_force(bool value);

  // @@protoc_insertion_point(class_scope:ant.server.SetFlagRequestPB)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_force();
  inline void clear_has_force();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* flag_;
  ::std::string* value_;
  bool force_;
  friend void  protobuf_AddDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_AssignDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_ShutdownFile_ant_2fserver_2fserver_5fbase_2eproto();

  void InitAsDefaultInstance();
  static SetFlagRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class SetFlagResponsePB : public ::google::protobuf::Message {
 public:
  SetFlagResponsePB();
  virtual ~SetFlagResponsePB();

  SetFlagResponsePB(const SetFlagResponsePB& from);

  inline SetFlagResponsePB& operator=(const SetFlagResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetFlagResponsePB& default_instance();

  void Swap(SetFlagResponsePB* other);

  // implements Message ----------------------------------------------

  SetFlagResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetFlagResponsePB& from);
  void MergeFrom(const SetFlagResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SetFlagResponsePB_Code Code;
  static const Code UNKNOWN = SetFlagResponsePB_Code_UNKNOWN;
  static const Code SUCCESS = SetFlagResponsePB_Code_SUCCESS;
  static const Code NO_SUCH_FLAG = SetFlagResponsePB_Code_NO_SUCH_FLAG;
  static const Code BAD_VALUE = SetFlagResponsePB_Code_BAD_VALUE;
  static const Code NOT_SAFE = SetFlagResponsePB_Code_NOT_SAFE;
  static inline bool Code_IsValid(int value) {
    return SetFlagResponsePB_Code_IsValid(value);
  }
  static const Code Code_MIN =
    SetFlagResponsePB_Code_Code_MIN;
  static const Code Code_MAX =
    SetFlagResponsePB_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    SetFlagResponsePB_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return SetFlagResponsePB_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return SetFlagResponsePB_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return SetFlagResponsePB_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ant.server.SetFlagResponsePB.Code result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::ant::server::SetFlagResponsePB_Code result() const;
  inline void set_result(::ant::server::SetFlagResponsePB_Code value);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional string old_value = 3;
  inline bool has_old_value() const;
  inline void clear_old_value();
  static const int kOldValueFieldNumber = 3;
  inline const ::std::string& old_value() const;
  inline void set_old_value(const ::std::string& value);
  inline void set_old_value(const char* value);
  inline void set_old_value(const char* value, size_t size);
  inline ::std::string* mutable_old_value();
  inline ::std::string* release_old_value();
  inline void set_allocated_old_value(::std::string* old_value);

  // @@protoc_insertion_point(class_scope:ant.server.SetFlagResponsePB)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_old_value();
  inline void clear_has_old_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  ::std::string* old_value_;
  int result_;
  friend void  protobuf_AddDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_AssignDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_ShutdownFile_ant_2fserver_2fserver_5fbase_2eproto();

  void InitAsDefaultInstance();
  static SetFlagResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class FlushCoverageRequestPB : public ::google::protobuf::Message {
 public:
  FlushCoverageRequestPB();
  virtual ~FlushCoverageRequestPB();

  FlushCoverageRequestPB(const FlushCoverageRequestPB& from);

  inline FlushCoverageRequestPB& operator=(const FlushCoverageRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushCoverageRequestPB& default_instance();

  void Swap(FlushCoverageRequestPB* other);

  // implements Message ----------------------------------------------

  FlushCoverageRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushCoverageRequestPB& from);
  void MergeFrom(const FlushCoverageRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ant.server.FlushCoverageRequestPB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_AssignDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_ShutdownFile_ant_2fserver_2fserver_5fbase_2eproto();

  void InitAsDefaultInstance();
  static FlushCoverageRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class FlushCoverageResponsePB : public ::google::protobuf::Message {
 public:
  FlushCoverageResponsePB();
  virtual ~FlushCoverageResponsePB();

  FlushCoverageResponsePB(const FlushCoverageResponsePB& from);

  inline FlushCoverageResponsePB& operator=(const FlushCoverageResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushCoverageResponsePB& default_instance();

  void Swap(FlushCoverageResponsePB* other);

  // implements Message ----------------------------------------------

  FlushCoverageResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushCoverageResponsePB& from);
  void MergeFrom(const FlushCoverageResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:ant.server.FlushCoverageResponsePB)
 private:
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool success_;
  friend void  protobuf_AddDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_AssignDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_ShutdownFile_ant_2fserver_2fserver_5fbase_2eproto();

  void InitAsDefaultInstance();
  static FlushCoverageResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class ServerClockRequestPB : public ::google::protobuf::Message {
 public:
  ServerClockRequestPB();
  virtual ~ServerClockRequestPB();

  ServerClockRequestPB(const ServerClockRequestPB& from);

  inline ServerClockRequestPB& operator=(const ServerClockRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerClockRequestPB& default_instance();

  void Swap(ServerClockRequestPB* other);

  // implements Message ----------------------------------------------

  ServerClockRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerClockRequestPB& from);
  void MergeFrom(const ServerClockRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ant.server.ServerClockRequestPB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_AssignDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_ShutdownFile_ant_2fserver_2fserver_5fbase_2eproto();

  void InitAsDefaultInstance();
  static ServerClockRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class ServerClockResponsePB : public ::google::protobuf::Message {
 public:
  ServerClockResponsePB();
  virtual ~ServerClockResponsePB();

  ServerClockResponsePB(const ServerClockResponsePB& from);

  inline ServerClockResponsePB& operator=(const ServerClockResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerClockResponsePB& default_instance();

  void Swap(ServerClockResponsePB* other);

  // implements Message ----------------------------------------------

  ServerClockResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerClockResponsePB& from);
  void MergeFrom(const ServerClockResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ant.server.ServerClockResponsePB)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 timestamp_;
  friend void  protobuf_AddDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_AssignDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_ShutdownFile_ant_2fserver_2fserver_5fbase_2eproto();

  void InitAsDefaultInstance();
  static ServerClockResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class GetStatusRequestPB : public ::google::protobuf::Message {
 public:
  GetStatusRequestPB();
  virtual ~GetStatusRequestPB();

  GetStatusRequestPB(const GetStatusRequestPB& from);

  inline GetStatusRequestPB& operator=(const GetStatusRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStatusRequestPB& default_instance();

  void Swap(GetStatusRequestPB* other);

  // implements Message ----------------------------------------------

  GetStatusRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStatusRequestPB& from);
  void MergeFrom(const GetStatusRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ant.server.GetStatusRequestPB)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_AssignDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_ShutdownFile_ant_2fserver_2fserver_5fbase_2eproto();

  void InitAsDefaultInstance();
  static GetStatusRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class GetStatusResponsePB : public ::google::protobuf::Message {
 public:
  GetStatusResponsePB();
  virtual ~GetStatusResponsePB();

  GetStatusResponsePB(const GetStatusResponsePB& from);

  inline GetStatusResponsePB& operator=(const GetStatusResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStatusResponsePB& default_instance();

  void Swap(GetStatusResponsePB* other);

  // implements Message ----------------------------------------------

  GetStatusResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStatusResponsePB& from);
  void MergeFrom(const GetStatusResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ant.server.ServerStatusPB status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::ant::server::ServerStatusPB& status() const;
  inline ::ant::server::ServerStatusPB* mutable_status();
  inline ::ant::server::ServerStatusPB* release_status();
  inline void set_allocated_status(::ant::server::ServerStatusPB* status);

  // @@protoc_insertion_point(class_scope:ant.server.GetStatusResponsePB)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ant::server::ServerStatusPB* status_;
  friend void  protobuf_AddDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_AssignDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_ShutdownFile_ant_2fserver_2fserver_5fbase_2eproto();

  void InitAsDefaultInstance();
  static GetStatusResponsePB* default_instance_;
};
// -------------------------------------------------------------------

class SetServerWallClockForTestsRequestPB : public ::google::protobuf::Message {
 public:
  SetServerWallClockForTestsRequestPB();
  virtual ~SetServerWallClockForTestsRequestPB();

  SetServerWallClockForTestsRequestPB(const SetServerWallClockForTestsRequestPB& from);

  inline SetServerWallClockForTestsRequestPB& operator=(const SetServerWallClockForTestsRequestPB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetServerWallClockForTestsRequestPB& default_instance();

  void Swap(SetServerWallClockForTestsRequestPB* other);

  // implements Message ----------------------------------------------

  SetServerWallClockForTestsRequestPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetServerWallClockForTestsRequestPB& from);
  void MergeFrom(const SetServerWallClockForTestsRequestPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 now_usec = 1;
  inline bool has_now_usec() const;
  inline void clear_now_usec();
  static const int kNowUsecFieldNumber = 1;
  inline ::google::protobuf::uint64 now_usec() const;
  inline void set_now_usec(::google::protobuf::uint64 value);

  // optional uint64 max_error_usec = 2;
  inline bool has_max_error_usec() const;
  inline void clear_max_error_usec();
  static const int kMaxErrorUsecFieldNumber = 2;
  inline ::google::protobuf::uint64 max_error_usec() const;
  inline void set_max_error_usec(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ant.server.SetServerWallClockForTestsRequestPB)
 private:
  inline void set_has_now_usec();
  inline void clear_has_now_usec();
  inline void set_has_max_error_usec();
  inline void clear_has_max_error_usec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 now_usec_;
  ::google::protobuf::uint64 max_error_usec_;
  friend void  protobuf_AddDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_AssignDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_ShutdownFile_ant_2fserver_2fserver_5fbase_2eproto();

  void InitAsDefaultInstance();
  static SetServerWallClockForTestsRequestPB* default_instance_;
};
// -------------------------------------------------------------------

class SetServerWallClockForTestsResponsePB : public ::google::protobuf::Message {
 public:
  SetServerWallClockForTestsResponsePB();
  virtual ~SetServerWallClockForTestsResponsePB();

  SetServerWallClockForTestsResponsePB(const SetServerWallClockForTestsResponsePB& from);

  inline SetServerWallClockForTestsResponsePB& operator=(const SetServerWallClockForTestsResponsePB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetServerWallClockForTestsResponsePB& default_instance();

  void Swap(SetServerWallClockForTestsResponsePB* other);

  // implements Message ----------------------------------------------

  SetServerWallClockForTestsResponsePB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetServerWallClockForTestsResponsePB& from);
  void MergeFrom(const SetServerWallClockForTestsResponsePB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:ant.server.SetServerWallClockForTestsResponsePB)
 private:
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool success_;
  friend void  protobuf_AddDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_AssignDesc_ant_2fserver_2fserver_5fbase_2eproto();
  friend void protobuf_ShutdownFile_ant_2fserver_2fserver_5fbase_2eproto();

  void InitAsDefaultInstance();
  static SetServerWallClockForTestsResponsePB* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerStatusPB

// required .ant.NodeInstancePB node_instance = 1;
inline bool ServerStatusPB::has_node_instance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerStatusPB::set_has_node_instance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerStatusPB::clear_has_node_instance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerStatusPB::clear_node_instance() {
  if (node_instance_ != NULL) node_instance_->::ant::NodeInstancePB::Clear();
  clear_has_node_instance();
}
inline const ::ant::NodeInstancePB& ServerStatusPB::node_instance() const {
  // @@protoc_insertion_point(field_get:ant.server.ServerStatusPB.node_instance)
  return node_instance_ != NULL ? *node_instance_ : *default_instance_->node_instance_;
}
inline ::ant::NodeInstancePB* ServerStatusPB::mutable_node_instance() {
  set_has_node_instance();
  if (node_instance_ == NULL) node_instance_ = new ::ant::NodeInstancePB;
  // @@protoc_insertion_point(field_mutable:ant.server.ServerStatusPB.node_instance)
  return node_instance_;
}
inline ::ant::NodeInstancePB* ServerStatusPB::release_node_instance() {
  clear_has_node_instance();
  ::ant::NodeInstancePB* temp = node_instance_;
  node_instance_ = NULL;
  return temp;
}
inline void ServerStatusPB::set_allocated_node_instance(::ant::NodeInstancePB* node_instance) {
  delete node_instance_;
  node_instance_ = node_instance;
  if (node_instance) {
    set_has_node_instance();
  } else {
    clear_has_node_instance();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.server.ServerStatusPB.node_instance)
}

// repeated .ant.HostPortPB bound_rpc_addresses = 2;
inline int ServerStatusPB::bound_rpc_addresses_size() const {
  return bound_rpc_addresses_.size();
}
inline void ServerStatusPB::clear_bound_rpc_addresses() {
  bound_rpc_addresses_.Clear();
}
inline const ::ant::HostPortPB& ServerStatusPB::bound_rpc_addresses(int index) const {
  // @@protoc_insertion_point(field_get:ant.server.ServerStatusPB.bound_rpc_addresses)
  return bound_rpc_addresses_.Get(index);
}
inline ::ant::HostPortPB* ServerStatusPB::mutable_bound_rpc_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:ant.server.ServerStatusPB.bound_rpc_addresses)
  return bound_rpc_addresses_.Mutable(index);
}
inline ::ant::HostPortPB* ServerStatusPB::add_bound_rpc_addresses() {
  // @@protoc_insertion_point(field_add:ant.server.ServerStatusPB.bound_rpc_addresses)
  return bound_rpc_addresses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ant::HostPortPB >&
ServerStatusPB::bound_rpc_addresses() const {
  // @@protoc_insertion_point(field_list:ant.server.ServerStatusPB.bound_rpc_addresses)
  return bound_rpc_addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::ant::HostPortPB >*
ServerStatusPB::mutable_bound_rpc_addresses() {
  // @@protoc_insertion_point(field_mutable_list:ant.server.ServerStatusPB.bound_rpc_addresses)
  return &bound_rpc_addresses_;
}

// repeated .ant.HostPortPB bound_http_addresses = 3;
inline int ServerStatusPB::bound_http_addresses_size() const {
  return bound_http_addresses_.size();
}
inline void ServerStatusPB::clear_bound_http_addresses() {
  bound_http_addresses_.Clear();
}
inline const ::ant::HostPortPB& ServerStatusPB::bound_http_addresses(int index) const {
  // @@protoc_insertion_point(field_get:ant.server.ServerStatusPB.bound_http_addresses)
  return bound_http_addresses_.Get(index);
}
inline ::ant::HostPortPB* ServerStatusPB::mutable_bound_http_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:ant.server.ServerStatusPB.bound_http_addresses)
  return bound_http_addresses_.Mutable(index);
}
inline ::ant::HostPortPB* ServerStatusPB::add_bound_http_addresses() {
  // @@protoc_insertion_point(field_add:ant.server.ServerStatusPB.bound_http_addresses)
  return bound_http_addresses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ant::HostPortPB >&
ServerStatusPB::bound_http_addresses() const {
  // @@protoc_insertion_point(field_list:ant.server.ServerStatusPB.bound_http_addresses)
  return bound_http_addresses_;
}
inline ::google::protobuf::RepeatedPtrField< ::ant::HostPortPB >*
ServerStatusPB::mutable_bound_http_addresses() {
  // @@protoc_insertion_point(field_mutable_list:ant.server.ServerStatusPB.bound_http_addresses)
  return &bound_http_addresses_;
}

// optional .ant.VersionInfoPB version_info = 4;
inline bool ServerStatusPB::has_version_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerStatusPB::set_has_version_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerStatusPB::clear_has_version_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerStatusPB::clear_version_info() {
  if (version_info_ != NULL) version_info_->::ant::VersionInfoPB::Clear();
  clear_has_version_info();
}
inline const ::ant::VersionInfoPB& ServerStatusPB::version_info() const {
  // @@protoc_insertion_point(field_get:ant.server.ServerStatusPB.version_info)
  return version_info_ != NULL ? *version_info_ : *default_instance_->version_info_;
}
inline ::ant::VersionInfoPB* ServerStatusPB::mutable_version_info() {
  set_has_version_info();
  if (version_info_ == NULL) version_info_ = new ::ant::VersionInfoPB;
  // @@protoc_insertion_point(field_mutable:ant.server.ServerStatusPB.version_info)
  return version_info_;
}
inline ::ant::VersionInfoPB* ServerStatusPB::release_version_info() {
  clear_has_version_info();
  ::ant::VersionInfoPB* temp = version_info_;
  version_info_ = NULL;
  return temp;
}
inline void ServerStatusPB::set_allocated_version_info(::ant::VersionInfoPB* version_info) {
  delete version_info_;
  version_info_ = version_info;
  if (version_info) {
    set_has_version_info();
  } else {
    clear_has_version_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.server.ServerStatusPB.version_info)
}

// -------------------------------------------------------------------

// SetFlagRequestPB

// required string flag = 1;
inline bool SetFlagRequestPB::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetFlagRequestPB::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetFlagRequestPB::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetFlagRequestPB::clear_flag() {
  if (flag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flag_->clear();
  }
  clear_has_flag();
}
inline const ::std::string& SetFlagRequestPB::flag() const {
  // @@protoc_insertion_point(field_get:ant.server.SetFlagRequestPB.flag)
  return *flag_;
}
inline void SetFlagRequestPB::set_flag(const ::std::string& value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
  // @@protoc_insertion_point(field_set:ant.server.SetFlagRequestPB.flag)
}
inline void SetFlagRequestPB::set_flag(const char* value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.server.SetFlagRequestPB.flag)
}
inline void SetFlagRequestPB::set_flag(const char* value, size_t size) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flag_ = new ::std::string;
  }
  flag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.server.SetFlagRequestPB.flag)
}
inline ::std::string* SetFlagRequestPB::mutable_flag() {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    flag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.server.SetFlagRequestPB.flag)
  return flag_;
}
inline ::std::string* SetFlagRequestPB::release_flag() {
  clear_has_flag();
  if (flag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = flag_;
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SetFlagRequestPB::set_allocated_flag(::std::string* flag) {
  if (flag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete flag_;
  }
  if (flag) {
    set_has_flag();
    flag_ = flag;
  } else {
    clear_has_flag();
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.server.SetFlagRequestPB.flag)
}

// required string value = 2;
inline bool SetFlagRequestPB::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetFlagRequestPB::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetFlagRequestPB::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetFlagRequestPB::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& SetFlagRequestPB::value() const {
  // @@protoc_insertion_point(field_get:ant.server.SetFlagRequestPB.value)
  return *value_;
}
inline void SetFlagRequestPB::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:ant.server.SetFlagRequestPB.value)
}
inline void SetFlagRequestPB::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.server.SetFlagRequestPB.value)
}
inline void SetFlagRequestPB::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.server.SetFlagRequestPB.value)
}
inline ::std::string* SetFlagRequestPB::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.server.SetFlagRequestPB.value)
  return value_;
}
inline ::std::string* SetFlagRequestPB::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SetFlagRequestPB::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.server.SetFlagRequestPB.value)
}

// optional bool force = 3 [default = false];
inline bool SetFlagRequestPB::has_force() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetFlagRequestPB::set_has_force() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetFlagRequestPB::clear_has_force() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetFlagRequestPB::clear_force() {
  force_ = false;
  clear_has_force();
}
inline bool SetFlagRequestPB::force() const {
  // @@protoc_insertion_point(field_get:ant.server.SetFlagRequestPB.force)
  return force_;
}
inline void SetFlagRequestPB::set_force(bool value) {
  set_has_force();
  force_ = value;
  // @@protoc_insertion_point(field_set:ant.server.SetFlagRequestPB.force)
}

// -------------------------------------------------------------------

// SetFlagResponsePB

// required .ant.server.SetFlagResponsePB.Code result = 1;
inline bool SetFlagResponsePB::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetFlagResponsePB::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetFlagResponsePB::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetFlagResponsePB::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::ant::server::SetFlagResponsePB_Code SetFlagResponsePB::result() const {
  // @@protoc_insertion_point(field_get:ant.server.SetFlagResponsePB.result)
  return static_cast< ::ant::server::SetFlagResponsePB_Code >(result_);
}
inline void SetFlagResponsePB::set_result(::ant::server::SetFlagResponsePB_Code value) {
  assert(::ant::server::SetFlagResponsePB_Code_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:ant.server.SetFlagResponsePB.result)
}

// optional string msg = 2;
inline bool SetFlagResponsePB::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetFlagResponsePB::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetFlagResponsePB::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetFlagResponsePB::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& SetFlagResponsePB::msg() const {
  // @@protoc_insertion_point(field_get:ant.server.SetFlagResponsePB.msg)
  return *msg_;
}
inline void SetFlagResponsePB::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:ant.server.SetFlagResponsePB.msg)
}
inline void SetFlagResponsePB::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.server.SetFlagResponsePB.msg)
}
inline void SetFlagResponsePB::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.server.SetFlagResponsePB.msg)
}
inline ::std::string* SetFlagResponsePB::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.server.SetFlagResponsePB.msg)
  return msg_;
}
inline ::std::string* SetFlagResponsePB::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SetFlagResponsePB::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.server.SetFlagResponsePB.msg)
}

// optional string old_value = 3;
inline bool SetFlagResponsePB::has_old_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetFlagResponsePB::set_has_old_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetFlagResponsePB::clear_has_old_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetFlagResponsePB::clear_old_value() {
  if (old_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_value_->clear();
  }
  clear_has_old_value();
}
inline const ::std::string& SetFlagResponsePB::old_value() const {
  // @@protoc_insertion_point(field_get:ant.server.SetFlagResponsePB.old_value)
  return *old_value_;
}
inline void SetFlagResponsePB::set_old_value(const ::std::string& value) {
  set_has_old_value();
  if (old_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_value_ = new ::std::string;
  }
  old_value_->assign(value);
  // @@protoc_insertion_point(field_set:ant.server.SetFlagResponsePB.old_value)
}
inline void SetFlagResponsePB::set_old_value(const char* value) {
  set_has_old_value();
  if (old_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_value_ = new ::std::string;
  }
  old_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:ant.server.SetFlagResponsePB.old_value)
}
inline void SetFlagResponsePB::set_old_value(const char* value, size_t size) {
  set_has_old_value();
  if (old_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_value_ = new ::std::string;
  }
  old_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ant.server.SetFlagResponsePB.old_value)
}
inline ::std::string* SetFlagResponsePB::mutable_old_value() {
  set_has_old_value();
  if (old_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    old_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ant.server.SetFlagResponsePB.old_value)
  return old_value_;
}
inline ::std::string* SetFlagResponsePB::release_old_value() {
  clear_has_old_value();
  if (old_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = old_value_;
    old_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SetFlagResponsePB::set_allocated_old_value(::std::string* old_value) {
  if (old_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete old_value_;
  }
  if (old_value) {
    set_has_old_value();
    old_value_ = old_value;
  } else {
    clear_has_old_value();
    old_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ant.server.SetFlagResponsePB.old_value)
}

// -------------------------------------------------------------------

// FlushCoverageRequestPB

// -------------------------------------------------------------------

// FlushCoverageResponsePB

// optional bool success = 1;
inline bool FlushCoverageResponsePB::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushCoverageResponsePB::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushCoverageResponsePB::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushCoverageResponsePB::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool FlushCoverageResponsePB::success() const {
  // @@protoc_insertion_point(field_get:ant.server.FlushCoverageResponsePB.success)
  return success_;
}
inline void FlushCoverageResponsePB::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:ant.server.FlushCoverageResponsePB.success)
}

// -------------------------------------------------------------------

// ServerClockRequestPB

// -------------------------------------------------------------------

// ServerClockResponsePB

// optional fixed64 timestamp = 1;
inline bool ServerClockResponsePB::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerClockResponsePB::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerClockResponsePB::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerClockResponsePB::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 ServerClockResponsePB::timestamp() const {
  // @@protoc_insertion_point(field_get:ant.server.ServerClockResponsePB.timestamp)
  return timestamp_;
}
inline void ServerClockResponsePB::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ant.server.ServerClockResponsePB.timestamp)
}

// -------------------------------------------------------------------

// GetStatusRequestPB

// -------------------------------------------------------------------

// GetStatusResponsePB

// required .ant.server.ServerStatusPB status = 1;
inline bool GetStatusResponsePB::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetStatusResponsePB::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetStatusResponsePB::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetStatusResponsePB::clear_status() {
  if (status_ != NULL) status_->::ant::server::ServerStatusPB::Clear();
  clear_has_status();
}
inline const ::ant::server::ServerStatusPB& GetStatusResponsePB::status() const {
  // @@protoc_insertion_point(field_get:ant.server.GetStatusResponsePB.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::ant::server::ServerStatusPB* GetStatusResponsePB::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::ant::server::ServerStatusPB;
  // @@protoc_insertion_point(field_mutable:ant.server.GetStatusResponsePB.status)
  return status_;
}
inline ::ant::server::ServerStatusPB* GetStatusResponsePB::release_status() {
  clear_has_status();
  ::ant::server::ServerStatusPB* temp = status_;
  status_ = NULL;
  return temp;
}
inline void GetStatusResponsePB::set_allocated_status(::ant::server::ServerStatusPB* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:ant.server.GetStatusResponsePB.status)
}

// -------------------------------------------------------------------

// SetServerWallClockForTestsRequestPB

// optional uint64 now_usec = 1;
inline bool SetServerWallClockForTestsRequestPB::has_now_usec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetServerWallClockForTestsRequestPB::set_has_now_usec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetServerWallClockForTestsRequestPB::clear_has_now_usec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetServerWallClockForTestsRequestPB::clear_now_usec() {
  now_usec_ = GOOGLE_ULONGLONG(0);
  clear_has_now_usec();
}
inline ::google::protobuf::uint64 SetServerWallClockForTestsRequestPB::now_usec() const {
  // @@protoc_insertion_point(field_get:ant.server.SetServerWallClockForTestsRequestPB.now_usec)
  return now_usec_;
}
inline void SetServerWallClockForTestsRequestPB::set_now_usec(::google::protobuf::uint64 value) {
  set_has_now_usec();
  now_usec_ = value;
  // @@protoc_insertion_point(field_set:ant.server.SetServerWallClockForTestsRequestPB.now_usec)
}

// optional uint64 max_error_usec = 2;
inline bool SetServerWallClockForTestsRequestPB::has_max_error_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetServerWallClockForTestsRequestPB::set_has_max_error_usec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetServerWallClockForTestsRequestPB::clear_has_max_error_usec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetServerWallClockForTestsRequestPB::clear_max_error_usec() {
  max_error_usec_ = GOOGLE_ULONGLONG(0);
  clear_has_max_error_usec();
}
inline ::google::protobuf::uint64 SetServerWallClockForTestsRequestPB::max_error_usec() const {
  // @@protoc_insertion_point(field_get:ant.server.SetServerWallClockForTestsRequestPB.max_error_usec)
  return max_error_usec_;
}
inline void SetServerWallClockForTestsRequestPB::set_max_error_usec(::google::protobuf::uint64 value) {
  set_has_max_error_usec();
  max_error_usec_ = value;
  // @@protoc_insertion_point(field_set:ant.server.SetServerWallClockForTestsRequestPB.max_error_usec)
}

// -------------------------------------------------------------------

// SetServerWallClockForTestsResponsePB

// required bool success = 1;
inline bool SetServerWallClockForTestsResponsePB::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetServerWallClockForTestsResponsePB::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetServerWallClockForTestsResponsePB::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetServerWallClockForTestsResponsePB::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool SetServerWallClockForTestsResponsePB::success() const {
  // @@protoc_insertion_point(field_get:ant.server.SetServerWallClockForTestsResponsePB.success)
  return success_;
}
inline void SetServerWallClockForTestsResponsePB::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:ant.server.SetServerWallClockForTestsResponsePB.success)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace ant

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ant::server::SetFlagResponsePB_Code> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ant::server::SetFlagResponsePB_Code>() {
  return ::ant::server::SetFlagResponsePB_Code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ant_2fserver_2fserver_5fbase_2eproto__INCLUDED
